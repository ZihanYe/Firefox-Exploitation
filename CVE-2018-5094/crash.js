'use strict';

// Original: /snapshot/ochang_js_fuzzer/resources/fuzz_library.js
function __isPropertyOfType(obj, name, type) {
  let desc;

  try {
    desc = Object.getOwnPropertyDescriptor(obj, name);
  } catch (e) {
    return false;
  }

  if (!desc) return false;
  return typeof type === 'undefined' || typeof desc.value === type;
}

function __getProperties(obj, type) {
  if (typeof obj === "undefined" || obj === null) return [];
  let properties = [];

  for (let name of Object.getOwnPropertyNames(obj)) {
    if (__isPropertyOfType(obj, name, type)) properties.push(name);
  }

  let proto = Object.getPrototypeOf(obj);

  while (proto && proto != Object.prototype) {
    Object.getOwnPropertyNames(proto).forEach(name => {
      if (name !== 'constructor') {
        if (__isPropertyOfType(proto, name, type)) properties.push(name);
      }
    });
    proto = Object.getPrototypeOf(proto);
  }

  return properties;
}

function* __getObjects(root = this, level = 0) {
  if (level > 4) return;

  let obj_names = __getProperties(root, 'object');

  for (let obj_name of obj_names) {
    let obj = root[obj_name];
    if (obj === root) continue;
    yield obj;
    yield* __getObjects(obj, level + 1);
  }
}

function __getRandomObject(seed) {
  let objects = [];

  for (let obj of __getObjects()) {
    objects.push(obj);
  }

  return objects[seed % objects.length];
}

function __getRandomProperty(obj, seed) {
  let properties = __getProperties(obj);

  if (!properties.length) return undefined;
  return properties[seed % properties.length];
}

function __callRandomFunction(obj, seed, ...args) {
  let functions = __getProperties(obj, 'function');

  if (!functions.length) return;
  let random_function = functions[seed % functions.length];

  try {
    obj[random_function](...args);
  } catch (e) {}
}

function runNearStackLimit(f) {
  function t() {
    try {
      return t();
    } catch (e) {
      return f();
    }
  }

  ;

  try {
    return t();
  } catch (e) {}
}

function nop() {
  return false;
}

try {
  this.alert = console.log;
} catch (e) {}

try {
  this.print = console.log;
} catch (e) {}

try {
  gc;
} catch (e) {
  this.gc = function () {
    for (let i = 0; i < 10000; i++) {
      let s = new String("AAAA" + Math.random());
    }
  };
}

try {
  uneval;
} catch (e) {
  this.uneval = this.nop;
}

try {
  WScript;
} catch (e) {
  this.WScript = new Proxy({}, {
    get(target, name) {
      switch (name) {
        case 'Echo':
          return print;

        default:
          return {};
      }
    }

  });
}

try {
  this.failWithMessage = nop;
} catch (e) {}

try {
  this.triggerAssertFalse = nop;
} catch (e) {}

try {
  this.quit = nop;
} catch (e) {}

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/spidermonkey/shell.js
(function (global) {
  "use strict";

  var undefined;
  var Error = global.Error;
  var Function = global.Function;
  var Number = global.Number;
  var RegExp = global.RegExp;
  var String = global.String;
  var Symbol = global.Symbol;
  var TypeError = global.TypeError;
  var ArrayIsArray = global.Array.isArray;
  var MathAbs = global.Math.abs;
  var ObjectCreate = global.Object.create;
  var ObjectDefineProperty = global.Object.defineProperty;
  var ReflectApply = global.Reflect.apply;
  var RegExpPrototypeExec = global.RegExp.prototype.exec;
  var StringPrototypeCharCodeAt = global.String.prototype.charCodeAt;
  var StringPrototypeIndexOf = global.String.prototype.indexOf;
  var StringPrototypeSubstring = global.String.prototype.substring;
  var runningInBrowser = typeof global.window !== "undefined";

  if (runningInBrowser) {
    var SpecialPowersSetGCZeal = global.SpecialPowers ? global.SpecialPowers.setGCZeal : undefined;
  }

  var evaluate = global.evaluate;
  var options = global.options;

  function ArrayPush(arr, val) {
    assertEq(ArrayIsArray(arr), true, "ArrayPush must only be used on actual arrays");
    var desc = ObjectCreate(null);
    desc.value = val;
    desc.enumerable = true;
    desc.configurable = true;
    desc.writable = true;
    ObjectDefineProperty(arr, arr.length, desc);
  }

  function StringCharCodeAt(str, index) {
    return ReflectApply(StringPrototypeCharCodeAt, str, [index]);
  }

  function StringSplit(str, delimiter) {
    assertEq(typeof str === "string" && typeof delimiter === "string", true, "StringSplit must be called with two string arguments");
    assertEq(delimiter.length > 0, true, "StringSplit doesn't support an empty delimiter string");
    var parts = [];
    var last = 0;

    while (true) {
      var i = ReflectApply(StringPrototypeIndexOf, str, [delimiter, last]);

      if (i < 0) {
        if (last < str.length) ArrayPush(parts, ReflectApply(StringPrototypeSubstring, str, [last]));
        return parts;
      }

      ArrayPush(parts, ReflectApply(StringPrototypeSubstring, str, [last, i]));
      last = i + delimiter.length;
    }
  }

  function shellOptionsClear() {
    assertEq(runningInBrowser, false, "Only called when running in the shell.");
    var currentOptions = options();
    if (currentOptions === "") return;
    var optionNames = StringSplit(currentOptions, ",");

    for (var i = 0; i < optionNames.length; i++) {
      options(optionNames[i]);
    }
  }

  function SameValue(v1, v2) {
    if (v1 === 0 && v2 === 0) return 1 / v1 === 1 / v2;
    if (v1 !== v1 && v2 !== v2) return true;
    return v1 === v2;
  }

  var assertEq = global.assertEq;

  if (typeof assertEq !== "function") {
    assertEq = function assertEq(actual, expected, message) {
      if (!SameValue(actual, expected)) {
        throw new TypeError(`Assertion failed: got "${actual}", expected "${expected}"` + (message ? ": " + message : ""));
      }
    };

    global.assertEq = assertEq;
  }

  function assertEqArray(actual, expected) {
    var len = actual.length;
    assertEq(len, expected.length, "mismatching array lengths");
    var i = 0;

    try {
      for (; i < len; i++) assertEq(actual[i], expected[i], "mismatch at element " + i);
    } catch (e) {
      throw new Error(`Exception thrown at index ${i}: ${e}`);
    }
  }

  global.assertEqArray = assertEqArray;

  function assertThrows(f) {
    var ok = false;

    try {
      f();
    } catch (exc) {
      ok = true;
    }

    if (!ok) throw new Error(`Assertion failed: ${f} did not throw as expected`);
  }

  global.assertThrows = assertThrows;

  function assertThrowsInstanceOf(f, ctor, msg) {
    var fullmsg;

    try {
      f();
    } catch (exc) {
      if (exc instanceof ctor) return;
      fullmsg = `Assertion failed: expected exception ${ctor.name}, got ${exc}`;
    }

    if (fullmsg === undefined) fullmsg = `Assertion failed: expected exception ${ctor.name}, no exception thrown`;
    if (msg !== undefined) fullmsg += " - " + msg;
    throw new Error(fullmsg);
  }

  global.assertThrowsInstanceOf = assertThrowsInstanceOf;
  var dump = global.dump;

  if (typeof global.dump === "function") {} else {
    if (runningInBrowser) {
      dump = function () {};
    } else {
      dump = global.print;
    }

    global.dump = dump;
  }

  var print;

  if (runningInBrowser) {
    print = function print() {
      var s = "TEST-INFO | ";

      for (var i = 0; i < arguments.length; i++) s += String(arguments[i]) + " ";

      dump(s + "\n");
      global.AddPrintOutput(s);
    };

    global.print = print;
  } else {
    print = global.print;
  }

  var gczeal = global.gczeal;

  if (typeof gczeal !== "function") {
    if (typeof SpecialPowersSetGCZeal === "function") {
      gczeal = function gczeal(z) {
        SpecialPowersSetGCZeal(z);
      };
    } else {
      gczeal = function () {};
    }

    global.gczeal = gczeal;
  }

  var evaluateScript = global.evaluateScript;

  if (typeof evaluate === "function" && typeof evaluateScript !== "function") {
    evaluateScript = function evaluateScript(code) {
      evaluate(String(code));
    };

    global.evaluateScript = evaluateScript;
  }

  function toPrinted(value) {
    value = String(value);
    var digits = "0123456789ABCDEF";
    var result = "";

    for (var i = 0; i < value.length; i++) {
      var ch = StringCharCodeAt(value, i);

      if (ch === 0x5C && i + 1 < value.length) {
        var d = value[i + 1];

        if (d === "n") {
          result += "NL";
          i++;
        } else if (d === "r") {
          result += "CR";
          i++;
        } else {
          result += "\\";
        }
      } else if (ch === 0x0A) {
        result += "NL";
      } else if (ch < 0x20 || ch > 0x7E) {
        var a = digits[ch & 0xf];
        ch >>= 4;
        var b = digits[ch & 0xf];
        ch >>= 4;

        if (ch) {
          var c = digits[ch & 0xf];
          ch >>= 4;
          var d = digits[ch & 0xf];
          result += "\\u" + d + c + b + a;
        } else {
          result += "\\x" + b + a;
        }
      } else {
        result += value[i];
      }
    }

    return result;
  }

  function* XorShiftGenerator(seed, size) {
    let x = seed;

    for (let i = 0; i < size; i++) {
      x ^= x >> 12;
      x ^= x << 25;
      x ^= x >> 27;
      yield x % 256;
    }
  }

  global.XorShiftGenerator = XorShiftGenerator;
  var PASSED = " PASSED! ";
  var FAILED = " FAILED! ";

  function AddTestCase(description, expect, actual) {
    new TestCase(description, expect, actual);
  }

  global.AddTestCase = AddTestCase;
  var testCasesArray = [];

  function TestCase(d, e, a, r) {
    this.description = d;
    this.expect = e;
    this.actual = a;
    this.passed = getTestCaseResult(e, a);
    this.reason = typeof r !== 'undefined' ? String(r) : '';
    ArrayPush(testCasesArray, this);
  }

  global.TestCase = TestCase;
  TestCase.prototype = ObjectCreate(null);

  TestCase.prototype.testPassed = function TestCase_testPassed() {
    return this.passed;
  };

  TestCase.prototype.testFailed = function TestCase_testFailed() {
    return !this.passed;
  };

  TestCase.prototype.testDescription = function TestCase_testDescription() {
    return this.description + ' ' + this.reason;
  };

  function getTestCaseResult(expected, actual) {
    if (typeof expected !== typeof actual) return false;
    if (typeof expected !== 'number') return actual == expected;
    if (actual !== actual) return expected !== expected;
    if (expected !== expected) return false;
    if (actual !== expected) return MathAbs(actual - expected) <= 1E-10;
    return true;
  }

  function reportTestCaseResult(description, expected, actual, output) {
    var testcase = new TestCase(description, expected, actual, output);

    if (!runningInBrowser) {
      if (testcase.passed) {
        print(PASSED + description);
      } else {
        reportFailure(description + " : " + output);
      }
    }
  }

  function getTestCases() {
    return testCasesArray;
  }

  global.getTestCases = getTestCases;

  function expectExitCode(n) {
    print('--- NOTE: IN THIS TESTCASE, WE EXPECT EXIT CODE ' + n + ' ---');
  }

  global.expectExitCode = expectExitCode;

  function inSection(x) {
    return "Section " + x + " of test - ";
  }

  global.inSection = inSection;

  function reportFailure(msg) {
    msg = String(msg);
    var lines = StringSplit(msg, "\n");

    for (var i = 0; i < lines.length; i++) print(FAILED + " " + lines[i]);
  }

  global.reportFailure = reportFailure;

  function printStatus(msg) {
    msg = String(msg);
    var lines = StringSplit(msg, "\n");

    for (var i = 0; i < lines.length; i++) print("STATUS: " + lines[i]);
  }

  global.printStatus = printStatus;

  function printBugNumber(num) {
    print('BUGNUMBER: ' + num);
  }

  global.printBugNumber = printBugNumber;

  function reportCompare(expected, actual, description) {
    var expected_t = typeof expected;
    var actual_t = typeof actual;
    var output = "";
    if (typeof description === "undefined") description = "";
    if (expected_t !== actual_t) output += `Type mismatch, expected type ${expected_t}, actual type ${actual_t} `;
    if (expected != actual) output += `Expected value '${toPrinted(expected)}', Actual value '${toPrinted(actual)}' `;
    reportTestCaseResult(description, expected, actual, output);
  }

  global.reportCompare = reportCompare;

  function reportMatch(expectedRegExp, actual, description) {
    var expected_t = "string";
    var actual_t = typeof actual;
    var output = "";
    if (typeof description === "undefined") description = "";
    if (expected_t !== actual_t) output += `Type mismatch, expected type ${expected_t}, actual type ${actual_t} `;
    var matches = ReflectApply(RegExpPrototypeExec, expectedRegExp, [actual]) !== null;

    if (!matches) {
      output += `Expected match to '${toPrinted(expectedRegExp)}', Actual value '${toPrinted(actual)}' `;
    }

    reportTestCaseResult(description, true, matches, output);
  }

  global.reportMatch = reportMatch;

  function compareSource(expect, actual, summary) {
    var expectP = String(expect);
    var actualP = String(actual);
    print('expect:\n' + expectP);
    print('actual:\n' + actualP);
    reportCompare(expectP, actualP, summary);

    try {
      var expectCompile = 'No Error';
      var actualCompile;
      Function(expect);

      try {
        Function(actual);
        actualCompile = 'No Error';
      } catch (ex1) {
        actualCompile = ex1 + '';
      }

      reportCompare(expectCompile, actualCompile, summary + ': compile actual');
    } catch (ex) {}
  }

  global.compareSource = compareSource;

  function test() {
    var testCases = getTestCases();

    for (var i = 0; i < testCases.length; i++) {
      var testCase = testCases[i];
      testCase.reason += testCase.passed ? "" : "wrong value ";

      if (!runningInBrowser) {
        var message = `${testCase.description} = ${testCase.actual} expected: ${testCase.expect}`;
        print((testCase.passed ? PASSED : FAILED) + message);
      }
    }
  }

  global.test = test;

  function writeHeaderToLog(string) {
    print(string);
  }

  global.writeHeaderToLog = writeHeaderToLog;

  function getPromiseResult(promise) {
    var result,
        error,
        caught = false;
    promise.then(r => {
      result = r;
    }, e => {
      caught = true;
      error = e;
    });
    drainJobQueue();
    if (caught) throw error;
    return result;
  }

  global.getPromiseResult = getPromiseResult;

  function assertEventuallyEq(promise, expected) {
    assertEq(getPromiseResult(promise), expected);
  }

  global.assertEventuallyEq = assertEventuallyEq;

  function assertEventuallyThrows(promise, expectedErrorType) {
    assertThrowsInstanceOf(() => getPromiseResult(promise), expectedErrorType);
  }

  ;
  global.assertEventuallyThrows = assertEventuallyThrows;

  function assertEventuallyDeepEq(promise, expected) {
    assertDeepEq(getPromiseResult(promise), expected);
  }

  ;
  global.assertEventuallyDeepEq = assertEventuallyDeepEq;
  if (!runningInBrowser) shellOptionsClear();
})(this);

var DESCRIPTION;

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/spidermonkey/test262/shell.js
function assert(mustBeTrue, message) {
  if (mustBeTrue === true) {
    return;
  }

  if (message === undefined) {
    message = 'Expected true but got ' + String(mustBeTrue);
  }

  $ERROR(message);
}

assert._isSameValue = function (a, b) {
  if (a === b) {
    return a !== 0 || 1 / a === 1 / b;
  }

  return a !== a && b !== b;
};

assert.sameValue = function (actual, expected, message) {
  if (assert._isSameValue(actual, expected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(Â«' + String(actual) + 'Â», Â«' + String(expected) + 'Â») to be true';
  $ERROR(message);
};

assert.notSameValue = function (actual, unexpected, message) {
  if (!assert._isSameValue(actual, unexpected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(Â«' + String(actual) + 'Â», Â«' + String(unexpected) + 'Â») to be false';
  $ERROR(message);
};

assert.throws = function (expectedErrorConstructor, func, message) {
  if (typeof func !== "function") {
    $ERROR('assert.throws requires two arguments: the error constructor ' + 'and a function to run');
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  try {
    func();
  } catch (thrown) {
    if (typeof thrown !== 'object' || thrown === null) {
      message += 'Thrown value was not an object!';
      $ERROR(message);
    } else if (thrown.constructor !== expectedErrorConstructor) {
      message += 'Expected a ' + expectedErrorConstructor.name + ' but got a ' + thrown.constructor.name;
      $ERROR(message);
    }

    return;
  }

  message += 'Expected a ' + expectedErrorConstructor.name + ' to be thrown but no exception was thrown at all';
  $ERROR(message);
};

assert.throws.early = function (err, code) {
  let wrappedCode = 'function wrapperFn() { ' + code + ' }';
  let ieval = eval;
  assert.throws(err, function () {
    Function(wrappedCode);
  }, 'Function: ' + code);
};

function compareArray(a, b) {
  if (b.length !== a.length) {
    return false;
  }

  for (var i = 0; i < a.length; i++) {
    if (b[i] !== a[i]) {
      return false;
    }
  }

  return true;
}

assert.compareArray = function (actual, expected, message) {
  assert(compareArray(actual, expected), 'Expected [' + actual.join(', ') + '] and [' + expected.join(', ') + '] to have the same contents. ' + message);
};

function verifyProperty(obj, name, desc, options) {
  assert(arguments.length > 2, 'verifyProperty should receive at least 3 arguments: obj, name, and descriptor');
  var originalDesc = Object.getOwnPropertyDescriptor(obj, name);
  var nameStr = String(name);

  if (desc === undefined) {
    assert.sameValue(originalDesc, undefined, "obj['" + nameStr + "'] descriptor should be undefined");
    return true;
  }

  assert(Object.prototype.hasOwnProperty.call(obj, name), "obj should have an own property " + nameStr);
  assert.notSameValue(desc, null, "The desc argument should be an object or undefined, null");
  assert.sameValue(typeof desc, "object", "The desc argument should be an object or undefined, " + String(desc));
  var failures = [];

  if (Object.prototype.hasOwnProperty.call(desc, 'value')) {
    if (desc.value !== originalDesc.value) {
      failures.push("descriptor value should be " + desc.value);
    }
  }

  if (Object.prototype.hasOwnProperty.call(desc, 'enumerable')) {
    if (desc.enumerable !== originalDesc.enumerable || desc.enumerable !== isEnumerable(obj, name)) {
      failures.push('descriptor should ' + (desc.enumerable ? '' : 'not ') + 'be enumerable');
    }
  }

  if (Object.prototype.hasOwnProperty.call(desc, 'writable')) {
    if (desc.writable !== originalDesc.writable || desc.writable !== isWritable(obj, name)) {
      failures.push('descriptor should ' + (desc.writable ? '' : 'not ') + 'be writable');
    }
  }

  if (Object.prototype.hasOwnProperty.call(desc, 'configurable')) {
    if (desc.configurable !== originalDesc.configurable || desc.configurable !== isConfigurable(obj, name)) {
      failures.push('descriptor should ' + (desc.configurable ? '' : 'not ') + 'be configurable');
    }
  }

  assert.sameValue(failures.length, 0, failures.join('; '));

  if (options && options.restore) {
    Object.defineProperty(obj, name, originalDesc);
  }

  return true;
}

function isConfigurable(obj, name) {
  try {
    delete obj[name];
  } catch (e) {
    if (!(e instanceof TypeError)) {
      $ERROR("Expected TypeError, got " + e);
    }
  }

  return !Object.prototype.hasOwnProperty.call(obj, name);
}

function isEnumerable(obj, name) {
  var stringCheck = false;

  if (typeof name === "string") {
    for (var x in obj) {
      if (x === name) {
        stringCheck = true;
        break;
      }
    }
  } else {
    stringCheck = true;
  }

  return stringCheck && Object.prototype.hasOwnProperty.call(obj, name) && Object.prototype.propertyIsEnumerable.call(obj, name);
}

function isEqualTo(obj, name, expectedValue) {
  var actualValue = obj[name];
  return assert._isSameValue(actualValue, expectedValue);
}

function isWritable(obj, name, verifyProp, value) {
  var newValue = value || "unlikelyValue";
  var hadValue = Object.prototype.hasOwnProperty.call(obj, name);
  var oldValue = obj[name];
  var writeSucceeded;

  try {
    obj[name] = newValue;
  } catch (e) {
    if (!(e instanceof TypeError)) {
      $ERROR("Expected TypeError, got " + e);
    }
  }

  writeSucceeded = isEqualTo(obj, verifyProp || name, newValue);

  if (writeSucceeded) {
    if (hadValue) {
      obj[name] = oldValue;
    } else {
      delete obj[name];
    }
  }

  return writeSucceeded;
}

function verifyEqualTo(obj, name, value) {
  if (!isEqualTo(obj, name, value)) {
    $ERROR("Expected obj[" + String(name) + "] to equal " + value + ", actually " + obj[name]);
  }
}

function verifyWritable(obj, name, verifyProp, value) {
  if (!verifyProp) {
    assert(Object.getOwnPropertyDescriptor(obj, name).writable, "Expected obj[" + String(name) + "] to have writable:true.");
  }

  if (!isWritable(obj, name, verifyProp, value)) {
    $ERROR("Expected obj[" + String(name) + "] to be writable, but was not.");
  }
}

function verifyNotWritable(obj, name, verifyProp, value) {
  if (!verifyProp) {
    assert(!Object.getOwnPropertyDescriptor(obj, name).writable, "Expected obj[" + String(name) + "] to have writable:false.");
  }

  if (isWritable(obj, name, verifyProp)) {
    $ERROR("Expected obj[" + String(name) + "] NOT to be writable, but was.");
  }
}

function verifyEnumerable(obj, name) {
  assert(Object.getOwnPropertyDescriptor(obj, name).enumerable, "Expected obj[" + String(name) + "] to have enumerable:true.");

  if (!isEnumerable(obj, name)) {
    $ERROR("Expected obj[" + String(name) + "] to be enumerable, but was not.");
  }
}

function verifyNotEnumerable(obj, name) {
  assert(!Object.getOwnPropertyDescriptor(obj, name).enumerable, "Expected obj[" + String(name) + "] to have enumerable:false.");

  if (isEnumerable(obj, name)) {
    $ERROR("Expected obj[" + String(name) + "] NOT to be enumerable, but was.");
  }
}

function verifyConfigurable(obj, name) {
  assert(Object.getOwnPropertyDescriptor(obj, name).configurable, "Expected obj[" + String(name) + "] to have configurable:true.");

  if (!isConfigurable(obj, name)) {
    $ERROR("Expected obj[" + String(name) + "] to be configurable, but was not.");
  }
}

function verifyNotConfigurable(obj, name) {
  assert(!Object.getOwnPropertyDescriptor(obj, name).configurable, "Expected obj[" + String(name) + "] to have configurable:false.");

  if (isConfigurable(obj, name)) {
    $ERROR("Expected obj[" + String(name) + "] NOT to be configurable, but was.");
  }
}

function Test262Error(message) {
  this.message = message || "";
}

Test262Error.prototype.toString = function () {
  return "Test262Error: " + this.message;
};

var $ERROR;

$ERROR = function $ERROR(message) {
  throw new Test262Error(message);
};

;

(function createHostObject(global) {
  var FunctionToString = global.Function.prototype.toString;
  var ReflectApply = global.Reflect.apply;
  var NewGlobal = global.newGlobal;
  var Atomics = global.Atomics;
  var SharedArrayBuffer = global.SharedArrayBuffer;
  var Int32Array = global.Int32Array;
  var setSharedArrayBuffer = global.setSharedArrayBuffer;
  var getSharedArrayBuffer = global.getSharedArrayBuffer;
  var evalInWorker = global.evalInWorker;
  var hasCreateIsHTMLDDA = "createIsHTMLDDA" in global;
  var hasThreads = "helperThreadCount" in global ? global.helperThreadCount() > 0 : true;
  var hasMailbox = typeof setSharedArrayBuffer == "function" && typeof getSharedArrayBuffer == "function";
  var hasEvalInWorker = typeof evalInWorker == "function";
  if (!hasCreateIsHTMLDDA && !("document" in global && "all" in global.document)) throw new Error("no [[IsHTMLDDA]] object available for testing");
  var IsHTMLDDA = hasCreateIsHTMLDDA ? global.createIsHTMLDDA() : global.document.all;
  var shellCode = hasMailbox && hasEvalInWorker;
  var sabTestable = Atomics && SharedArrayBuffer && hasThreads && shellCode;
  global.$262 = {
    __proto__: null,

    createRealm() {
      var newGlobalObject = NewGlobal();
      var createHostObjectFn = ReflectApply(FunctionToString, createHostObject, []);
      newGlobalObject.Function(`${createHostObjectFn} createHostObject(this);`)();
      return newGlobalObject.$262;
    },

    detachArrayBuffer: global.detachArrayBuffer,
    evalScript: global.evaluateScript || global.evaluate,
    global,
    IsHTMLDDA,
    agent: function () {
      if (!sabTestable) {
        return {
          _notAvailable() {
            if (!hasThreads && shellCode) {
              global.reportCompare(0, 0);
              global.quit(0);
            }

            throw new Error("Agents not available");
          },

          start(script) {
            this._notAvailable();
          },

          broadcast(sab, id) {
            this._notAvailable();
          },

          getReport() {
            this._notAvailable();
          },

          sleep(s) {
            this._notAvailable();
          }

        };
      }

      var _MSG_LOC = 0;
      var _ID_LOC = 1;
      var _ACK_LOC = 2;
      var _RDY_LOC = 3;
      var _LOCKTXT_LOC = 4;
      var _NUMTXT_LOC = 5;
      var _NEXT_LOC = 6;
      var _SLEEP_LOC = 7;
      var _FIRST = 10;

      var _ia = new Int32Array(new SharedArrayBuffer(65536));

      _ia[_NEXT_LOC] = _FIRST;
      var _worker_prefix = `if (typeof $262 == 'undefined')
    $262 = {};
$262.agent = (function () {
    var _ia = new Int32Array(getSharedArrayBuffer());
    var agent = {
        receiveBroadcast(receiver) {
            var k;
            while (((k = Atomics.load(_ia, ${_MSG_LOC})) & 1) == 0)
                ;
            var received_sab = getSharedArrayBuffer();
            var received_id = Atomics.load(_ia, ${_ID_LOC});
            Atomics.add(_ia, ${_ACK_LOC}, 1);
            while (Atomics.load(_ia, ${_MSG_LOC}) == k)
                ;
            receiver(received_sab, received_id);
        },

        report(msg) {
            while (Atomics.compareExchange(_ia, ${_LOCKTXT_LOC}, 0, 1) == 1)
                ;
            msg = "" + msg;
            var i = _ia[${_NEXT_LOC}];
            _ia[i++] = msg.length;
            for ( let j=0 ; j < msg.length ; j++ )
                _ia[i++] = msg.charCodeAt(j);
            _ia[${_NEXT_LOC}] = i;
            Atomics.add(_ia, ${_NUMTXT_LOC}, 1);
            Atomics.store(_ia, ${_LOCKTXT_LOC}, 0);
        },

        sleep(s) {
            Atomics.wait(_ia, ${_SLEEP_LOC}, 0, s);
        },

        leaving() {}
    };
    Atomics.add(_ia, ${_RDY_LOC}, 1);
    return agent;
})();`;
      return {
        _numWorkers: 0,
        _numReports: 0,
        _reportPtr: _FIRST,

        _bailIfNotAvailable() {
          if (!sabTestable) {
            if (!hasThreads && shellCode) {
              global.reportCompare(0, 0);
              global.quit(0);
            }

            throw new Error("Agents not available");
          }
        },

        start(script) {
          this._bailIfNotAvailable();

          setSharedArrayBuffer(_ia.buffer);
          var oldrdy = Atomics.load(_ia, _RDY_LOC);
          evalInWorker(_worker_prefix + script);

          while (Atomics.load(_ia, _RDY_LOC) == oldrdy);

          this._numWorkers++;
        },

        broadcast(sab, id) {
          this._bailIfNotAvailable();

          setSharedArrayBuffer(sab);
          Atomics.store(_ia, _ID_LOC, id);
          Atomics.store(_ia, _ACK_LOC, 0);
          Atomics.add(_ia, _MSG_LOC, 1);

          while (Atomics.load(_ia, _ACK_LOC) < this._numWorkers);

          Atomics.add(_ia, _MSG_LOC, 1);
        },

        getReport() {
          this._bailIfNotAvailable();

          if (this._numReports == Atomics.load(_ia, _NUMTXT_LOC)) return null;
          var s = "";
          var i = this._reportPtr;
          var len = _ia[i++];

          for (let j = 0; j < len; j++) s += String.fromCharCode(_ia[i++]);

          this._reportPtr = i;
          this._numReports++;
          return s;
        },

        sleep(s) {
          this._bailIfNotAvailable();

          Atomics.wait(_ia, _SLEEP_LOC, 0, s);
        }

      };
    }()
  };
})(this);

var $mozAsyncTestDone = false;

function $DONE(failure) {
  if ($mozAsyncTestDone) {
    reportFailure("$DONE() already called");
    return;
  }

  $mozAsyncTestDone = true;
  if (failure) reportFailure(failure);else reportCompare(0, 0);
}

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/spidermonkey/test262/built-ins/Date/shell.js
function assertRelativeDateMs(date, expectedMs) {
  var actualMs = date.valueOf();
  var localOffset = date.getTimezoneOffset() * 60000;

  if (actualMs - localOffset !== expectedMs) {
    $ERROR('Expected ' + date + ' to be ' + expectedMs + ' milliseconds from the Unix epoch');
  }
}

var date_1899_end = -2208988800001;
var date_1900_start = -2208988800000;
var date_1969_end = -1;
var date_1970_start = 0;
var date_1999_end = 946684799999;
var date_2000_start = 946684800000;
var date_2099_end = 4102444799999;
var date_2100_start = 4102444800000;

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/spidermonkey/test262/built-ins/DataView/shell.js
function $DETACHBUFFER(buffer) {
  if (!$262 || typeof $262.detachArrayBuffer !== "function") {
    throw new Test262Error("No method available to detach an ArrayBuffer");
  }

  $262.detachArrayBuffer(buffer);
}

var byteConversionValues = {
  values: [127, 128, 32767, 32768, 2147483647, 2147483648, 255, 256, 65535, 65536, 4294967295, 4294967296, 9007199254740991, 9007199254740992, 1.1, 0.1, 0.5, 0.50000001, 0.6, 0.7, undefined, -1, -0, -0.1, -1.1, NaN, -127, -128, -32767, -32768, -2147483647, -2147483648, -255, -256, -65535, -65536, -4294967295, -4294967296, Infinity, -Infinity, 0],
  expected: {
    Int8: [127, -128, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, -127, -128, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],
    Uint8: [127, 128, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 1, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 129, 128, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],
    Uint8Clamped: [127, 128, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0],
    Int16: [127, 128, 32767, -32768, -1, 0, 255, 256, -1, 0, -1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, -127, -128, -32767, -32768, 1, 0, -255, -256, 1, 0, 1, 0, 0, 0, 0],
    Uint16: [127, 128, 32767, 32768, 65535, 0, 255, 256, 65535, 0, 65535, 0, 65535, 0, 1, 0, 0, 0, 0, 0, 0, 65535, 0, 0, 65535, 0, 65409, 65408, 32769, 32768, 1, 0, 65281, 65280, 1, 0, 1, 0, 0, 0, 0],
    Int32: [127, 128, 32767, 32768, 2147483647, -2147483648, 255, 256, 65535, 65536, -1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, -127, -128, -32767, -32768, -2147483647, -2147483648, -255, -256, -65535, -65536, 1, 0, 0, 0, 0],
    Uint32: [127, 128, 32767, 32768, 2147483647, 2147483648, 255, 256, 65535, 65536, 4294967295, 0, 4294967295, 0, 1, 0, 0, 0, 0, 0, 0, 4294967295, 0, 0, 4294967295, 0, 4294967169, 4294967168, 4294934529, 4294934528, 2147483649, 2147483648, 4294967041, 4294967040, 4294901761, 4294901760, 1, 0, 0, 0, 0],
    Float32: [127, 128, 32767, 32768, 2147483648, 2147483648, 255, 256, 65535, 65536, 4294967296, 4294967296, 9007199254740992, 9007199254740992, 1.100000023841858, 0.10000000149011612, 0.5, 0.5, 0.6000000238418579, 0.699999988079071, NaN, -1, -0, -0.10000000149011612, -1.100000023841858, NaN, -127, -128, -32767, -32768, -2147483648, -2147483648, -255, -256, -65535, -65536, -4294967296, -4294967296, Infinity, -Infinity, 0],
    Float64: [127, 128, 32767, 32768, 2147483647, 2147483648, 255, 256, 65535, 65536, 4294967295, 4294967296, 9007199254740991, 9007199254740992, 1.1, 0.1, 0.5, 0.50000001, 0.6, 0.7, NaN, -1, -0, -0.1, -1.1, NaN, -127, -128, -32767, -32768, -2147483647, -2147483648, -255, -256, -65535, -65536, -4294967295, -4294967296, Infinity, -Infinity, 0]
  }
};

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/v8/test/mjsunit/mjsunit.js
function MjsUnitAssertionError(message) {
  this.message = message;
  let prevPrepareStackTrace = Error.prepareStackTrace;

  try {
    Error.prepareStackTrace = MjsUnitAssertionError.prepareStackTrace;
    this.stack = new Error("MjsUnitAssertionError").stack;
  } finally {
    Error.prepareStackTrace = prevPrepareStackTrace;
  }
}

MjsUnitAssertionError.prototype.toString = function () {
  return this.message + "\n\nStack: " + this.stack;
};

var assertSame;
var assertEquals;
var assertNotEquals;
var assertEqualsDelta;
var assertArrayEquals;
var assertPropertiesEqual;
var assertToStringEquals;
var assertTrue;
var assertFalse;
var assertNull;
var assertNotNull;
var assertThrows;
var assertThrowsEquals;
var assertDoesNotThrow;
var assertInstanceof;
var assertUnreachable;
var assertOptimized;
var assertUnoptimized;
var assertContains;
var assertMatches;
var assertPromiseResult;
var promiseTestChain;
var promiseTestCount = 0;
var V8OptimizationStatus = {
  kIsFunction: 1 << 0,
  kNeverOptimize: 1 << 1,
  kAlwaysOptimize: 1 << 2,
  kMaybeDeopted: 1 << 3,
  kOptimized: 1 << 4,
  kTurboFanned: 1 << 5,
  kInterpreted: 1 << 6,
  kMarkedForOptimization: 1 << 7,
  kMarkedForConcurrentOptimization: 1 << 8,
  kOptimizingConcurrently: 1 << 9,
  kIsExecuting: 1 << 10,
  kTopmostFrameIsTurboFanned: 1 << 11
};
var isNeverOptimize;
var isAlwaysOptimize;
var isInterpreted;
var isOptimized;
var isCrankshafted;
var isTurboFanned;
var testAsync;
var failWithMessage;

(function () {
  var ObjectPrototypeToString = Object.prototype.toString;
  var NumberPrototypeValueOf = Number.prototype.valueOf;
  var BooleanPrototypeValueOf = Boolean.prototype.valueOf;
  var StringPrototypeValueOf = String.prototype.valueOf;
  var DatePrototypeValueOf = Date.prototype.valueOf;
  var RegExpPrototypeToString = RegExp.prototype.toString;
  var ArrayPrototypeForEach = Array.prototype.forEach;
  var ArrayPrototypeJoin = Array.prototype.join;
  var ArrayPrototypeMap = Array.prototype.map;
  var ArrayPrototypePush = Array.prototype.push;
  var BigIntPrototypeValueOf;

  try {
    BigIntPrototypeValueOf = BigInt.prototype.valueOf;
  } catch (e) {}

  function classOf(object) {
    var string = ObjectPrototypeToString.call(object);
    return string.substring(8, string.length - 1);
  }

  function ValueOf(value) {
    switch (classOf(value)) {
      case "Number":
        return NumberPrototypeValueOf.call(value);

      case "BigInt":
        return BigIntPrototypeValueOf.call(value);

      case "String":
        return StringPrototypeValueOf.call(value);

      case "Boolean":
        return BooleanPrototypeValueOf.call(value);

      case "Date":
        return DatePrototypeValueOf.call(value);

      default:
        return value;
    }
  }

  function PrettyPrint(value) {
    switch (typeof value) {
      case "string":
        return JSON.stringify(value);

      case "bigint":
        return String(value) + "n";

      case "number":
        if (value === 0 && 1 / value < 0) return "-0";

      case "boolean":
      case "undefined":
      case "function":
      case "symbol":
        return String(value);

      case "object":
        if (value === null) return "null";
        var objectClass = classOf(value);

        switch (objectClass) {
          case "Number":
          case "BigInt":
          case "String":
          case "Boolean":
          case "Date":
            return objectClass + "(" + PrettyPrint(ValueOf(value)) + ")";

          case "RegExp":
            return RegExpPrototypeToString.call(value);

          case "Array":
            var mapped = ArrayPrototypeMap.call(value, PrettyPrintArrayElement);
            var joined = ArrayPrototypeJoin.call(mapped, ",");
            return "[" + joined + "]";

          case "Uint8Array":
          case "Int8Array":
          case "Int16Array":
          case "Uint16Array":
          case "Uint32Array":
          case "Int32Array":
          case "Float32Array":
          case "Float64Array":
            var joined = ArrayPrototypeJoin.call(value, ",");
            return objectClass + "([" + joined + "])";

          case "Object":
            break;

          default:
            return objectClass + "()";
        }

        var name = value.constructor.name;
        if (name) return name + "()";
        return "Object()";

      default:
        return "-- unknown value --";
    }
  }

  function PrettyPrintArrayElement(value, index, array) {
    if (value === undefined && !(index in array)) return "";
    return PrettyPrint(value);
  }

  failWithMessage = function failWithMessage(message) {
    throw new MjsUnitAssertionError(message);
  };

  function formatFailureText(expectedText, found, name_opt) {
    var message = "Fail" + "ure";

    if (name_opt) {
      message += " (" + name_opt + ")";
    }

    var foundText = PrettyPrint(found);

    if (expectedText.length <= 40 && foundText.length <= 40) {
      message += ": expected <" + expectedText + "> found <" + foundText + ">";
    } else {
      message += ":\nexpected:\n" + expectedText + "\nfound:\n" + foundText;
    }

    return message;
  }

  function fail(expectedText, found, name_opt) {
    return failWithMessage(formatFailureText(expectedText, found, name_opt));
  }

  function deepObjectEquals(a, b) {
    var aProps = Object.keys(a);
    aProps.sort();
    var bProps = Object.keys(b);
    bProps.sort();

    if (!deepEquals(aProps, bProps)) {
      return false;
    }

    for (var i = 0; i < aProps.length; i++) {
      if (!deepEquals(a[aProps[i]], b[aProps[i]])) {
        return false;
      }
    }

    return true;
  }

  function deepEquals(a, b) {
    if (a === b) {
      if (a === 0) return 1 / a === 1 / b;
      return true;
    }

    if (typeof a !== typeof b) return false;
    if (typeof a === "number") return isNaN(a) && isNaN(b);
    if (typeof a !== "object" && typeof a !== "function") return false;
    var objectClass = classOf(a);
    if (objectClass !== classOf(b)) return false;

    if (objectClass === "RegExp") {
      return RegExpPrototypeToString.call(a) === RegExpPrototypeToString.call(b);
    }

    if (objectClass === "Function") return false;

    if (objectClass === "Array") {
      var elementCount = 0;

      if (a.length !== b.length) {
        return false;
      }

      for (var i = 0; i < a.length; i++) {
        if (!deepEquals(a[i], b[i])) return false;
      }

      return true;
    }

    if (objectClass === "String" || objectClass === "Number" || objectClass === "BigInt" || objectClass === "Boolean" || objectClass === "Date") {
      if (ValueOf(a) !== ValueOf(b)) return false;
    }

    return deepObjectEquals(a, b);
  }

  assertSame = function assertSame(expected, found, name_opt) {
    if (found === expected) {
      if (expected !== 0 || 1 / expected === 1 / found) return;
    } else if (expected !== expected && found !== found) {
      return;
    }

    fail(PrettyPrint(expected), found, name_opt);
  };

  assertEquals = function assertEquals(expected, found, name_opt) {
    if (!deepEquals(found, expected)) {
      fail(PrettyPrint(expected), found, name_opt);
    }
  };

  assertNotEquals = function assertNotEquals(expected, found, name_opt) {
    if (deepEquals(found, expected)) {
      fail("not equals to " + PrettyPrint(expected), found, name_opt);
    }
  };

  assertEqualsDelta = function assertEqualsDelta(expected, found, delta, name_opt) {
    if (Math.abs(expected - found) > delta) {
      fail(PrettyPrint(expected) + " +- " + PrettyPrint(delta), found, name_opt);
    }
  };

  assertArrayEquals = function assertArrayEquals(expected, found, name_opt) {
    var start = "";

    if (name_opt) {
      start = name_opt + " - ";
    }

    assertEquals(expected.length, found.length, start + "array length");

    if (expected.length === found.length) {
      for (var i = 0; i < expected.length; ++i) {
        assertEquals(expected[i], found[i], start + "array element at index " + i);
      }
    }
  };

  assertPropertiesEqual = function assertPropertiesEqual(expected, found, name_opt) {
    if (!deepObjectEquals(expected, found)) {
      fail(expected, found, name_opt);
    }
  };

  assertToStringEquals = function assertToStringEquals(expected, found, name_opt) {
    if (expected !== String(found)) {
      fail(expected, found, name_opt);
    }
  };

  assertTrue = function assertTrue(value, name_opt) {
    assertEquals(true, value, name_opt);
  };

  assertFalse = function assertFalse(value, name_opt) {
    assertEquals(false, value, name_opt);
  };

  assertNull = function assertNull(value, name_opt) {
    if (value !== null) {
      fail("null", value, name_opt);
    }
  };

  assertNotNull = function assertNotNull(value, name_opt) {
    if (value === null) {
      fail("not null", value, name_opt);
    }
  };

  assertThrows = function assertThrows(code, type_opt, cause_opt) {
    try {
      if (typeof code === 'function') {
        code();
      } else {
        eval(code);
      }
    } catch (e) {
      if (typeof type_opt === 'function') {
        assertInstanceof(e, type_opt);
      } else if (type_opt !== void 0) {
        failWithMessage('invalid use of assertThrows, maybe you want assertThrowsEquals');
      }

      if (arguments.length >= 3) {
        if (cause_opt instanceof RegExp) {
          assertMatches(cause_opt, e.message, "Error message");
        } else {
          assertEquals(cause_opt, e.message, "Error message");
        }
      }

      return;
    }

    failWithMessage("Did not throw exception");
  };

  assertThrowsEquals = function assertThrowsEquals(fun, val) {
    try {
      fun();
    } catch (e) {
      assertEquals(val, e);
      return;
    }

    failWithMessage("Did not throw exception");
  };

  assertInstanceof = function assertInstanceof(obj, type) {
    if (!(obj instanceof type)) {
      var actualTypeName = null;
      var actualConstructor = Object.getPrototypeOf(obj).constructor;

      if (typeof actualConstructor === "function") {
        actualTypeName = actualConstructor.name || String(actualConstructor);
      }

      failWithMessage("Object <" + PrettyPrint(obj) + "> is not an instance of <" + (type.name || type) + ">" + (actualTypeName ? " but of <" + actualTypeName + ">" : ""));
    }
  };

  assertDoesNotThrow = function assertDoesNotThrow(code, name_opt) {
    try {
      if (typeof code === 'function') {
        return code();
      } else {
        return eval(code);
      }
    } catch (e) {
      failWithMessage("threw an exception: " + (e.message || e));
    }
  };

  assertUnreachable = function assertUnreachable(name_opt) {
    var message = "Fail" + "ure: unreachable";

    if (name_opt) {
      message += " - " + name_opt;
    }

    failWithMessage(message);
  };

  assertContains = function (sub, value, name_opt) {
    if (value == null ? sub != null : value.indexOf(sub) == -1) {
      fail("contains '" + String(sub) + "'", value, name_opt);
    }
  };

  assertMatches = function (regexp, str, name_opt) {
    if (!(regexp instanceof RegExp)) {
      regexp = new RegExp(regexp);
    }

    if (!str.match(regexp)) {
      fail("should match '" + regexp + "'", str, name_opt);
    }
  };

  assertPromiseResult = function (promise, success, fail) {
    if (!success) success = () => {};

    failWithMessage = msg => eval("%AbortJS(msg)");

    if (!fail) {
      fail = result => failWithMessage("assertPromiseResult failed: " + result);
    }

    var test_promise = promise.then(result => {
      try {
        success(result);
      } catch (e) {
        failWithMessage(String(e));
      }
    }, result => {
      fail(result);
    }).then(x => {
      if (--promiseTestCount == 0) testRunner.notifyDone();
    });
    if (!promiseTestChain) promiseTestChain = Promise.resolve();
    testRunner.waitUntilDone();
    ++promiseTestCount;
    return promiseTestChain.then(test_promise);
  };

  var OptimizationStatusImpl = undefined;

  var OptimizationStatus = function (fun, sync_opt) {
    if (OptimizationStatusImpl === undefined) {
      try {
        OptimizationStatusImpl = new Function("fun", "sync", "return %GetOptimizationStatus(fun, sync);");
      } catch (e) {
        throw new Error("natives syntax not allowed");
      }
    }

    return OptimizationStatusImpl(fun, sync_opt);
  };

  assertUnoptimized = function assertUnoptimized(fun, sync_opt, name_opt, skip_if_maybe_deopted = true) {
    if (sync_opt === undefined) sync_opt = "";
    var opt_status = OptimizationStatus(fun, sync_opt);
    assertFalse((opt_status & V8OptimizationStatus.kAlwaysOptimize) !== 0, "test does not make sense with --always-opt");
    assertTrue((opt_status & V8OptimizationStatus.kIsFunction) !== 0, name_opt);

    if (skip_if_maybe_deopted && (opt_status & V8OptimizationStatus.kMaybeDeopted) !== 0) {
      return;
    }

    assertFalse((opt_status & V8OptimizationStatus.kOptimized) !== 0, name_opt);
  };

  assertOptimized = function assertOptimized(fun, sync_opt, name_opt, skip_if_maybe_deopted = true) {
    if (sync_opt === undefined) sync_opt = "";
    var opt_status = OptimizationStatus(fun, sync_opt);
    assertFalse((opt_status & V8OptimizationStatus.kNeverOptimize) !== 0, "test does not make sense with --no-opt");
    assertTrue((opt_status & V8OptimizationStatus.kIsFunction) !== 0, name_opt);

    if (skip_if_maybe_deopted && (opt_status & V8OptimizationStatus.kMaybeDeopted) !== 0) {
      return;
    }

    assertTrue((opt_status & V8OptimizationStatus.kOptimized) !== 0, name_opt);
  };

  isNeverOptimize = function isNeverOptimize() {
    var opt_status = OptimizationStatus(undefined, "");
    return (opt_status & V8OptimizationStatus.kNeverOptimize) !== 0;
  };

  isAlwaysOptimize = function isAlwaysOptimize() {
    var opt_status = OptimizationStatus(undefined, "");
    return (opt_status & V8OptimizationStatus.kAlwaysOptimize) !== 0;
  };

  isInterpreted = function isInterpreted(fun) {
    var opt_status = OptimizationStatus(fun, "");
    assertTrue((opt_status & V8OptimizationStatus.kIsFunction) !== 0, "not a function");
    return (opt_status & V8OptimizationStatus.kOptimized) === 0 && (opt_status & V8OptimizationStatus.kInterpreted) !== 0;
  };

  isOptimized = function isOptimized(fun) {
    var opt_status = OptimizationStatus(fun, "");
    assertTrue((opt_status & V8OptimizationStatus.kIsFunction) !== 0, "not a function");
    return (opt_status & V8OptimizationStatus.kOptimized) !== 0;
  };

  isCrankshafted = function isCrankshafted(fun) {
    var opt_status = OptimizationStatus(fun, "");
    assertTrue((opt_status & V8OptimizationStatus.kIsFunction) !== 0, "not a function");
    return (opt_status & V8OptimizationStatus.kOptimized) !== 0 && (opt_status & V8OptimizationStatus.kTurboFanned) === 0;
  };

  isTurboFanned = function isTurboFanned(fun) {
    var opt_status = OptimizationStatus(fun, "");
    assertTrue((opt_status & V8OptimizationStatus.kIsFunction) !== 0, "not a function");
    return (opt_status & V8OptimizationStatus.kOptimized) !== 0 && (opt_status & V8OptimizationStatus.kTurboFanned) !== 0;
  };

  MjsUnitAssertionError.prepareStackTrace = function (error, stack) {
    try {
      let filteredStack = [];
      let inMjsunit = true;

      for (let i = 0; i < stack.length; i++) {
        let frame = stack[i];

        if (inMjsunit) {
          let file = frame.getFileName();

          if (!file || !file.endsWith("mjsunit.js")) {
            inMjsunit = false;
            if (i > 0) ArrayPrototypePush.call(filteredStack, stack[i - 1]);
            ArrayPrototypePush.call(filteredStack, stack[i]);
          }

          continue;
        }

        ArrayPrototypePush.call(filteredStack, frame);
      }

      stack = filteredStack;
      let max_name_length = 0;
      ArrayPrototypeForEach.call(stack, each => {
        let name = each.getFunctionName();
        if (name == null) name = "";

        if (each.isEval()) {
          name = name;
        } else if (each.isConstructor()) {
          name = "new " + name;
        } else if (each.isNative()) {
          name = "native " + name;
        } else if (!each.isToplevel()) {
          name = each.getTypeName() + "." + name;
        }

        each.name = name;
        max_name_length = Math.max(name.length, max_name_length);
      });
      stack = ArrayPrototypeMap.call(stack, each => {
        let frame = "    at " + each.name.padEnd(max_name_length);
        let fileName = each.getFileName();
        if (each.isEval()) return frame + " " + each.getEvalOrigin();
        frame += " " + (fileName ? fileName : "");
        let line = each.getLineNumber();
        frame += " " + (line ? line : "");
        let column = each.getColumnNumber();
        frame += column ? ":" + column : "";
        return frame;
      });
      return "" + error.message + "\n" + ArrayPrototypeJoin.call(stack, "\n");
    } catch (e) {}

    ;
    return error.stack;
  };

  class AsyncAssertion {
    constructor(test, name) {
      this.expectedAsserts_ = -1;
      this.actualAsserts_ = 0;
      this.test_ = test;
      this.name_ = name || '';
    }

    plan(expectedAsserts) {
      this.expectedAsserts_ = expectedAsserts;
    }

    fail(expectedText, found) {
      let message = formatFailureText(expectedText, found);
      message += "\nin test:" + this.name_;
      message += "\n" + Function.prototype.toString.apply(this.test_);
      eval("%AbortJS(message)");
    }

    equals(expected, found, name_opt) {
      this.actualAsserts_++;

      if (!deepEquals(expected, found)) {
        this.fail(PrettyPrint(expected), found, name_opt);
      }
    }

    unreachable() {
      let message = "Failure: unreachable in test: " + this.name_;
      message += "\n" + Function.prototype.toString.apply(this.test_);
      eval("%AbortJS(message)");
    }

    unexpectedRejection(details) {
      return error => {
        let message = "Failure: unexpected Promise rejection in test: " + this.name_;
        if (details) message += "\n    @" + details;

        if (error instanceof Error) {
          message += "\n" + String(error.stack);
        } else {
          message += "\n" + String(error);
        }

        message += "\n\n" + Function.prototype.toString.apply(this.test_);
        eval("%AbortJS(message)");
      };
    }

    drainMicrotasks() {
      eval("%RunMicrotasks()");
    }

    done_() {
      if (this.expectedAsserts_ === -1) {
        let message = "Please call t.plan(count) to initialize test harness " + "with correct assert count (Note: count > 0)";
        eval("%AbortJS(message)");
      }

      if (this.expectedAsserts_ !== this.actualAsserts_) {
        let message = "Expected asserts: " + this.expectedAsserts_;
        message += ", Actual asserts: " + this.actualAsserts_;
        message += "\nin test: " + this.name_;
        message += "\n" + Function.prototype.toString.apply(this.test_);
        eval("%AbortJS(message)");
      }
    }

  }

  testAsync = function (test, name) {
    let assert = new AsyncAssertion(test, name);
    test(assert);
    eval("%RunMicrotasks()");
    assert.done_();
  };
})();

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/v8/test/mjsunit/wasm/wasm-constants.js
function bytes() {
  var buffer = new ArrayBuffer(arguments.length);
  var view = new Uint8Array(buffer);

  for (var i = 0; i < arguments.length; i++) {
    var val = arguments[i];
    if (typeof val == "string") val = val.charCodeAt(0);
    view[i] = val | 0;
  }

  return buffer;
}

var kV8MaxPages = 32767;
var kWasmH0 = 0;
var kWasmH1 = 0x61;
var kWasmH2 = 0x73;
var kWasmH3 = 0x6d;
var kWasmV0 = 0x1;
var kWasmV1 = 0;
var kWasmV2 = 0;
var kWasmV3 = 0;
var kHeaderSize = 8;
var kPageSize = 65536;
var kSpecMaxPages = 65535;

function bytesWithHeader() {
  var buffer = new ArrayBuffer(kHeaderSize + arguments.length);
  var view = new Uint8Array(buffer);
  view[0] = kWasmH0;
  view[1] = kWasmH1;
  view[2] = kWasmH2;
  view[3] = kWasmH3;
  view[4] = kWasmV0;
  view[5] = kWasmV1;
  view[6] = kWasmV2;
  view[7] = kWasmV3;

  for (var i = 0; i < arguments.length; i++) {
    var val = arguments[i];
    if (typeof val == "string") val = val.charCodeAt(0);
    view[kHeaderSize + i] = val | 0;
  }

  return buffer;
}

let kDeclNoLocals = 0;
let kUnknownSectionCode = 0;
let kTypeSectionCode = 1;
let kImportSectionCode = 2;
let kFunctionSectionCode = 3;
let kTableSectionCode = 4;
let kMemorySectionCode = 5;
let kGlobalSectionCode = 6;
let kExportSectionCode = 7;
let kStartSectionCode = 8;
let kElementSectionCode = 9;
let kCodeSectionCode = 10;
let kDataSectionCode = 11;
let kNameSectionCode = 12;
let kExceptionSectionCode = 13;
let kModuleNameCode = 0;
let kFunctionNamesCode = 1;
let kLocalNamesCode = 2;
let kWasmFunctionTypeForm = 0x60;
let kWasmAnyFunctionTypeForm = 0x70;
let kHasMaximumFlag = 1;
let kDeclFunctionName = 0x01;
let kDeclFunctionImport = 0x02;
let kDeclFunctionLocals = 0x04;
let kDeclFunctionExport = 0x08;
let kWasmStmt = 0x40;
let kWasmI32 = 0x7f;
let kWasmI64 = 0x7e;
let kWasmF32 = 0x7d;
let kWasmF64 = 0x7c;
let kWasmS128 = 0x7b;
let kExternalFunction = 0;
let kExternalTable = 1;
let kExternalMemory = 2;
let kExternalGlobal = 3;
let kTableZero = 0;
let kMemoryZero = 0;
let kSig_i_i = makeSig([kWasmI32], [kWasmI32]);
let kSig_l_l = makeSig([kWasmI64], [kWasmI64]);
let kSig_i_l = makeSig([kWasmI64], [kWasmI32]);
let kSig_i_ii = makeSig([kWasmI32, kWasmI32], [kWasmI32]);
let kSig_i_iii = makeSig([kWasmI32, kWasmI32, kWasmI32], [kWasmI32]);
let kSig_d_dd = makeSig([kWasmF64, kWasmF64], [kWasmF64]);
let kSig_l_ll = makeSig([kWasmI64, kWasmI64], [kWasmI64]);
let kSig_i_dd = makeSig([kWasmF64, kWasmF64], [kWasmI32]);
let kSig_v_v = makeSig([], []);
let kSig_i_v = makeSig([], [kWasmI32]);
let kSig_l_v = makeSig([], [kWasmI64]);
let kSig_f_v = makeSig([], [kWasmF64]);
let kSig_d_v = makeSig([], [kWasmF64]);
let kSig_v_i = makeSig([kWasmI32], []);
let kSig_v_ii = makeSig([kWasmI32, kWasmI32], []);
let kSig_v_iii = makeSig([kWasmI32, kWasmI32, kWasmI32], []);
let kSig_v_l = makeSig([kWasmI64], []);
let kSig_v_d = makeSig([kWasmF64], []);
let kSig_v_dd = makeSig([kWasmF64, kWasmF64], []);
let kSig_v_ddi = makeSig([kWasmF64, kWasmF64, kWasmI32], []);
let kSig_ii_v = makeSig([], [kWasmI32, kWasmI32]);
let kSig_iii_v = makeSig([], [kWasmI32, kWasmI32, kWasmI32]);
let kSig_ii_i = makeSig([kWasmI32], [kWasmI32, kWasmI32]);
let kSig_iii_i = makeSig([kWasmI32], [kWasmI32, kWasmI32, kWasmI32]);
let kSig_ii_ii = makeSig([kWasmI32, kWasmI32], [kWasmI32, kWasmI32]);
let kSig_iii_ii = makeSig([kWasmI32, kWasmI32], [kWasmI32, kWasmI32, kWasmI32]);
let kSig_v_f = makeSig([kWasmF32], []);
let kSig_f_f = makeSig([kWasmF32], [kWasmF32]);
let kSig_d_d = makeSig([kWasmF64], [kWasmF64]);

function makeSig(params, results) {
  return {
    params: params,
    results: results
  };
}

function makeSig_v_x(x) {
  return makeSig([x], []);
}

function makeSig_v_xx(x) {
  return makeSig([x, x], []);
}

function makeSig_r_v(r) {
  return makeSig([], [r]);
}

function makeSig_r_x(r, x) {
  return makeSig([x], [r]);
}

function makeSig_r_xx(r, x) {
  return makeSig([x, x], [r]);
}

let kExprUnreachable = 0x00;
let kExprNop = 0x01;
let kExprBlock = 0x02;
let kExprLoop = 0x03;
let kExprIf = 0x04;
let kExprElse = 0x05;
let kExprTry = 0x06;
let kExprCatch = 0x07;
let kExprThrow = 0x08;
let kExprEnd = 0x0b;
let kExprBr = 0x0c;
let kExprBrIf = 0x0d;
let kExprBrTable = 0x0e;
let kExprReturn = 0x0f;
let kExprCallFunction = 0x10;
let kExprCallIndirect = 0x11;
let kExprDrop = 0x1a;
let kExprSelect = 0x1b;
let kExprGetLocal = 0x20;
let kExprSetLocal = 0x21;
let kExprTeeLocal = 0x22;
let kExprGetGlobal = 0x23;
let kExprSetGlobal = 0x24;
let kExprI32Const = 0x41;
let kExprI64Const = 0x42;
let kExprF32Const = 0x43;
let kExprF64Const = 0x44;
let kExprI32LoadMem = 0x28;
let kExprI64LoadMem = 0x29;
let kExprF32LoadMem = 0x2a;
let kExprF64LoadMem = 0x2b;
let kExprI32LoadMem8S = 0x2c;
let kExprI32LoadMem8U = 0x2d;
let kExprI32LoadMem16S = 0x2e;
let kExprI32LoadMem16U = 0x2f;
let kExprI64LoadMem8S = 0x30;
let kExprI64LoadMem8U = 0x31;
let kExprI64LoadMem16S = 0x32;
let kExprI64LoadMem16U = 0x33;
let kExprI64LoadMem32S = 0x34;
let kExprI64LoadMem32U = 0x35;
let kExprI32StoreMem = 0x36;
let kExprI64StoreMem = 0x37;
let kExprF32StoreMem = 0x38;
let kExprF64StoreMem = 0x39;
let kExprI32StoreMem8 = 0x3a;
let kExprI32StoreMem16 = 0x3b;
let kExprI64StoreMem8 = 0x3c;
let kExprI64StoreMem16 = 0x3d;
let kExprI64StoreMem32 = 0x3e;
let kExprMemorySize = 0x3f;
let kExprGrowMemory = 0x40;
let kExprI32Eqz = 0x45;
let kExprI32Eq = 0x46;
let kExprI32Ne = 0x47;
let kExprI32LtS = 0x48;
let kExprI32LtU = 0x49;
let kExprI32GtS = 0x4a;
let kExprI32GtU = 0x4b;
let kExprI32LeS = 0x4c;
let kExprI32LeU = 0x4d;
let kExprI32GeS = 0x4e;
let kExprI32GeU = 0x4f;
let kExprI64Eqz = 0x50;
let kExprI64Eq = 0x51;
let kExprI64Ne = 0x52;
let kExprI64LtS = 0x53;
let kExprI64LtU = 0x54;
let kExprI64GtS = 0x55;
let kExprI64GtU = 0x56;
let kExprI64LeS = 0x57;
let kExprI64LeU = 0x58;
let kExprI64GeS = 0x59;
let kExprI64GeU = 0x5a;
let kExprF32Eq = 0x5b;
let kExprF32Ne = 0x5c;
let kExprF32Lt = 0x5d;
let kExprF32Gt = 0x5e;
let kExprF32Le = 0x5f;
let kExprF32Ge = 0x60;
let kExprF64Eq = 0x61;
let kExprF64Ne = 0x62;
let kExprF64Lt = 0x63;
let kExprF64Gt = 0x64;
let kExprF64Le = 0x65;
let kExprF64Ge = 0x66;
let kExprI32Clz = 0x67;
let kExprI32Ctz = 0x68;
let kExprI32Popcnt = 0x69;
let kExprI32Add = 0x6a;
let kExprI32Sub = 0x6b;
let kExprI32Mul = 0x6c;
let kExprI32DivS = 0x6d;
let kExprI32DivU = 0x6e;
let kExprI32RemS = 0x6f;
let kExprI32RemU = 0x70;
let kExprI32And = 0x71;
let kExprI32Ior = 0x72;
let kExprI32Xor = 0x73;
let kExprI32Shl = 0x74;
let kExprI32ShrS = 0x75;
let kExprI32ShrU = 0x76;
let kExprI32Rol = 0x77;
let kExprI32Ror = 0x78;
let kExprI64Clz = 0x79;
let kExprI64Ctz = 0x7a;
let kExprI64Popcnt = 0x7b;
let kExprI64Add = 0x7c;
let kExprI64Sub = 0x7d;
let kExprI64Mul = 0x7e;
let kExprI64DivS = 0x7f;
let kExprI64DivU = 0x80;
let kExprI64RemS = 0x81;
let kExprI64RemU = 0x82;
let kExprI64And = 0x83;
let kExprI64Ior = 0x84;
let kExprI64Xor = 0x85;
let kExprI64Shl = 0x86;
let kExprI64ShrS = 0x87;
let kExprI64ShrU = 0x88;
let kExprI64Rol = 0x89;
let kExprI64Ror = 0x8a;
let kExprF32Abs = 0x8b;
let kExprF32Neg = 0x8c;
let kExprF32Ceil = 0x8d;
let kExprF32Floor = 0x8e;
let kExprF32Trunc = 0x8f;
let kExprF32NearestInt = 0x90;
let kExprF32Sqrt = 0x91;
let kExprF32Add = 0x92;
let kExprF32Sub = 0x93;
let kExprF32Mul = 0x94;
let kExprF32Div = 0x95;
let kExprF32Min = 0x96;
let kExprF32Max = 0x97;
let kExprF32CopySign = 0x98;
let kExprF64Abs = 0x99;
let kExprF64Neg = 0x9a;
let kExprF64Ceil = 0x9b;
let kExprF64Floor = 0x9c;
let kExprF64Trunc = 0x9d;
let kExprF64NearestInt = 0x9e;
let kExprF64Sqrt = 0x9f;
let kExprF64Add = 0xa0;
let kExprF64Sub = 0xa1;
let kExprF64Mul = 0xa2;
let kExprF64Div = 0xa3;
let kExprF64Min = 0xa4;
let kExprF64Max = 0xa5;
let kExprF64CopySign = 0xa6;
let kExprI32ConvertI64 = 0xa7;
let kExprI32SConvertF32 = 0xa8;
let kExprI32UConvertF32 = 0xa9;
let kExprI32SConvertF64 = 0xaa;
let kExprI32UConvertF64 = 0xab;
let kExprI64SConvertI32 = 0xac;
let kExprI64UConvertI32 = 0xad;
let kExprI64SConvertF32 = 0xae;
let kExprI64UConvertF32 = 0xaf;
let kExprI64SConvertF64 = 0xb0;
let kExprI64UConvertF64 = 0xb1;
let kExprF32SConvertI32 = 0xb2;
let kExprF32UConvertI32 = 0xb3;
let kExprF32SConvertI64 = 0xb4;
let kExprF32UConvertI64 = 0xb5;
let kExprF32ConvertF64 = 0xb6;
let kExprF64SConvertI32 = 0xb7;
let kExprF64UConvertI32 = 0xb8;
let kExprF64SConvertI64 = 0xb9;
let kExprF64UConvertI64 = 0xba;
let kExprF64ConvertF32 = 0xbb;
let kExprI32ReinterpretF32 = 0xbc;
let kExprI64ReinterpretF64 = 0xbd;
let kExprF32ReinterpretI32 = 0xbe;
let kExprF64ReinterpretI64 = 0xbf;
let kAtomicPrefix = 0xfe;
let kExprI32AtomicLoad = 0x10;
let kExprI32AtomicLoad8U = 0x12;
let kExprI32AtomicLoad16U = 0x13;
let kExprI32AtomicStore = 0x17;
let kExprI32AtomicStore8U = 0x19;
let kExprI32AtomicStore16U = 0x1a;
let kExprI32AtomicAdd = 0x1e;
let kExprI32AtomicAdd8U = 0x20;
let kExprI32AtomicAdd16U = 0x21;
let kExprI32AtomicSub = 0x25;
let kExprI32AtomicSub8U = 0x27;
let kExprI32AtomicSub16U = 0x28;
let kExprI32AtomicAnd = 0x2c;
let kExprI32AtomicAnd8U = 0x2e;
let kExprI32AtomicAnd16U = 0x2f;
let kExprI32AtomicOr = 0x33;
let kExprI32AtomicOr8U = 0x35;
let kExprI32AtomicOr16U = 0x36;
let kExprI32AtomicXor = 0x3a;
let kExprI32AtomicXor8U = 0x3c;
let kExprI32AtomicXor16U = 0x3d;
let kExprI32AtomicExchange = 0x41;
let kExprI32AtomicExchange8U = 0x43;
let kExprI32AtomicExchange16U = 0x44;
let kExprI32AtomicCompareExchange = 0x48;
let kExprI32AtomicCompareExchange8U = 0x4a;
let kExprI32AtomicCompareExchange16U = 0x4b;
let kTrapUnreachable = 0;
let kTrapMemOutOfBounds = 1;
let kTrapDivByZero = 2;
let kTrapDivUnrepresentable = 3;
let kTrapRemByZero = 4;
let kTrapFloatUnrepresentable = 5;
let kTrapFuncInvalid = 6;
let kTrapFuncSigMismatch = 7;
let kTrapInvalidIndex = 8;
let kTrapMsgs = ["unreachable", "memory access out of bounds", "divide by zero", "divide result unrepresentable", "remainder by zero", "integer result unrepresentable", "invalid function", "function signature mismatch", "invalid index into function table"];

function assertTraps(trap, code) {
  try {
    if (typeof code === 'function') {
      code();
    } else {
      eval(code);
    }
  } catch (e) {
    assertEquals('object', typeof e);
    assertEquals(kTrapMsgs[trap], e.message);
    return;
  }

  throw new MjsUnitAssertionError('Did not trap, expected: ' + kTrapMsgs[trap]);
}

function assertWasmThrows(runtime_id, values, code) {
  try {
    if (typeof code === 'function') {
      code();
    } else {
      eval(code);
    }
  } catch (e) {
    assertTrue(e instanceof WebAssembly.RuntimeError);
    var e_runtime_id = e['WasmExceptionRuntimeId'];
    assertEquals(e_runtime_id, runtime_id);
    assertTrue(Number.isInteger(e_runtime_id));
    var e_values = e['WasmExceptionValues'];
    assertEquals(values.length, e_values.length);

    for (i = 0; i < values.length; ++i) {
      assertEquals(values[i], e_values[i]);
    }

    return;
  }

  throw new MjsUnitAssertionError('Did not throw expected: ' + runtime_id + values);
}

function wasmI32Const(val) {
  let bytes = [kExprI32Const];

  for (let i = 0; i < 4; ++i) {
    bytes.push(0x80 | val >> 7 * i & 0x7f);
  }

  bytes.push(val >> 7 * 4 & 0x7f);
  return bytes;
}

function wasmF32Const(f) {
  return [kExprF32Const].concat(Array.from(new Uint8Array(new Float32Array([f]).buffer)));
}

function wasmF64Const(f) {
  return [kExprF64Const].concat(Array.from(new Uint8Array(new Float64Array([f]).buffer)));
}

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/v8/test/mjsunit/wasm/wasm-module-builder.js
let __buffer = new ArrayBuffer(8);

let byte_view = new Int8Array(__buffer);
let f32_view = new Float32Array(__buffer);
let f64_view = new Float64Array(__buffer);

class Binary extends Array {
  emit_u8(val) {
    this.push(val);
  }

  emit_u16(val) {
    this.push(val & 0xff);
    this.push(val >> 8 & 0xff);
  }

  emit_u32(val) {
    this.push(val & 0xff);
    this.push(val >> 8 & 0xff);
    this.push(val >> 16 & 0xff);
    this.push(val >> 24 & 0xff);
  }

  emit_u32v(val) {
    while (true) {
      let v = val & 0xff;
      val = val >>> 7;

      if (val == 0) {
        this.push(v);
        break;
      }

      this.push(v | 0x80);
    }
  }

  emit_bytes(data) {
    for (let i = 0; i < data.length; i++) {
      this.push(data[i] & 0xff);
    }
  }

  emit_string(string) {
    if (string instanceof Array) {
      this.emit_u32v(string.length);
      this.emit_bytes(string);
      return;
    }

    let string_utf8 = unescape(encodeURIComponent(string));
    this.emit_u32v(string_utf8.length);

    for (let i = 0; i < string_utf8.length; i++) {
      this.emit_u8(string_utf8.charCodeAt(i));
    }
  }

  emit_header() {
    this.push(kWasmH0, kWasmH1, kWasmH2, kWasmH3, kWasmV0, kWasmV1, kWasmV2, kWasmV3);
  }

  emit_section(section_code, content_generator) {
    this.emit_u8(section_code);
    let section = new Binary();
    content_generator(section);
    this.emit_u32v(section.length);

    for (var i = 0; i < section.length; i++) this.push(section[i]);
  }

}

class WasmFunctionBuilder {
  constructor(module, name, type_index) {
    this.module = module;
    this.name = name;
    this.type_index = type_index;
    this.body = [];
  }

  numLocalNames() {
    if (this.local_names === undefined) return 0;
    let num_local_names = 0;

    for (let loc_name of this.local_names) {
      if (loc_name !== undefined) ++num_local_names;
    }

    return num_local_names;
  }

  exportAs(name) {
    this.module.addExport(name, this.index);
    return this;
  }

  exportFunc() {
    this.exportAs(this.name);
    return this;
  }

  addBody(body) {
    for (let b of body) {
      if (typeof b !== 'number' || (b & ~0xFF) !== 0) throw new Error('invalid body (entries must be 8 bit numbers): ' + body);
    }

    this.body = body.slice();
    this.body.push(kExprEnd);
    return this;
  }

  addBodyWithEnd(body) {
    this.body = body;
    return this;
  }

  addLocals(locals, names) {
    this.locals = locals;
    this.local_names = names;
    return this;
  }

  end() {
    return this.module;
  }

}

class WasmGlobalBuilder {
  constructor(module, type, mutable) {
    this.module = module;
    this.type = type;
    this.mutable = mutable;
    this.init = 0;
  }

  exportAs(name) {
    this.module.exports.push({
      name: name,
      kind: kExternalGlobal,
      index: this.index
    });
    return this;
  }

}

class WasmModuleBuilder {
  constructor() {
    this.types = [];
    this.imports = [];
    this.exports = [];
    this.globals = [];
    this.exceptions = [];
    this.functions = [];
    this.function_table = [];
    this.function_table_length_min = 0;
    this.function_table_length_max = 0;
    this.function_table_inits = [];
    this.segments = [];
    this.explicit = [];
    this.num_imported_funcs = 0;
    this.num_imported_globals = 0;
    return this;
  }

  addStart(start_index) {
    this.start_index = start_index;
    return this;
  }

  addMemory(min, max, exp, shared) {
    this.memory = {
      min: min,
      max: max,
      exp: exp,
      shared: shared
    };
    return this;
  }

  addExplicitSection(bytes) {
    this.explicit.push(bytes);
    return this;
  }

  stringToBytes(name) {
    var result = new Binary();
    result.emit_u32v(name.length);

    for (var i = 0; i < name.length; i++) {
      result.emit_u8(name.charCodeAt(i));
    }

    return result;
  }

  addCustomSection(name, bytes) {
    name = this.stringToBytes(name);
    var length = new Binary();
    length.emit_u32v(name.length + bytes.length);
    this.explicit.push([0, ...length, ...name, ...bytes]);
  }

  addType(type) {
    this.types.push(type);
    var pl = type.params.length;
    var rl = type.results.length;
    return this.types.length - 1;
  }

  addGlobal(local_type, mutable) {
    let glob = new WasmGlobalBuilder(this, local_type, mutable);
    glob.index = this.globals.length + this.num_imported_globals;
    this.globals.push(glob);
    return glob;
  }

  addException(type) {
    if (type.results.length != 0) throw new Error('Invalid exception signature: ' + type);
    this.exceptions.push(type);
    return this.exceptions.length - 1;
  }

  addFunction(name, type) {
    let type_index = typeof type == "number" ? type : this.addType(type);
    let func = new WasmFunctionBuilder(this, name, type_index);
    func.index = this.functions.length + this.num_imported_funcs;
    this.functions.push(func);
    return func;
  }

  addImport(module = "", name, type) {
    let type_index = typeof type == "number" ? type : this.addType(type);
    this.imports.push({
      module: module,
      name: name,
      kind: kExternalFunction,
      type: type_index
    });
    return this.num_imported_funcs++;
  }

  addImportedGlobal(module = "", name, type) {
    let o = {
      module: module,
      name: name,
      kind: kExternalGlobal,
      type: type,
      mutable: false
    };
    this.imports.push(o);
    return this.num_imported_globals++;
  }

  addImportedMemory(module = "", name, initial = 0, maximum, shared) {
    let o = {
      module: module,
      name: name,
      kind: kExternalMemory,
      initial: initial,
      maximum: maximum,
      shared: shared
    };
    this.imports.push(o);
    return this;
  }

  addImportedTable(module = "", name, initial, maximum) {
    let o = {
      module: module,
      name: name,
      kind: kExternalTable,
      initial: initial,
      maximum: maximum
    };
    this.imports.push(o);
  }

  addExport(name, index) {
    this.exports.push({
      name: name,
      kind: kExternalFunction,
      index: index
    });
    return this;
  }

  addExportOfKind(name, kind, index) {
    this.exports.push({
      name: name,
      kind: kind,
      index: index
    });
    return this;
  }

  addDataSegment(addr, data, is_global = false) {
    this.segments.push({
      addr: addr,
      data: data,
      is_global: is_global
    });
    return this.segments.length - 1;
  }

  exportMemoryAs(name) {
    this.exports.push({
      name: name,
      kind: kExternalMemory,
      index: 0
    });
  }

  addFunctionTableInit(base, is_global, array, is_import = false) {
    this.function_table_inits.push({
      base: base,
      is_global: is_global,
      array: array
    });

    if (!is_global) {
      var length = base + array.length;

      if (length > this.function_table_length_min && !is_import) {
        this.function_table_length_min = length;
      }

      if (length > this.function_table_length_max && !is_import) {
        this.function_table_length_max = length;
      }
    }

    return this;
  }

  appendToTable(array) {
    for (let n of array) {
      if (typeof n != 'number') throw new Error('invalid table (entries have to be numbers): ' + array);
    }

    return this.addFunctionTableInit(this.function_table.length, false, array);
  }

  setFunctionTableBounds(min, max) {
    this.function_table_length_min = min;
    this.function_table_length_max = max;
    return this;
  }

  setName(name) {
    this.name = name;
    return this;
  }

  toArray(debug = false) {
    let binary = new Binary();
    let wasm = this;
    binary.emit_header();

    if (wasm.types.length > 0) {
      if (debug) print("emitting types @ " + binary.length);
      binary.emit_section(kTypeSectionCode, section => {
        section.emit_u32v(wasm.types.length);

        for (let type of wasm.types) {
          section.emit_u8(kWasmFunctionTypeForm);
          section.emit_u32v(type.params.length);

          for (let param of type.params) {
            section.emit_u8(param);
          }

          section.emit_u32v(type.results.length);

          for (let result of type.results) {
            section.emit_u8(result);
          }
        }
      });
    }

    if (wasm.imports.length > 0) {
      if (debug) print("emitting imports @ " + binary.length);
      binary.emit_section(kImportSectionCode, section => {
        section.emit_u32v(wasm.imports.length);

        for (let imp of wasm.imports) {
          section.emit_string(imp.module);
          section.emit_string(imp.name || '');
          section.emit_u8(imp.kind);

          if (imp.kind == kExternalFunction) {
            section.emit_u32v(imp.type);
          } else if (imp.kind == kExternalGlobal) {
            section.emit_u32v(imp.type);
            section.emit_u8(imp.mutable);
          } else if (imp.kind == kExternalMemory) {
            var has_max = typeof imp.maximum != "undefined";
            var is_shared = typeof imp.shared != "undefined";

            if (is_shared) {
              section.emit_u8(has_max ? 3 : 2);
            } else {
              section.emit_u8(has_max ? 1 : 0);
            }

            section.emit_u32v(imp.initial);
            if (has_max) section.emit_u32v(imp.maximum);
          } else if (imp.kind == kExternalTable) {
            section.emit_u8(kWasmAnyFunctionTypeForm);
            var has_max = typeof imp.maximum != "undefined";
            section.emit_u8(has_max ? 1 : 0);
            section.emit_u32v(imp.initial);
            if (has_max) section.emit_u32v(imp.maximum);
          } else {
            throw new Error("unknown/unsupported import kind " + imp.kind);
          }
        }
      });
    }

    if (wasm.functions.length > 0) {
      if (debug) print("emitting function decls @ " + binary.length);
      binary.emit_section(kFunctionSectionCode, section => {
        section.emit_u32v(wasm.functions.length);

        for (let func of wasm.functions) {
          section.emit_u32v(func.type_index);
        }
      });
    }

    if (wasm.function_table_length_min > 0) {
      if (debug) print("emitting table @ " + binary.length);
      binary.emit_section(kTableSectionCode, section => {
        section.emit_u8(1);
        section.emit_u8(kWasmAnyFunctionTypeForm);
        section.emit_u32v(1);
        section.emit_u32v(wasm.function_table_length_min);
        section.emit_u32v(wasm.function_table_length_max);
      });
    }

    if (wasm.memory !== undefined) {
      if (debug) print("emitting memory @ " + binary.length);
      binary.emit_section(kMemorySectionCode, section => {
        section.emit_u8(1);
        const has_max = wasm.memory.max !== undefined;
        const is_shared = wasm.memory.shared !== undefined;

        if (is_shared) {
          section.emit_u8(has_max ? 3 : 2);
        } else {
          section.emit_u8(has_max ? 1 : 0);
        }

        section.emit_u32v(wasm.memory.min);
        if (has_max) section.emit_u32v(wasm.memory.max);
        if (wasm.memory.shared) section.emit_u8(1);
      });
    }

    if (wasm.globals.length > 0) {
      if (debug) print("emitting globals @ " + binary.length);
      binary.emit_section(kGlobalSectionCode, section => {
        section.emit_u32v(wasm.globals.length);

        for (let global of wasm.globals) {
          section.emit_u8(global.type);
          section.emit_u8(global.mutable);

          if (typeof global.init_index == "undefined") {
            switch (global.type) {
              case kWasmI32:
                section.emit_u8(kExprI32Const);
                section.emit_u32v(global.init);
                break;

              case kWasmI64:
                section.emit_u8(kExprI64Const);
                section.emit_u32v(global.init);
                break;

              case kWasmF32:
                section.emit_u8(kExprF32Const);
                f32_view[0] = global.init;
                section.emit_u8(byte_view[0]);
                section.emit_u8(byte_view[1]);
                section.emit_u8(byte_view[2]);
                section.emit_u8(byte_view[3]);
                break;

              case kWasmF64:
                section.emit_u8(kExprF64Const);
                f64_view[0] = global.init;
                section.emit_u8(byte_view[0]);
                section.emit_u8(byte_view[1]);
                section.emit_u8(byte_view[2]);
                section.emit_u8(byte_view[3]);
                section.emit_u8(byte_view[4]);
                section.emit_u8(byte_view[5]);
                section.emit_u8(byte_view[6]);
                section.emit_u8(byte_view[7]);
                break;
            }
          } else {
            section.emit_u8(kExprGetGlobal);
            section.emit_u32v(global.init_index);
          }

          section.emit_u8(kExprEnd);
        }
      });
    }

    var mem_export = wasm.memory !== undefined && wasm.memory.exp;
    var exports_count = wasm.exports.length + (mem_export ? 1 : 0);

    if (exports_count > 0) {
      if (debug) print("emitting exports @ " + binary.length);
      binary.emit_section(kExportSectionCode, section => {
        section.emit_u32v(exports_count);

        for (let exp of wasm.exports) {
          section.emit_string(exp.name);
          section.emit_u8(exp.kind);
          section.emit_u32v(exp.index);
        }

        if (mem_export) {
          section.emit_string("memory");
          section.emit_u8(kExternalMemory);
          section.emit_u8(0);
        }
      });
    }

    if (wasm.start_index !== undefined) {
      if (debug) print("emitting start function @ " + binary.length);
      binary.emit_section(kStartSectionCode, section => {
        section.emit_u32v(wasm.start_index);
      });
    }

    if (wasm.function_table_inits.length > 0) {
      if (debug) print("emitting table @ " + binary.length);
      binary.emit_section(kElementSectionCode, section => {
        var inits = wasm.function_table_inits;
        section.emit_u32v(inits.length);

        for (let init of inits) {
          section.emit_u8(0);

          if (init.is_global) {
            section.emit_u8(kExprGetGlobal);
          } else {
            section.emit_u8(kExprI32Const);
          }

          section.emit_u32v(init.base);
          section.emit_u8(kExprEnd);
          section.emit_u32v(init.array.length);

          for (let index of init.array) {
            section.emit_u32v(index);
          }
        }
      });
    }

    if (wasm.exceptions.length > 0) {
      if (debug) print("emitting exceptions @ " + binary.length);
      binary.emit_section(kExceptionSectionCode, section => {
        section.emit_u32v(wasm.exceptions.length);

        for (let type of wasm.exceptions) {
          section.emit_u32v(type.params.length);

          for (let param of type.params) {
            section.emit_u8(param);
          }
        }
      });
    }

    if (wasm.functions.length > 0) {
      if (debug) print("emitting code @ " + binary.length);
      binary.emit_section(kCodeSectionCode, section => {
        section.emit_u32v(wasm.functions.length);

        for (let func of wasm.functions) {
          let local_decls = [];
          let l = func.locals;

          if (l !== undefined) {
            let local_decls_count = 0;

            if (l.i32_count > 0) {
              local_decls.push({
                count: l.i32_count,
                type: kWasmI32
              });
            }

            if (l.i64_count > 0) {
              local_decls.push({
                count: l.i64_count,
                type: kWasmI64
              });
            }

            if (l.f32_count > 0) {
              local_decls.push({
                count: l.f32_count,
                type: kWasmF32
              });
            }

            if (l.f64_count > 0) {
              local_decls.push({
                count: l.f64_count,
                type: kWasmF64
              });
            }

            if (l.s128_count > 0) {
              local_decls.push({
                count: l.s128_count,
                type: kWasmS128
              });
            }
          }

          let header = new Binary();
          header.emit_u32v(local_decls.length);

          for (let decl of local_decls) {
            header.emit_u32v(decl.count);
            header.emit_u8(decl.type);
          }

          section.emit_u32v(header.length + func.body.length);
          section.emit_bytes(header);
          section.emit_bytes(func.body);
        }
      });
    }

    if (wasm.segments.length > 0) {
      if (debug) print("emitting data segments @ " + binary.length);
      binary.emit_section(kDataSectionCode, section => {
        section.emit_u32v(wasm.segments.length);

        for (let seg of wasm.segments) {
          section.emit_u8(0);

          if (seg.is_global) {
            section.emit_u8(kExprGetGlobal);
            section.emit_u32v(seg.addr);
          } else {
            section.emit_u8(kExprI32Const);
            section.emit_u32v(seg.addr);
          }

          section.emit_u8(kExprEnd);
          section.emit_u32v(seg.data.length);
          section.emit_bytes(seg.data);
        }
      });
    }

    for (let exp of wasm.explicit) {
      if (debug) print("emitting explicit @ " + binary.length);
      binary.emit_bytes(exp);
    }

    let num_function_names = 0;
    let num_functions_with_local_names = 0;

    for (let func of wasm.functions) {
      if (func.name !== undefined) ++num_function_names;
      if (func.numLocalNames() > 0) ++num_functions_with_local_names;
    }

    if (num_function_names > 0 || num_functions_with_local_names > 0 || wasm.name !== undefined) {
      if (debug) print('emitting names @ ' + binary.length);
      binary.emit_section(kUnknownSectionCode, section => {
        section.emit_string('name');

        if (wasm.name !== undefined) {
          section.emit_section(kModuleNameCode, name_section => {
            name_section.emit_string(wasm.name);
          });
        }

        if (num_function_names > 0) {
          section.emit_section(kFunctionNamesCode, name_section => {
            name_section.emit_u32v(num_function_names);

            for (let func of wasm.functions) {
              if (func.name === undefined) continue;
              name_section.emit_u32v(func.index);
              name_section.emit_string(func.name);
            }
          });
        }

        if (num_functions_with_local_names > 0) {
          section.emit_section(kLocalNamesCode, name_section => {
            name_section.emit_u32v(num_functions_with_local_names);

            for (let func of wasm.functions) {
              if (func.numLocalNames() == 0) continue;
              name_section.emit_u32v(func.index);
              name_section.emit_u32v(func.numLocalNames());

              for (let i = 0; i < func.local_names.length; ++i) {
                if (func.local_names[i] === undefined) continue;
                name_section.emit_u32v(i);
                name_section.emit_string(func.local_names[i]);
              }
            }
          });
        }
      });
    }

    return binary;
  }

  toBuffer(debug = false) {
    let bytes = this.toArray(debug);
    let buffer = new ArrayBuffer(bytes.length);
    let view = new Uint8Array(buffer);

    for (let i = 0; i < bytes.length; i++) {
      let val = bytes[i];
      if (typeof val == "string") val = val.charCodeAt(0);
      view[i] = val | 0;
    }

    return buffer;
  }

  instantiate(ffi) {
    let module = new WebAssembly.Module(this.toBuffer());
    let instance = new WebAssembly.Instance(module, ffi);
    return instance;
  }

  toModule(debug = false) {
    return new WebAssembly.Module(this.toBuffer(debug));
  }

}

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/spidermonkey/test262/built-ins/Date/S15.9.3.1_A4_T1.js
var __v_2420 = function (__v_2423) {
  try {
    this.value = __v_2423;
  } catch (e) {}

  /* ExpressionMutator: Cloned sibling */
  try {
    this.toString = function () {
      throw "toString-" + this.value;
    };
  } catch (e) {}

  try {
    this.valueOf = function () {
      throw "valueOf-" + this.value;
    };
  } catch (e) {}

  try {
    this.toString = function () {
      throw "toString-" + this.value;
    };
  } catch (e) {}
};

try {
  var __v_2421 = new Date(new __v_2420(1), new __v_2420(2));

  /* ExpressionMutator: Repeated */
  try {
    $ERROR("#1: The 1st step is calling ToNumber(year)");
  } catch (e) {}

  try {
    $ERROR("#1: The 1st step is calling ToNumber(year)");
  } catch (e) {}
} catch (__v_2424) {
  if (__v_2424 !== "valueOf-1") {
    try {
      $ERROR("#1: The 1st step is calling ToNumber(year)");
    } catch (e) {}
  }
}

try {
  var __v_2422 = new Date(1, new __v_2420(2));

  try {
    $ERROR("#2: The 2nd step is calling ToNumber(month)");
  } catch (e) {}
} catch (__v_2425) {
  if (__v_2425 !== "valueOf-2") {
    try {
      $ERROR("#2: The 2nd step is calling ToNumber(month)");
    } catch (e) {}
  }
}

try {
  reportCompare(
  /* NumberMutator: Replaced 0 with 1 */
  1, 0);
} catch (e) {}

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/spidermonkey/test262/built-ins/DataView/prototype/setInt32/set-values-return-undefined.js
var __v_2426 = new ArrayBuffer(
/* NumberMutator: Replaced 8 with 1 */
1);

var __v_2427 = new DataView(__v_2426, 0);

var __v_2428 = byteConversionValues.values;
var __v_2429 = byteConversionValues.expected.Int32;

try {
  __v_2428.forEach(function (__v_2430, __v_2431) {
    var __v_2432 = __v_2429[__v_2431];

    var __v_2433 = __v_2427.setInt32(0, __v_2430, false);

    try {
      assert.sameValue(__v_2427.getInt32(0), __v_2432, "value: " + __v_2430);
    } catch (e) {}

    try {
      assert.sameValue(__v_2433, undefined, "return is undefined, value: " + __v_2430);
    } catch (e) {}
  });
} catch (e) {}

try {
  reportCompare(0, 0);
} catch (e) {}

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/v8/test/mjsunit/wasm/table.js
var __v_2434 = 1e12;
var __v_2435 = 1073741824;

var __v_2436 = 4 * 1024 * 1024 * 1024 - 1;

var __v_2437 = 2 * 1024 * 1024 * 1024 - 1;

var __v_2438 = 10000000;

function __f_518(__v_2439, __v_2440) {
  try {
    assertSame(WebAssembly.Table.prototype, __v_2439.__proto__);
  } catch (e) {}

  try {
    assertSame(WebAssembly.Table, __v_2439.constructor);
  } catch (e) {}

  /* VariableOrObjectMutator: Random mutation */
  try {
    delete __v_2427[__getRandomProperty(__v_2427, 9058)], gc();
  } catch (e) {}

  try {
    assertTrue(__v_2439 instanceof Object);
  } catch (e) {}

  try {
    assertTrue(__v_2439 instanceof WebAssembly.Table);
  } catch (e) {}

  try {
    assertEquals(__v_2440, __v_2439.length);
  } catch (e) {}
}

try {
  (function __f_519() {
    try {
      assertTrue(WebAssembly.Table instanceof Function);
    } catch (e) {}

    try {
      assertSame(WebAssembly.Table, WebAssembly.Table.prototype.constructor);
    } catch (e) {}

    try {
      assertTrue(WebAssembly.Table.prototype.grow instanceof Function);
    } catch (e) {}

    try {
      assertTrue(WebAssembly.Table.prototype.get instanceof Function);
    } catch (e) {}

    try {
      assertTrue(WebAssembly.Table.prototype.set instanceof Function);
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    try {
      __callRandomFunction(__v_2422, 271978);
    } catch (e) {}

    if (__v_2438 != null && typeof __v_2438 == "object") try {
      Object.defineProperty(__v_2438, __getRandomProperty(__v_2438, 380648), {
        value: __v_2435
      });
    } catch (e) {}
    if (__v_2420 != null && typeof __v_2420 == "object") try {
      Object.defineProperty(__v_2420, __getRandomProperty(__v_2420, 109348), {
        get: function () {
          return true;
        },
        set: function (value) {}
      });
    } catch (e) {}

    try {
      __callRandomFunction(__v_2436, 346348, -2147483649);
    } catch (e) {}

    /* ExpressionMutator: Cloned sibling */
    try {
      assertThrows(() => new WebAssembly.Table({
        element: "anyfunc",
        initial: 10,
        maximum: 9
      }), RangeError);
    } catch (e) {}

    let __v_2441 = Object.getOwnPropertyDescriptor(WebAssembly.Table.prototype, 'length');

    /* ExpressionMutator: Repeated */
    try {
      assertTrue(__v_2441.get instanceof Function);
    } catch (e) {}

    try {
      assertTrue(__v_2441.get instanceof Function);
    } catch (e) {}

    try {
      assertSame(undefined, __v_2441.set);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table(), TypeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table(
      /* NumberMutator: Replaced 1 with -1 */
      -1), TypeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table(""), TypeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table({}), TypeError);
    } catch (e) {}

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/spidermonkey/js1_5/Regress/regress-452346.js */
    try {
      0.1.toPrecision(30);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table({
        initial: 10
      }), TypeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table({
        element: 0,
        initial: 10
      }), TypeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table({
        element: "any",
        initial: 10
      }), TypeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table({
        element: "anyfunc",
        initial: -1
      }), RangeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table({
        element: "anyfunc",
        initial: __v_2434
      }), RangeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table({
        element: "anyfunc",
        initial: 10,
        maximum: -1
      }), RangeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table({
        element: "anyfunc",
        initial: 10,
        maximum: __v_2434
      }), RangeError);
    } catch (e) {}

    try {
      assertThrows(() => new WebAssembly.Table({
        element: "anyfunc",
        initial: 10,
        maximum: 9
      }), RangeError);
    } catch (e) {}

    let __v_2442;

    /* ExpressionMutator: Cloned sibling */

    /* ExpressionMutator: Repeated */
    try {
      assertTrue(__v_2441.get instanceof Function);
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        initial: 1
      });
    } catch (e) {}

    try {
      __f_518(__v_2442, 1);
    } catch (e) {}

    try {
      assertEquals(null, __v_2442.get(0));
    } catch (e) {}

    try {
      assertEquals(undefined, __v_2442[0]);
    } catch (e) {}

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/v8/test/mjsunit/string-charat.js */
    try {
      String.prototype.charCodeAt = function () {
        return 42;
      };
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        initial: "2"
      });
    } catch (e) {}

    try {
      __f_518(__v_2442, 2);
    } catch (e) {}

    try {
      assertEquals(null, __v_2442.get(0));
    } catch (e) {}

    /* ExpressionMutator: Repeated */
    try {
      assertEquals(null, __v_2442.get(1));
    } catch (e) {}

    try {
      assertEquals(null, __v_2442.get(1));
    } catch (e) {}

    try {
      assertEquals(undefined, __v_2442[0]);
    } catch (e) {}

    try {
      assertEquals(undefined, __v_2442[1]);
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        initial: {
          valueOf() {
            return "1";
          }

        }
      });
    } catch (e) {}

    /* ExpressionMutator: Cloned sibling */
    try {
      __f_518(__v_2442, 0);
    } catch (e) {}

    try {
      __f_518(__v_2442, 1);
    } catch (e) {}

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/spidermonkey/test262/built-ins/String/prototype/match/this-value-not-obj-coercible.js */
    try {
      __v_2437.call(null, /./);
    } catch (e) {}

    try {
      assertEquals(null, __v_2442.get(0));
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    try {
      __callRandomFunction(__v_2435, 630949);
    } catch (e) {}

    try {
      assertEquals(undefined,
      /* VariableMutator: Replaced __v_2442 with __v_2441 */
      __v_2441[0]);
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        initial: undefined
      });
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    try {
      __callRandomFunction(__v_2441, 40506, __getRandomObject(1002544), 1073741824);
    } catch (e) {}

    try {
      __f_518(
      /* VariableMutator: Replaced __v_2442 with __v_2437 */
      __v_2437, 0);
    } catch (e) {}

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/spidermonkey/test262/built-ins/Object/defineProperty/15.2.3.6-2-48.js */
    try {
      __v_2422.valueOf = function () {
        try {
          __v_2426 = true;
        } catch (e) {}

        return "10";
      };
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc"
      });
    } catch (e) {}

    try {
      __f_518(__v_2442, 0);
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        maximum: 10
      });
    } catch (e) {}

    try {
      __f_518(__v_2442, 0);
    } catch (e) {}

    /* ExpressionMutator: Cloned sibling */
    try {
      assertThrows(() => new WebAssembly.Table({}), TypeError);
    } catch (e) {}

    /* ExpressionMutator: Repeated */
    try {
      /* VariableMutator: Replaced __v_2442 with __v_2421 */
      __v_2421 = new WebAssembly.Table({
        element: "anyfunc",
        maximum: "10"
      });
    } catch (e) {}

    try {
      /* VariableMutator: Replaced __v_2442 with __v_2421 */
      __v_2421 = new WebAssembly.Table({
        element: "anyfunc",
        maximum: "10"
      });
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    if (__v_2427 != null && typeof __v_2427 == "object") try {
      Object.defineProperty(__v_2427, __getRandomProperty(__v_2442, 416096), {
        value: __getRandomObject(1012749)
      });
    } catch (e) {}

    try {
      __f_518(__v_2442, 0);
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        maximum: {
          valueOf() {
            return "10";
          }

        }
      });
    } catch (e) {}

    try {
      __f_518(__v_2442, 0);
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        initial: 0,
        maximum: undefined
      });
    } catch (e) {}

    /* ExpressionMutator: Cloned sibling */

    /* ExpressionMutator: Repeated */
    try {
      assertEquals(null, __v_2442.get(1));
    } catch (e) {}

    try {
      __f_518(__v_2442, 0);
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        maximum: __v_2437
      });
    } catch (e) {}

    try {
      __f_518(__v_2442, 0);
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        maximum: __v_2436
      });
    } catch (e) {}

    try {
      __f_518(__v_2442, 0);
    } catch (e) {}

    try {
      __v_2442 = new WebAssembly.Table({
        element: "anyfunc",
        maximum: __v_2438 + 1
      });
    } catch (e) {}

    try {
      __f_518(__v_2442, 0);
    } catch (e) {}
  })();
} catch (e) {}

try {
  (function __f_520() {
    var __v_2443 = true;
    var __v_2444 = {
      element: "anyfunc",
      initial: 10
    };

    try {
      Object.defineProperty(__v_2444, 'maximum', {
        get: function () {
          if (__v_2443) {
            try {
              __v_2443 = false;
            } catch (e) {}

            return 16;
          } else {
            return -1;
          }
        }
      });
    } catch (e) {}

    let __v_2445 = new WebAssembly.Table(__v_2444);

    try {
      /* FunctionCallMutator: Run to stack limit __f_518 */
      runNearStackLimit(() => {
        return __f_518(__v_2445, 10);
      });
    } catch (e) {}
  })();
} catch (e) {}

try {
  (function __f_521() {
    var __v_2446 = false;
    var __v_2447 = {
      element: "anyfunc",
      initial: 10
    };

    var __v_2448 = new Proxy({
      maximum: 16
    }, {
      has: function (__v_2450, __v_2451) {
        try {
          __v_2446 = true;
        } catch (e) {}
      }
    });

    try {
      Object.setPrototypeOf(__v_2447, __v_2448);
    } catch (e) {}

    let __v_2449 = new WebAssembly.Table(__v_2447);

    /* ExpressionMutator: Repeated */
    try {
      __f_518(__v_2449, 10);
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    if (__v_2436 != null && typeof __v_2436 == "object") try {
      Object.defineProperty(__v_2436, __getRandomProperty(__v_2436, 952718), {
        get: function () {
          try {
            delete __v_2428[__getRandomProperty(__v_2428, 129187)], gc();
          } catch (e) {}

          return __v_2435;
        },
        set: function (value) {
          if (__v_2428 != null && typeof __v_2428 == "object") try {
            Object.defineProperty(__v_2428, __getRandomProperty(__v_2428, 512581), {
              value: Array(0x8000).fill("a")
            });
          } catch (e) {}
        }
      });
    } catch (e) {}

    try {
      __f_518(__v_2449, 10);
    } catch (e) {}
  })();
} catch (e) {}

try {
  (function __f_522() {
    for (let __v_2452 = 0; __v_2452 < 10; ++__v_2452) {
      let __v_2453 = new WebAssembly.Table({
        element: "anyfunc",
        initial: __v_2452
      });

      try {
        assertEquals(
        /* VariableMutator: Replaced __v_2452 with __v_2421 */
        __v_2421, __v_2453.length);
      } catch (e) {}
    }

    try {
      assertThrows(() => WebAssembly.Table.prototype.length.call([]), TypeError);
    } catch (e) {}
  })();
} catch (e) {}

try {
  (function __f_523() {
    let __v_2454 = new WebAssembly.Table({
      element: "anyfunc",
      initial: 10
    });

    for (let __v_2455 = 0; __v_2455 < __v_2454.length; ++__v_2455) {
      try {
        assertEquals(null, __v_2454.get(__v_2455));
      } catch (e) {}

      try {
        assertEquals(null, __v_2454.get(String(__v_2455)));
      } catch (e) {}

      /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/spidermonkey/test262/built-ins/Set/prototype/has/this-not-object-throw-number.js */
      try {
        __v_2422.has.call(0, 1);
      } catch (e) {}
    }

    for (let __v_2456 of [0.4, "", NaN, {}, [], () => {}]) {
      try {
        assertEquals(null, __v_2454.get(__v_2456));
      } catch (e) {}
    }

    for (let __v_2457 of [-1, __v_2454.length, __v_2454.length * 10]) {
      try {
        assertThrows(() => __v_2454.get(__v_2457), RangeError);
      } catch (e) {}
    }

    /* ExpressionMutator: Repeated */
    try {
      assertThrows(() => __v_2454.get(Symbol()), TypeError);
    } catch (e) {}

    try {
      assertThrows(() => __v_2454.get(Symbol()), TypeError);
    } catch (e) {}

    try {
      assertThrows(() => WebAssembly.Table.prototype.get.call([], 0), TypeError);
    } catch (e) {}
  })();
} catch (e) {}

try {
  (function __f_524() {
    let __v_2458 = new WasmModuleBuilder();

    try {
      /* VariableMutator: Replaced __v_2458 with __v_2438 */
      __v_2438.addExport("wasm", __v_2458.addFunction("", kSig_v_v).addBody([]));
    } catch (e) {}

    try {
      __v_2458.addExport("host", __v_2458.addImport("test", "f", kSig_v_v));
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    try {
      __v_2426[__getRandomProperty(__v_2426, 251579)] = 1073741823, gc();
    } catch (e) {}

    try {
      __v_2458[__getRandomProperty(__v_2458, 16075)] = __v_2426, gc();
    } catch (e) {}

    try {
      __v_2428[__getRandomProperty(__v_2428, 589311)] = this, gc();
    } catch (e) {}

    try {
      __callRandomFunction(__v_2421, 355323, __v_2434, /0/, __getRandomObject(821788), -1.7976931348623157e+308, "foo", __v_2438, __getRandomObject(315745), 2147483647, -4294967295);
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    try {
      __v_2436 = __v_2420, gc();
    } catch (e) {}

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/spidermonkey/test262/built-ins/Date/prototype/setMinutes/S15.9.5.32_A1_T1.js */
    try {
      Date.prototype.setMinutes = 2;
    } catch (e) {}

    let {
      wasm: __v_2459,
      host: __v_2460
    } = __v_2458.instantiate({
      test: {
        f() {}

      }
    }).exports;

    let __v_2461 = new WebAssembly.Table({
      element: "anyfunc",
      initial:
      /* NumberMutator: Replaced 10 with 2 */
      2
    });

    for (let __v_2462 of [__v_2459, __v_2460]) {
      for (let __v_2463 = 0; __v_2463 < __v_2461.length; ++__v_2463) try {
        __v_2461.set(__v_2463, null);
      } catch (e) {}

      for (let __v_2464 = 0; __v_2464 < __v_2461.length; ++__v_2464) {
        try {
          assertSame(null, __v_2461.get(__v_2464));
        } catch (e) {}

        try {
          assertSame(undefined, __v_2461.set(__v_2464, __v_2462));
        } catch (e) {}

        /* ExpressionMutator: Repeated */
        try {
          assertSame(
          /* VariableMutator: Replaced __v_2462 with __v_2427 */
          __v_2427, __v_2461.get(__v_2464));
        } catch (e) {}

        try {
          assertSame(
          /* VariableMutator: Replaced __v_2462 with __v_2427 */
          __v_2427, __v_2461.get(__v_2464));
        } catch (e) {}

        try {
          assertSame(undefined, __v_2461[
          /* VariableMutator: Replaced __v_2464 with __v_2461 */
          __v_2461]);
        } catch (e) {}
      }

      for (let __v_2465 = 0; __v_2465 < __v_2461.length; ++__v_2465) try {
        __v_2461.set(__v_2465, null);
      } catch (e) {}

      for (let __v_2466 = 0; __v_2466 < __v_2461.length; ++__v_2466) {
        try {
          assertSame(null, __v_2461.get(__v_2466));
        } catch (e) {}

        try {
          assertSame(undefined, __v_2461.set(String(__v_2466), __v_2462));
        } catch (e) {}

        /* ExpressionMutator: Cloned sibling */
        try {
          assertSame(null, __v_2461.get(__v_2466));
        } catch (e) {}

        try {
          assertSame(__v_2462, __v_2461.get(__v_2466));
        } catch (e) {}

        try {
          assertSame(undefined, __v_2461[__v_2466]);
        } catch (e) {}
      }

      for (let __v_2467 of [0.4, "", NaN, {}, [], () => {}]) {
        try {
          assertSame(undefined, __v_2461.set(0, null));
        } catch (e) {}

        /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/v8/test/mjsunit/array-push.js */
        try {
          __v_2421.push(__v_2461 + 0.1);
        } catch (e) {}

        try {
          assertSame(undefined, __v_2461.set(
          /* VariableMutator: Replaced __v_2467 with __v_2420 */
          __v_2420, __v_2462));
        } catch (e) {}

        try {
          assertSame(__v_2462, __v_2461.get(0));
        } catch (e) {}

        try {
          assertSame(undefined, __v_2461[__v_2467]);
        } catch (e) {}
      }

      for (let __v_2468 of [-1, __v_2461.length, __v_2461.length * 10]) {
        try {
          assertThrows(() => __v_2461.set(__v_2468, __v_2462), RangeError);
        } catch (e) {}
      }

      /* ExpressionMutator: Repeated */
      try {
        assertThrows(() => __v_2461.set(0), TypeError);
      } catch (e) {}

      try {
        assertThrows(() => __v_2461.set(0), TypeError);
      } catch (e) {}

      for (let __v_2469 of [undefined, 0, "", {}, [], () => {}]) {
        /* ExpressionMutator: Repeated */
        try {
          assertThrows(() => __v_2461.set(0, __v_2469), TypeError);
        } catch (e) {}

        /* VariableOrObjectMutator: Random mutation */
        try {
          __v_2459 = __v_2427, gc();
        } catch (e) {}

        try {
          __v_2461[__getRandomProperty(__v_2461, 336412)], gc();
        } catch (e) {}

        if (__v_2462 != null && typeof __v_2462 == "object") try {
          Object.defineProperty(__v_2462, __getRandomProperty(__v_2462, 927671), {
            get: function () {
              try {
                __v_2427[__getRandomProperty(__v_2427, 342684)] = -1, gc();
              } catch (e) {}

              return 0;
            },
            set: function (value) {
              try {
                __callRandomFunction(__v_2460, 188351, __getRandomObject(310265), this[0], "foo", -1073741824);
              } catch (e) {}
            }
          });
        } catch (e) {}
        if (__v_2469 != null && typeof __v_2469 == "object") try {
          Object.defineProperty(__v_2469, __getRandomProperty(__v_2469, 102649), {
            value: 4294967296
          });
        } catch (e) {}

        try {
          __callRandomFunction(__v_2434, 465529, __v_2435, -9007199254740991, 1073741824, "", NaN, Symbol("foo"), __getRandomObject(381765), __v_2434);
        } catch (e) {}

        try {
          assertThrows(() => __v_2461.set(0, __v_2469), TypeError);
        } catch (e) {}
      }

      try {
        assertThrows(() => __v_2461.set(Symbol(), __v_2462), TypeError);
      } catch (e) {}

      try {
        assertThrows(() => WebAssembly.Table.prototype.set.call([], 0, __v_2462), TypeError);
      } catch (e) {}
    }
  })();
} catch (e) {}

try {
  (function __f_525() {
    let __v_2470 = new WasmModuleBuilder();

    /* VariableOrObjectMutator: Random mutation */
    if (__v_2428 != null && typeof __v_2428 == "object") try {
      Object.defineProperty(__v_2428, __getRandomProperty(__v_2428, 446621), {
        value: __v_2426
      });
    } catch (e) {}

    try {
      __callRandomFunction(__v_2427, 856529, 2147483639, 1e-15, __getRandomObject(570684), Array(0x8000).fill("a"));
    } catch (e) {}

    if (__v_2426 != null && typeof __v_2426 == "object") try {
      Object.defineProperty(__v_2426, __getRandomProperty(__v_2426, 546785), {
        get: function () {
          return 1;
        },
        set: function (value) {}
      });
    } catch (e) {}
    if (__v_2421 != null && typeof __v_2421 == "object") try {
      Object.defineProperty(__v_2421, __getRandomProperty(__v_2421, 903271), {
        value: this[1]
      });
    } catch (e) {}

    try {
      __v_2470.addExport("wasm",
      /* VariableMutator: Replaced __v_2470 with __v_2435 */
      __v_2435.addFunction("", kSig_v_v).addBody([]));
    } catch (e) {}

    try {
      __v_2470.addExport("host", __v_2470.addImport("test", "f", kSig_v_v));
    } catch (e) {}

    let {
      wasm: __v_2471,
      host: __v_2472
    } = __v_2470.instantiate({
      test: {
        f() {}

      }
    }).exports;

    let __v_2473 = new WebAssembly.Table({
      element: "anyfunc",
      initial: 10
    });

    for (let __v_2474 of [__v_2471, __v_2472, () => {}, 5, {}, ""]) {
      for (let __v_2475 = 0; __v_2475 < __v_2473.length; ++__v_2475) try {
        __v_2473[__v_2475] =
        /* VariableMutator: Replaced __v_2474 with __v_2470 */
        __v_2470;
      } catch (e) {}

      for (let __v_2476 = 0; __v_2476 < __v_2473.length; ++__v_2476) {
        try {
          assertSame(null, __v_2473.get(__v_2476));
        } catch (e) {}

        try {
          assertSame(__v_2474, __v_2473[__v_2476]);
        } catch (e) {}
      }

      for (let __v_2477 of [0.4, "", NaN, {}, [], () => {}]) {
        try {
          assertSame(__v_2474, __v_2473[__v_2477] = __v_2474);
        } catch (e) {}

        /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/v8/test/mjsunit/es6/typedarray-neutered.js */
        try {
          __v_2434.call(__v_2426, 0, 100);
        } catch (e) {}

        try {
          assertSame(__v_2474, __v_2473[__v_2477]);
        } catch (e) {}

        /* ExpressionMutator: Repeated */
        try {
          assertSame(null, __v_2473.get(__v_2477));
        } catch (e) {}

        try {
          assertSame(null, __v_2473.get(__v_2477));
        } catch (e) {}
      }
    }
  })();
} catch (e) {}

try {
  (function __f_526() {
    let __v_2478 = new WasmModuleBuilder();

    try {
      __v_2478.addExport("wasm", __v_2478.addFunction("", kSig_v_v).addBody([]));
    } catch (e) {}

    try {
      __v_2478.addExport("host", __v_2478.addImport("test", "f", kSig_v_v));
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    try {
      __v_2478 = __v_2426, gc();
    } catch (e) {}

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/spidermonkey/js1_8/extensions/regress-445818.js */
    try {
      __v_2427["a" + __v_2420] = 2;
    } catch (e) {}

    let {
      wasm: __v_2479,
      host: __v_2480
    } = __v_2478.instantiate({
      test: {
        f() {}

      }
    }).exports;

    function __f_527(__v_2482) {
      for (let __v_2483 = 0; __v_2483 < 5; ++__v_2483) try {
        __v_2482.set(__v_2483, __v_2479);
      } catch (e) {}

      for (let __v_2484 = 15; __v_2484 < 20; ++__v_2484) try {
        __v_2482.set(__v_2484, __v_2480);
      } catch (e) {}
    }

    function __f_528(__v_2485) {
      for (let __v_2486 = 0; __v_2486 < 5; ++__v_2486) try {
        assertSame(
        /* VariableMutator: Replaced __v_2479 with __v_2438 */
        __v_2438, __v_2485.get(__v_2486));
      } catch (e) {}

      for (let __v_2487 = 6; __v_2487 < 15; ++__v_2487) try {
        assertSame(null,
        /* VariableMutator: Replaced __v_2485 with __v_2426 */
        __v_2426.get(__v_2487));
      } catch (e) {}

      for (let __v_2488 = 15; __v_2488 < 20; ++__v_2488) try {
        assertSame(__v_2480, __v_2485.get(__v_2488));
      } catch (e) {}

      for (let __v_2489 = 21; __v_2489 < __v_2485.length; ++__v_2489) try {
        assertSame(null, __v_2485.get(__v_2489));
      } catch (e) {}
    }

    let __v_2481 = new WebAssembly.Table({
      element: "anyfunc",
      initial: 20
    });

    try {
      __f_527(
      /* VariableMutator: Replaced __v_2481 with __v_2428 */
      __v_2428);
    } catch (e) {}

    try {
      __f_528(__v_2481);
    } catch (e) {}

    try {
      __v_2481.grow(0);
    } catch (e) {}

    try {
      __f_528(__v_2481);
    } catch (e) {}

    try {
      __v_2481.grow(10);
    } catch (e) {}

    try {
      __f_528(
      /* VariableMutator: Replaced __v_2481 with __v_2429 */
      __v_2429);
    } catch (e) {}

    try {
      assertThrows(() => __v_2481.grow(-10), RangeError);
    } catch (e) {}

    try {
      /* VariableMutator: Replaced __v_2481 with __v_2437 */
      __v_2437 = new WebAssembly.Table({
        element: "anyfunc",
        initial: 20,
        maximum: 25
      });
    } catch (e) {}

    /* ExpressionMutator: Repeated */
    try {
      __f_527(__v_2481);
    } catch (e) {}

    try {
      __f_527(__v_2481);
    } catch (e) {}

    try {
      __f_528(__v_2481);
    } catch (e) {}

    try {
      __v_2481.grow(0);
    } catch (e) {}

    try {
      __f_528(__v_2481);
    } catch (e) {}

    try {
      __v_2481.grow(5);
    } catch (e) {}

    /* ExpressionMutator: Repeated */
    try {
      __f_528(__v_2481);
    } catch (e) {}

    try {
      __f_528(__v_2481);
    } catch (e) {}

    try {
      __v_2481.grow(0);
    } catch (e) {}

    try {
      /* FunctionCallMutator: Run to stack limit __f_528 */
      runNearStackLimit(() => {
        return __f_528(__v_2481);
      });
    } catch (e) {}

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/v8/test/mjsunit/es6/collections.js */
    try {
      __v_2481.get(null);
    } catch (e) {}

    try {
      assertThrows(() => __v_2481.grow(1), RangeError);
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    try {
      __v_2421 = __v_2428, gc();
    } catch (e) {}

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/spidermonkey/ecma/String/15.5.4.4-3.js */
    try {
      this.toString = new Function("return this.value +'';");
    } catch (e) {}

    try {
      assertThrows(() => __v_2481.grow(-10), RangeError);
    } catch (e) {}

    try {
      assertThrows(() => WebAssembly.Table.prototype.grow.call([], 0), TypeError);
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    try {
      __v_2422[__getRandomProperty(__v_2422, 483300)] = 9007199254740991, gc();
    } catch (e) {}

    try {
      __v_2481 = new WebAssembly.Table({
        element: "anyfunc",
        initial: 0,
        maximum:
        /* VariableMutator: Replaced __v_2438 with __v_2435 */
        __v_2435
      });
    } catch (e) {}

    try {
      __v_2481.grow(__v_2438);
    } catch (e) {}

    try {
      assertThrows(() => __v_2481.grow(1), RangeError);
    } catch (e) {}

    try {
      __v_2481 = new WebAssembly.Table({
        element: "anyfunc",
        initial: 0
      });
    } catch (e) {}

    try {
      __v_2481.grow({
        valueOf: () => {
          /* ExpressionMutator: Repeated */
          try {
            __v_2481.grow(2);
          } catch (e) {}

          try {
            __v_2481.grow(2);
          } catch (e) {}

          return 1;
        }
      });
    } catch (e) {}

    /* ExpressionMutator: Repeated */

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/spidermonkey/ecma_5/Object/propertyIsEnumerable.js */
    try {
      [].length = 0.7;
    } catch (e) {}

    /* CrossOverMutator: Crossover from /usr/local/google/home/ochang/LayoutTests/spidermonkey/ecma_5/Object/propertyIsEnumerable.js */
    try {
      [].length = 0.7;
    } catch (e) {}

    try {
      assertEquals(3, __v_2481.length);
    } catch (e) {}
  })();
} catch (e) {}

// Original: /mnt/scratch0/bots/oss-fuzz-linux-zone1-host-high-end-lbzt-5/clusterfuzz/slave-bot/inputs/fuzzer-common-data-bundles/chakra/fieldopts/fieldhoist_copypropdep.js
try {
  (function () {
    var __v_2490 = new Object();

    var __v_2491 = function (__v_2496, __v_2497, __v_2498) {
      try {
        __v_2492;
      } catch (e) {}
    };

    var __v_2492 = 1;
    var __v_2493 = 1;

    try {
      __v_2490.prop1 = -1004383636;
    } catch (e) {}

    var __v_2494 = 0;

    while ((__v_2501 = __v_2492) && __v_2494 < 3) {
      /* ExpressionMutator: Repeated */
      try {
        __v_2494++;
      } catch (e) {}

      /* VariableOrObjectMutator: Random mutation */
      try {
        __v_2427 = __v_2437, gc();
      } catch (e) {}

      try {
        __v_2494++;
      } catch (e) {}

      if (__v_2492 ^= 1) {
        try {
          __v_2500 = __v_2501;
        } catch (e) {}
      }
    }

    for (var __v_2494 = 0; __v_2490.prop1 < (__v_2501 >>= 1) && __v_2494 < 3; __v_2494++, 1) {
      for (var __v_2495 = 0; __v_2493 < 1 && __v_2495 < 3; __v_2495++, __v_2492) {}
    }
  })();
} catch (e) {}

try {
  (function () {
    var __v_2502 = new Object();

    var __v_2503 = new Object();

    var __v_2504 = new Object();

    var __v_2505 = function (__v_2510, __v_2511, __v_2512) {
      try {
        __v_2504 = __v_2502;
      } catch (e) {}
    };

    try {
      __v_2502.length = 1;
    } catch (e) {}

    try {
      __v_2503.__v_2501 = -779604180.9;
    } catch (e) {}

    /* VariableOrObjectMutator: Random mutation */
    if (__v_2421 != null && typeof __v_2421 == "object") try {
      Object.defineProperty(__v_2421, __getRandomProperty(__v_2421, 304533), {
        get: function () {
          try {
            __callRandomFunction(__v_2421, 814200, __getRandomObject(413698), __v_2429, __getRandomObject(236407), __v_2504, 2147483647, __v_2438, __v_2422, __v_2438, __v_2437, __getRandomObject(553726));
          } catch (e) {}

          return __v_2504;
        },
        set: function (value) {
          if (__v_2435 != null && typeof __v_2435 == "object") try {
            Object.defineProperty(__v_2435, __getRandomProperty(__v_2435, 827840), {
              get: function () {
                return __getRandomObject(631638);
              },
              set: function (value) {}
            });
          } catch (e) {}

          try {
            __v_2436[__getRandomProperty(__v_2436, 777955)] = new String(""), gc();
          } catch (e) {}
        }
      });
    } catch (e) {}
    if (__v_2420 != null && typeof __v_2420 == "object") try {
      Object.defineProperty(__v_2420, __getRandomProperty(__v_2420, 604117), {
        value: __v_2437
      });
    } catch (e) {}

    try {
      delete __v_2505[__getRandomProperty(__v_2505, 747513)], gc();
    } catch (e) {}

    if (__v_2503 != null && typeof __v_2503 == "object") try {
      Object.defineProperty(__v_2503, __getRandomProperty(__v_2422, 409949), {
        value: __getRandomObject(217876)
      });
    } catch (e) {}

    for (var __v_2506 = 0; __v_2503.__v_2501 < 1 && __v_2506 < 3; __v_2503.__v_2501++ + __v_2506++) {
      var __v_2507 = __v_2504;
      var __v_2508 = 0;

      do {
        try {
          __v_2508++;
        } catch (e) {}

        try {
          __v_2513 = __v_2507;
        } catch (e) {}

        try {
          __v_2503 = __v_2504;
        } catch (e) {}

        try {
          __v_2505();
        } catch (e) {}

        var __v_2509 = (Math.pow(1, 1) + __v_2504.
        /* VariableMutator: Replaced __v_2501 with __v_2507 */
        __v_2507) * (
        /* NumberMutator: Replaced 1 with -12 */
        -12 - (__v_2513.length %= 1));
      } while (1 && __v_2508 < 3);
    }

    if (__v_2504.length == 1) {
      try {
        WScript.Echo("PASS");
      } catch (e) {}
    }
  })();
} catch (e) {}
