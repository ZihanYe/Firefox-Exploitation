import os
import subprocess
import sys
import tempfile
import shutil
from helper import (create_profile)
from minidumpParser import (parse_minidump)

__all__ = ['run_tests']

def run_tests(firefox, tests, outdir, stackwalker, symbolPath=None, templateProfile=None, timeout=20, traceOnly=False, ffargs=[]):
	try:
		WORKDIR = os.environ.get('TESTER_WORKDIR')
	except:
		raise Exception("No environment variable: TESTER_WORKDIR")

	try:
		MOZCRASH = os.environ.get('TESTER_MOZCRASH')
	except:
		raise Exception("No environment variable: TESTER_MOZCRASH")

	# validation
	if not os.path.isfile(firefox):
		raise Exception("Firefox binary: No such file: " + firefox)
	if not os.path.isdir(tests):
		raise Exception("Test directory: No such directory: "+ tests)
	if not os.path.isdir(outdir):
		raise Exception("Output directory: No such directory: "+ outdir)
	if len(os.listdir(outdir)) > 0:
		raise Exception("output directory must be empty")
	if not os.path.isfile(stackwalker):
		raise Exception("minidump_stackwalker: No such file: "+ stackwalker)

	if templateProfile == None:
		templateProfile = os.path.join(WORKDIR, "profile")
	elif not os.path.isdir(templateProfile):
		raise Exception("Profile directory: No such directory: "+ profile)

	# create tmp working sub-directory
	tempworkingdir = tempfile.mkdtemp(prefix="run_")

	prefdir = os.path.join(tempworkingdir, "pref")
	if not os.path.isdir(prefdir):
		os.makedirs(prefdir)
	print("save pref under directory " + prefdir)

	allfiles = os.listdir(tests)
	testcases = list(filter(lambda f: f.endswith('.html'),allfiles))
	nofiles = len(testcases)
	print(str(nofiles) + " to test")
	count = 0

	# timeout test cases log:
	timeoutlog = open(os.path.join(outdir, "timeoutTests.txt"), "a")
	timeoutlog.write("All test cases that was stopped due to timeout: \n")
	# parsing minidump failed
	parsingErrlog = open(os.path.join(outdir, "minidumpErr.txt"), "a")
	parsingErrlog.write("All test cases whose minidump failed to be parsed: \n")
	# nocrash test case:
	nocrashlog = open(os.path.join(outdir, "nocrashlog.txt"), "a")
	nocrashlog.write("All test cases that did not cause a crash: \n")
	for file in testcases:
		if not file.endswith('.html'):
			continue
		fileName = file.replace('.html', '')
		fileUrl = "file://" + os.path.abspath(os.path.join(tests, file))
		logfile = os.path.join(outdir, fileName+'_out.txt')

		# create profile
		profile = create_profile(template=templateProfile, tmpdir=prefdir)

		# call firefox
		print("================== Testing with exploitation:" + file)
		cmd = firefox + " --no-remote --headless --profile " + os.path.abspath(profile) + " "
		for a in ffargs:
			cmd += "--" + a + " "
		cmd += fileUrl

		print("================== Executing Command: " + cmd)
		proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		try:
		    outs, errs = proc.communicate(timeout=timeout)
		except subprocess.TimeoutExpired:
		    proc.kill()
		    timeoutlog.write(file + " \n")
		    print("================== timeout, process killed")
		    outs, errs = proc.communicate()

		print("========== ERROR: \n" + errs.decode('utf-8'))
		dumpDirectory = os.path.abspath(os.path.join(profile, "minidumps"))
		crashed = False
		if os.path.isdir(dumpDirectory):
			count = 0
			for file in os.listdir(dumpDirectory):
				if file.endswith(".dmp"):
					count += 1
			if count > 0:
				crashed = True
		if not crashed:
			print("================ no crash reported when testing "+ file)
			nocrashlog.write(file + " \n")
		else:
			# minidump
			if symbolPath == None:
				symbolPath = os.abspath(firefox)
			getTrace, trace = parse_minidump(MOZCRASH, dumpDirectory, stackwalker, symbolPath, traceOnly, timeout)
			if not getTrace:
				parsingErrlog.write(file + " \n")
			else:
				f = open(logfile, "w")
				f.write(trace)
				f.close()

		# remove temp profile 
		shutil.rmtree(profile, True)
		count += 1
		print(str(count) + "/" + str(nofiles) + " done.")

	timeoutlog.close()
	shutil.rmtree(tempworkingdir, True)
	print("DONE testing all HTML files in " + tests)


if __name__ == '__main__':
	import argparse
	parser = argparse.ArgumentParser()
	parser.add_argument('tests', help="path to directory containing all tests to run")
	parser.add_argument('out_dir', help="path to output directory")
	parser.add_argument('--firefox', help="path to firefox binary; if not specified, must be set in TESTER_FIREFOX environment variable")
	parser.add_argument('--stackwalk_binary', help="path to minidump_stackwalker; if not specified, must be set in TESTER_STACKWALKER environment variable")
	parser.add_argument('--symbol_path', help="path to symbol for firefox")
	parser.add_argument('--template_profile', help="path to directory used as template for profile")
	parser.add_argument('--trace_only', action='store_true', help="store only stack trace (no register values, stack content etc")
	parser.add_argument('--timeout', type=int, help="maximum time allowed for running firefox before shutting down", default=20)
	parser.add_argument('--firefox_args', nargs='*', help="additional arguments to firefox (without -)", default=[])
	args = parser.parse_args()

	firefox = args.firefox
	if firefox == None:
		try:
			firefox = os.environ.get('TESTER_FIREFOX')
		except:
			raise Exception("must set TESTER_FIREFOX environment variable or pass in via argument")

	stackwalker = args.stackwalk_binary
	if stackwalker == None:
		try:
			stackwalker = os.environ.get('TESTER_STACKWALKER')
		except:
			raise Exception("must set TESTER_STACKWALKER environment variable or pass in via argument")
		
	symbolpath = args.symbol_path
	if symbolpath == None:
		try:
			symbolpath = os.environ.get('TESTER_SYMBOLPATH')
		except:
			symbolpath = None

	run_tests(firefox, args.tests, args.out_dir, stackwalker, symbolPath=symbolpath,
              templateProfile=args.template_profile,
              timeout=args.timeout, traceOnly=args.trace_only,
              ffargs=args.firefox_args)





