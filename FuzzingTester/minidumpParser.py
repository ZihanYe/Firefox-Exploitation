import os
import subprocess
import sys
import tempfile
import shutil

__all__ = ['parse_minidump_log', 'parse_minidump']

def parse_minidump_log(mozcrash, dumpDirectory, stackwalkBinary, symbolPath, logfile, traceOnly=False, timeout=20):
	count = 0
	for file in os.listdir(dumpDirectory):
		if file.endswith(".dmp"):
			count += 1
	if count == 0:
		raise Exception("no minidump file found")
	elif count > 0:
		raise Exception("multiple minidump files found")

	success, trace = parse_minidump(mozcrash, dumpDirectory, stackwalkBinary, symbolPath, traceOnly, timeout)
	if success:
		f = open(logfile, "w")
		f.write(trace)
		f.close()
	else:
		raise Exception("fail to parse minidump")

def parse_minidump(mozcrash, dumpDirectory, stackwalkBinary, symbolPath, traceOnly=False, timeout=20):
	# run mozcrash
	dumpcmd = "python " + mozcrash + " --stackwalk-binary " + os.path.abspath(stackwalkBinary) + " " + dumpDirectory + " " + symbolPath
	print("========== executing command: "+ dumpcmd)
	dumpproc = subprocess.Popen(dumpcmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	try:
		outs, errs = dumpproc.communicate(timeout=timeout)
	except subprocess.TimeoutExpired:
		dumpproc.kill()
		outs,errs = proc.communicate()
	output = outs.decode('utf-8', "backslashreplace")
	print("========== ERROR: \n" + errs.decode('utf-8', "backslashreplace"))
	# log stacktrace to file
	if traceOnly:
		# extract trace out of outs
		success, trace = extract_trace(output)
	else:
		trace = output
		success = True
	return success, trace


def extract_trace(output):
	lines = output.split('\n')
	trace = ""
	i = 0
	done = False
	while i < len(lines) and not done:
		line = lines[i]
		if line.strip().startswith("Thread"):
			if line.find("crashed") > -1:
				# this thread crashed
				count = 0
				i += 1
				while i < len(lines) and not lines[i].startswith("Thread") and lines[i].strip() != "\n":
					line = lines[i].strip()
					if line.startswith(str(count)):
						frame = line[(line.find(" ")+1):]
						if not frame.endswith('\n'):
							frame += '\n'
						trace += frame
						count += 1
					i += 1
				done = True
		i += 1
	if not done:
		print("WARNING: a crashed thread is not found in the minidump")
	return done, trace

if __name__ == '__main__':
	import argparse
	parser = argparse.ArgumentParser()
	parser.add_argument('dumpDir', help="path to directory containing minidump files")
	parser.add_argument('logfile', help="path to output file")
	parser.add_argument('--stackwalk_binary', help="path to minidump_stackwalker; if not specified, must be set in TESTER_STACKWALKER environment variable")
	parser.add_argument('--symbol_path', help="path to symbol; if not specified, must be specified by environment variable TESTER_SYMBOLPATH")
	parser.add_argument('--mozcrash', help="path to mozcrash; if not specified, must be specified by environment variable TESTER_MOZCRASH")
	parser.add_argument('--trace-only', action='store_true', help="store only stack trace (no register values, stack content etc")
	parser.add_argument('--timeout', type=int, help="maximum time allowed for running firefox before shutting down", default=20)
	args = parser.parse_args()

	if args.mozcrash == None:
		try:
			mozcrashPath = os.environ.get('TESTER_MOZCRASH')
		except:
			raise Exception("TESTER_MOZCRASH must be specified or --mozcrash must be specified")
	else:
		mozcrashPath = args.mozcrash

	stackwalker = args.stackwalk_binary
	if stackwalker == None:
		try:
			stackwalker = os.environ.get('TESTER_STACKWALKER')
		except:
			raise Exception("must set TESTER_STACKWALKER environment variable or pass in via argument")

	symbolpath = args.symbol_path
	if symbolpath == None:
		try:
			symbolpath = os.environ.get('TESTER_SYMBOLPATH')
		except:
			raise Exception("must set TESTER_SYMBOLPATH environment variable or pass in via argument")

	parse_minidump_log(mozcrashPath, args.dumpDir, stackwalker, symbolpath, args.logfile, traceOnly=args.trace_only, timeout=args.timeout)


