'''
Helper functions
'''
import os
import tempfile
import shutil
import time

__all__ = ("create_profile", "get_log_file", "test_crashed")

def create_profile(prefs_js=None, usr_js = None, template=None, tmpdir=None):
	"""
	Create a profile to be used with Firefox

	@type prefs_js: String
	@param prefs_js: Path to a prefs.js file to install in the Firefox profile.

	@type usr_js: String
	@param usr_js: Path to a user.js file to install in the Firefox profile.

	@type template: String
	@param template: Path to an existing profile directory to use. (will copy prefs.js and user.js)

	@rtype: String
	@return: Path to directory to be used as a profile
	"""
	profile = tempfile.mkdtemp(prefix="pref_", dir=tmpdir)

	if template is not None:
		# shutil.rmtree(profile) # reuse the directory name
		if not os.path.isdir(template):
			raise IOError("Cannot find template profile: %r" % template)
		# shutil.copytree(template, profile, symlinks=True)
		pref = os.path.join(template, "prefs.js")
		if not os.path.isfile(pref):
			raise Exception("template profile folder must contain at least prefs.js")
		shutil.copyfile(pref, os.path.join(profile, "prefs.js"))
		usr = os.path.join(template, "user.js")
		if os.path.isfile(usr):
			shutil.copyfile(usr, os.path.join(profile, "user.js"))
	elif prefs_js is not None:
		if not os.path.isfile(prefs_js):
			shutil.rmtree(profile, True) # clean up on failure
			raise IOError("prefs.js file does not exist: %r" % prefs_js)
		shutil.copyfile(prefs_js, os.path.join(profile, "prefs.js"))
		if usr_js is not None and os.path.isfile(prefs_js):
			shutil.copyfile(usr_js, os.path.join(profile, "user.js"))

	# times.json only needs to be created when using a custom pref.js
	times_json = os.path.join(profile, "times.json")
	if not os.path.isfile(times_json):
		with open(times_json, "w") as times_fp:
			times_fp.write('{"created":%d}' % (int(time.time()) * 1000))

	return profile

def get_log_file(test, logdir):
	fn = os.path.basename(test)
	return os.path.join(logdir, fn.replace(".html", "_out.txt"))

def test_crashed(test, usedMinidump=True, profile=None, logdir=None):
	if usedMinidump:
		dumpDirectory = os.path.abspath(os.path.join(profile, "minidumps"))
		crashed = False
		if os.path.isdir(dumpDirectory):
			count = 0
			for file in os.listdir(dumpDirectory):
				if file.endswith(".dmp"):
					count += 1
			if count > 0:
				crashed = True
		return crashed
	else:
		logfile = get_log_file(test, logdir)
		return os.path.isfile(logfile)



