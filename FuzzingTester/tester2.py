'''
 For each file in tests, spawn a gdb child process: gdb /path/to/firefox/binary and when crash happens, log the backtrace to file

'''
import os
import subprocess
import sys
from time import sleep
import tempfile
import shutil
from helper import (create_profile)

def main():
	'''
	 python tester.py /path/to/firefox/binary (non-ASAN-build)
	 				  --profile /path/to/profile 
	 				  --default-profile /path/to/pref.js
	 				  --customize-profile /path/to/user.js
	 				  --tests /path/to/test/cases 
	 				  [--log /path/to/output/directory]
	 				  [--timeout 30]
	'''
	ff = sys.argv[1]
	print("run Firefox on "+ ff)
	testdir = ''
	outdir = ''
	tempprefdir = ''
	defaultpref = ''
	customizepref = ''
	TIMEOUT = 20
	index = 2
	while index < len(sys.argv):
		if sys.argv[index] == '--tests':
			testdir = sys.argv[index + 1]
		elif sys.argv[index] == '--log':
			outdir = sys.argv[index+1]
		elif sys.argv[index] == '--profile':
			tempprefdir = sys.argv[index+1]
		elif sys.argv[index] == '--default-profile':
			defaultpref = sys.argv[index+1]
		elif sys.argv[index] == '--customize-profile':
			customizepref = sys.argv[index+1]
		elif sys.argv[index] == '--timeout':
			TIMEOUT = int(sys.argv[index+1])
		else:
			raise Exception("invalid argument")
		index = index +2
	
	if testdir == '':
		raise Exception("test cases directory should be specified")

	# working dir
	workingdir = os.environ['TESTER_WORKDIR']
	# create tmp working sub-directory
	tempworkingdir = tempfile.mkdtemp(prefix="run_")

	prefdir = os.path.join(tempworkingdir, "pref")
	if not os.path.isdir(prefdir):
		os.makedirs(prefdir)
	print("save pref under directory " + prefdir)

	if outdir == '':
		outdir = os.path.join(workingdir, "out")
		os.makedirs(outdir)
	if len(os.listdir(outdir)) > 0:
		raise Exception("output directory must be empty")

	nofiles = len(os.listdir(testdir))
	print(str(nofiles) + " to test")
	count = 0

	# timeout test cases log:
	timeoutlog = open(os.path.join(outdir, "timeoutTests.txt"), "w+")
	timeoutlog.write("All test cases that was stopped due to timeout: \n")

	for file in os.listdir(testdir):
		if not file.endswith('.html'):
			continue
		fileName = file.split('.')[0]
		os.environ['TESTER_TESTCASE'] = os.path.join(testdir, file)
		logfile = fileName + '_out.txt'
		os.environ['TESTER_LOGFILE'] = os.path.join(outdir, logfile)

		# create profile
		if tempprefdir != '':
			profile = create_profile(template=tempprefdir, tmpdir=prefdir)
		elif defaultpref != '':
			profile = create_profile(prefs_js=defaultpref, usr_js=customizepref ,tmpdir=prefdir)
		else:
			profile = create_profile(prefs_js=os.path.join(workingdir, "default_pref.js"), tmpdir=prefdir)
		print("running using profile "+ profile)
		os.environ['TESTER_PREFDIR'] = profile

		# call gdb
		print("================== Testing with exploitation:" + file)
		cmd = "gdb -batch " + ff + " -x " + workingdir + "gdbtestercmd.gdb"
		print("================== Executing Command: " + cmd)
		proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		try:
		    outs, errs = proc.communicate(timeout=TIMEOUT)
		except subprocess.TimeoutExpired:
		    proc.kill()
		    timeoutlog.write(file + " \n")
		    print("==== timeout")
		    outs, errs = proc.communicate()
		print("================== killed process")
		# print(outs.decode('utf-8'))
		print(errs.decode('utf-8'))
		# remove temp profile 
		shutil.rmtree(profile, True)
		count += 1
		print(str(count) + "/" + str(nofiles) + " done.")

	timeoutlog.close()
	shutil.rmtree(tempworkingdir, True)
	print("DONE testing all files in " + testdir)

if __name__ == '__main__':
    main()


		