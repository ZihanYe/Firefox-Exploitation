import os

__all__ = ["compare"]

def match(pocCallStack, testCallStack,constraints):
	return pocCallStack == testCallStack

def subseq_match(pocCallStack, testCallStack, constraints):
	# f pocCallStack is a subsequence of testCallStack
	size = len(pocCallStack)
	index = 0
	while index + size <= len(testCallStack):
		if testCallStack[index] == pocCallStack[0]:
			if testCallStack[index: index+size] == pocCallStack:
				return True
		index += 1
	return False

def prefix(pocCallStack, testCallStack, constraints):
	# return true if pocCallStack is a prefix of testCallStack
	if len(testCallStack) < len(pocCallStack):
		return False
	return testCallStack[: len(pocCallStack)] == pocCallStack

def suffix(pocCallStack, testCallStack, constraints):
	# return true if pocCallStack is a suffix of testCallStack
	if len(testCallStack) < len(pocCallStack):
		return False
	return testCallStack[-len(pocCallStack):] == pocCallStack

def compare(pocCallStack, testCallStack, constraints=None):
	if not constraints == None:
		mode = constraints.get('mode', 'match')
		if 'trimNonFunctionCall' in constraints:
			pocCallStack = list(filter(lambda x: x.find('+') > -1, pocCallStack))
			testCallStack = list(filter(lambda x: x.find('+') > -1,testCallStack))
		if 'trimEmptyStr' in constraints:
			pocCallStack = list(filter(lambda x: len(x)>0, pocCallStack))
			testCallStack = list(filter(lambda x: len(x)>0,testCallStack))
		if 'start' in constraints and 'end' in constraints:
			pocCallStack = pocCallStack[int(constraints['start']): int(constraints['end'])]
		elif 'start' in constraints:
			pocCallStack = pocCallStack[int(constraints['start']):]
		elif 'end' in constraints:
			pocCallStack = pocCallStack[:int(constraints['end'])]
	else:
		mode = 'match'

	if mode == 'match':
		return match(pocCallStack, testCallStack, constraints)
	elif mode == 'subseq_match':
		return subseq_match(pocCallStack,testCallStack, constraints)
	elif mode == 'prefix':
		return prefix(pocCallStack, testCallStack, constraints)
	elif mode == 'suffix':
		return suffix(pocCallStack, testCallStack, constraints)
	elif mode == 'prefix_or_irrelavent':
		return prefix(pocCallStack, testCallStack, constraints) or not subseq_match(pocCallStack,testCallStack, constraints)
	else:
		raise Exception("[compare] Invalid compare mode")
	return

if __name__ == '__main__':
	import argparse
	import textwrap
	parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, epilog=textwrap.dedent('''\
         filter_constraints:
         	mode: mode of comparision between trace A of Poc and trace B of test case:
         			match: they are exactly the same
         			subseq_match: A is a subsequence of B
         			prefix: A is a prefix of B
         			suffix: A is a suffix of B
         	start/end: define a segment of trace of Poc that we care about
         	trimNonFunctionCall: non function call in traces will be ignored
         example: --filter_constraint mode=match:start=1:end=5:trimNonFunctionCall
         '''))
	parser.add_argument('pocCallStack', help="call stack of poc (compare against)")
	parser.add_argument('testCallStack', help="call stack of test (the one being compared)")
	parser.add_argument('--filter_constraints', help="any contraint applied when matching stack traces, specified by a string")
	args = parser.parse_args()

	if not os.path.isfile(args.pocCallStack):
		raise Exception("pocCallStack: No such file")
	pocCallStack = [line.rstrip('\n').lstrip() for line in open(args.pocCallStack)]

	if not os.path.isfile(args.testCallStack):
		raise Exception("testCallStack: No such file")
	testCallStack = [line.rstrip('\n').lstrip() for line in open(args.testCallStack)]

	constraints = None
	if not args.filter_constraints == None:
		print("Filtering each test case with constraints: \n")
		cons = args.filter_constraints.split(':')
		constraints = {}
		for c in cons:
			att = c.split('=')
			if len(att) == 2:
				constraints[att[0]] = att[1]
				print(att[0] + ": " + constraints[att[0]] + "\n")
			elif len(att) == 1:
				constraints[att[0]] = True
				print(att[0] + ": " + str(constraints[att[0]]) + "\n")
			else:
				raise Exception("invalid format of --contraints argument")
			

	res = compare(pocCallStack, testCallStack, constraints)
	if res:
		print("========== Matched!")
	else:
		print("========== Not matched!")

