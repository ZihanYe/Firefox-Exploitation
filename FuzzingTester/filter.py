import sys
import os
import subprocess
import tempfile
import shutil
from helper import (create_profile, test_crashed, get_log_file)
from minidumpParser import (parse_minidump)
from minidumpCollector import (run_test, run_tests)
from gdbTestRunner import (run_gdb_test, run_gdb_tests)
from traceComparator import (compare)

def formatTrace(trace, fromMinidump):
	# extract trace of function calls
	callstack = []
	if not fromMinidump:
		index = 0
		for line in trace:
			if line.lstrip().find("#" + str(index)) > -1:
				start = line.find(" in ")
				end = line.find("(")
				if start == -1 or end == -1:
					return False, callstack # report not correctly formatted 
				else:
					start += 4
					func = line[start:end]
					callstack.append(func)
				index += 1
	else:
		callstack = [line.lstrip().rstrip() for line in trace]
	return True, callstack

def checkSameTrace(pocCallstack, fromMinidump=True, trace=None, traceFile=None, constraints=None):
	# check call stack of trace against the given call stack
	if trace == None and traceFile != None:
		lines = [line.rstrip('\n') for line in open(traceFile)]
	elif trace != None:
		lines = trace.split('\n')
	else:
		raise Exception("[checkSameTrace] at least one of trace and traceFile need to be specified")
	formatted, callstack = formatTrace(lines, fromMinidump)
	if not formatted:
		return -1
	if compare(pocCallstack, callstack, constraints):
		return 1
	return 0

def filter(pocCrashTrace, tests, crashTraces, outdir, fromMinidump=True, logOrCopy=True, constraints=None):
	"""
	Given stack trace at the point of crashing of original Poc, directory of tests and there corresponding stakc traces, filter out those that are different
	"""
	if isinstance(pocCrashTrace, list):
		pocCallstack = pocCrashTrace
	else:
		if os.path.isfile(pocCrashTrace):
			lines = [line.rstrip('\n') for line in open(pocCrashTrace)]
		else:
			lines = pocCrashTrace.split('\n')
		formatted, pocCallstack = formatTrace(lines, fromMinidump)
		if not formatted:
			raise Exception("stack trace of poc not valid")

	if logOrCopy:
		undecided = open(os.path.join(outdir, "undecided.txt"), "a")
		diverging = open(os.path.join(outdir, "diverging.txt"), "a")
	else:
		undecided = os.path.join(outdir, "undecided")
		diverging = os.path.join(outdir, "diverging")
		os.makedirs(undecided)
		os.makedirs(diverging)
		tests = os.listdir(testcases)

	count = 0
	for file in os.listdir(crashTraces):
		if not file.endswith("_out.txt"):
			continue
		print("============== Checking "+ file)
		name = os.path.basename(file)
		test = name.replace("_out.txt", ".html")
		result = checkSameTrace(pocCallstack, fromMinidump, traceFile=os.path.join(crashTraces,file), constraints=constraints)
		if result <= 0 and not os.path.isfile(os.path.join(tests, test)):
			print(test + " not found in " + tests)
		elif result == -1:
			if logOrCopy:
				undecided.write(test + "\n")
			else:
				copyfile(os.path.join(tests, test), undecided)
		elif result == 0:
			count += 1
			print("============== "+ file + " not matched \n")
			if logOrCopy:
				diverging.write(test + "\n")
			else:
				copyfile(os.path.join(tests, test), diverging)
	if logOrCopy:
		undecided.close()
		diverging.close()
	print("================ "+ str(count) + " tests crashed at a different location")
	return count


def run_tests_filter(poc, tests, firefox, outdir, useMinidump=True, stackwalker=None, symbolPath=None, templateProfile=None, timeout=20, ffargs=[], logOrCopy=True, constraints=None):
	# validation
	try:
		WORKDIR = os.environ.get('TESTER_WORKDIR')
	except:
		raise Exception("No environment variable: TESTER_WORKDIR")

	try:
		MOZCRASH = os.environ.get('TESTER_MOZCRASH')
	except:
		raise Exception("No environment variable: TESTER_MOZCRASH")

	# validation
	if not os.path.isfile(poc):
		raise Exception("Poc: No such file: "+ poc)
	if not os.path.isfile(firefox):
		raise Exception("Firefox binary: No such file: " + firefox)
	if not os.path.isdir(tests):
		raise Exception("Test directory: No such directory: "+ tests)
	if not os.path.isdir(outdir):
		raise Exception("Output directory: No such directory: "+ outdir)
	if len(os.listdir(outdir)) > 0:
		raise Exception("output directory must be empty")
	
	if useMinidump:
		if stackwalker == None or not os.path.isfile(stackwalker):
			raise Exception("minidump_stackwalker: None or no such file: "+ stackwalker)

	if templateProfile == None:
		templateProfile = os.path.join(WORKDIR, "profile")
	elif not os.path.isdir(templateProfile):
		raise Exception("Profile directory: No such directory: "+ profile)

	# create tmp working sub-directory
	tempworkingdir = tempfile.mkdtemp(prefix="run_")

	prefdir = os.path.join(tempworkingdir, "pref")
	if not os.path.isdir(prefdir):
		os.makedirs(prefdir)
	print("save pref under directory " + prefdir)

	# test poc
	# create profile
	profile = create_profile(template=templateProfile, tmpdir=prefdir)

	if useMinidump:
		outs, errs, timedout, jsError = run_test(firefox, os.path.abspath(poc), profile, timeout, ffargs)
		crashed = test_crashed(poc, usedMinidump=True, profile=profile)
		if not crashed:
			print("================ no crash reported when testing Poc"+ poc)
			return
		# parse minidump
		dumpDirectory = os.path.abspath(os.path.join(profile, "minidumps"))
		if symbolPath == None:
			symbolPath = os.abspath(firefox)
		getTrace, trace = parse_minidump(MOZCRASH, dumpDirectory, stackwalker, symbolPath, True, timeout)
		if not getTrace:
			print("=============== ERROR when parsing minidump of Poc")
			return
		success, pocCallstack = formatTrace(trace.split('\n'), useMinidump)
	else:
		trace = get_log_file(poc, outdir)
		outs, errs, timedout = run_gdb_test(firefox, os.path.abspath(poc), trace, profile, timeout, ffargs)
		crashed = test_crashed(poc, usedMinidump=False, logdir=outdir)
		if not crashed:
			print("================ no crash reported when testing Poc"+ poc)
			return
		# get output
		success, pocCallstack = formatTrace([line.rstrip('\n') for line in open(trace)])
	if not success:
		print("=============== ERROR when getting stack trace of Poc")
		return

	print("================ call stack trace of Poc:", '\n'.join(pocCallstack))
	# deal with tests
	# create tmp output directory
	tempworkingdir = tempfile.mkdtemp(prefix="run_")
	# run tests
	if useMinidump:
		timeoutlogPath, jsErrlogPath, parsingErrlogPath, nocrashlogPath = run_tests(firefox, tests, tempworkingdir, stackwalker, symbolPath, templateProfile, timeout, True, ffargs)
		# copy over logs
		shutil.copyfile(timeoutlogPath, os.path.join(outdir, "timeoutTests.txt"))
		shutil.copyfile(jsErrlogPath, os.path.join(outdir, "jsErrorTests.txt"))
		shutil.copyfile(parsingErrlogPath, os.path.join(outdir, "minidumpErr.txt"))
		shutil.copyfile(nocrashlogPath, os.path.join(outdir, "nocrashTests.txt"))
	else:
		timeoutlogPath, jsErrlogPath = run_gdb_tests(firefox, tests, tempworkingdir, templateProfile, timeout, ffargs)
		shutil.copyfile(timeoutlogPath, os.path.join(outdir, "timeoutTests.txt"))
		shutil.copyfile(jsErrlogPath, os.path.join(outdir, "jsErrorTests.txt"))

	# check
	n = filter(pocCallstack, tests, firefox, tempworkingdir, outdir, useMinidump, logOrCopy, constraints)

	# delete tempworkingdir
	shutil.rmtree(tempworkingdir, True)

	print("DONE testing and filtering all HTML files in " + tests)
	print("See " + outdir + " for results")


if __name__ == '__main__':
	import argparse
	import textwrap
	parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, epilog=textwrap.dedent('''\
         filter_constraints:
         	mode: mode of comparision between trace A of Poc and trace B of test case:
         			match: they are exactly the same
         			subseq_match: A is a subsequence of B
         			prefix: A is a prefix of B
         			suffix: A is a suffix of B
         	start/end: define a segment of trace of Poc that we care about
         	trimNonFunctionCall: non function call in traces will be ignored
         example: --filter_constraint mode=match:start=1:end=5:trimNonFunctionCall
         '''))
	parser.add_argument('tests', help="path to directory containing all tests to run")
	parser.add_argument('out_dir', help="path to output directory")
	parser.add_argument('--poc', help="path to Poc file")
	parser.add_argument('--poc_crash', help="path to crashing trace of Poc;")
	parser.add_argument('--test_crashes', help="path to diretory containing crashing traces of tests")
	parser.add_argument('--firefox', help="path to firefox binary; if not specified, must be set in TESTER_FIREFOX environment variable")
	parser.add_argument('--use_minidump', action='store_true', help="use minidump instead of gdb (require stackwalk_binary")
	parser.add_argument('--stackwalk_binary', help="path to minidump_stackwalker; if not specified, must be set in TESTER_STACKWALKER environment variable")
	parser.add_argument('--symbol_path', help="path to symbol for firefox")
	parser.add_argument('--template_profile', help="path to directory used as template for profile")
	parser.add_argument('--log_tests', action='store_true', help="log test names instead of copy over")
	parser.add_argument('--timeout', type=int, help="maximum time allowed for running firefox before shutting down", default=20)
	parser.add_argument('--firefox_args', nargs='*', help="additional arguments to firefox (without -)", default=[])
	parser.add_argument('--filter_constraints', help="any contraint applied when matching stack traces, specified by a string")
	args = parser.parse_args()

	constraints = None
	if not args.filter_constraints == None:
		print("Filtering each test case with constraints: \n")
		cons = args.filter_constraints.split(':')
		constraints = {}
		for c in cons:
			att = c.split('=')
			if len(att) == 2:
				constraints[att[0]] = att[1]
				print(att[0] + ": " + constraints[att[0]] + "\n")
			elif len(att) == 1:
				constraints[att[0]] = True
				print(att[0] + ": " + str(constraints[att[0]]) + "\n")
			else:
				raise Exception("invalid format of --contraints argument")
			
	if args.poc_crash != None and args.test_crashes != None:
		filter(args.poc_crash, args.tests, args.test_crashes, args.out_dir, args.use_minidump, args.log_tests, constraints)
	else:
		if args.poc == None:
			raise Exception("poc not specified")
		firefox = args.firefox
		if firefox == None:
			try:
				firefox = os.environ.get('TESTER_FIREFOX')
			except:
				raise Exception("must set TESTER_FIREFOX environment variable or pass in via argument")

		stackwalker = args.stackwalk_binary
		if stackwalker == None:
			try:
				stackwalker = os.environ.get('TESTER_STACKWALKER')
			except:
				raise Exception("must set TESTER_STACKWALKER environment variable or pass in via argument")
		
		run_tests_filter(args.poc, args.tests, firefox, args.out_dir, args.use_minidump, stackwalker, args.symbol_path, args.template_profile, args.timeout, args.ffargs, args.log_tests, constraints)


