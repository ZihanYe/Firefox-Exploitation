import os
import subprocess
import sys
import gdb

class FuzzTester:
	def __init__(self, testcases, workd, logd=None, prefd=None):
		self.testdir = testcases
		self.workdir = workd
		self.logdir = logd
		self.prefdir = prefd

		if not os.path.isdir(self.testdir):
			raise Execption("testcases directory: no such directory")
		if not os.path.isdir(self.workdir):
			raise Execption("working directory: no such directory")

		if self.logdir == None:
			self.logdir = os.path.join(self.workdir, "out")
			os.makedirs(self.logdir)
		else:
			if not os.path.isdir(self.logdir):
				raise Execption("log directory: no such directory")
		self.index = 0
		self.files = os.listdir(testcases)
		self.filenum = len(self.files)
		self.currentTest = ''

	def getNextFile(self):
		while self.index < self.filenum and not self.files[self.index].endswith(".html"):
			self.index += 1

		if (self.index >= self.filenum):
			return None
		else:
			fn = self.files[self.index]
			self.index += 1
			self.currentTest = os.path.join(self.testdir, fn)
			return self.currentTest


def getLogFile(test, logdir):
	fn = os.path.basename(test)
	return os.path.join(logdir, fn.replace(".html", "_out.txt"))

def event_handler(event):
	if hasattr(event, 'breakpoints'):
		print("======= test case finish loading")
		test_file()
	elif event.stop_signal != 'SIGINT':
		logfile = getLogFile(ft.currentTest, logdir)
		gdb.execute("set logging file " + logfile)
		gdb.execute("set logging redirect on")
		gdb.execute("set logging on")
		gdb.write("\n[CRASH] SIG " + event.stop_signal)
		gdb.execute("bt 5")
		gdb.execute("set logging off")
		test_file()

def test_file():
	test = ft.getNextFile()
	if test == None:
		print("======== all test cases done")
		gdb.execute("q")
		return
	
	proccmd = cmd
	proccmd += " --safe-mode --new-tab file://" + test
	print("======== testcase " + str(ft.index-1) + "/" + str(ft.filenum) + ": "+ proccmd)
	gdb.execute(proccmd)
	gdb.execute("run")


testcases = os.environ['TESTER_TESTCASES']
logdir = os.environ['TESTER_LOGDIR']
prefdir = os.environ['TESTER_PREFDIR']
workdir = os.environ['TESTER_WORKDIR']

ft = FuzzTester(testcases, workd=workdir, logd=logdir, prefd=prefdir)

cmd = "set args -no-remote -headless"
if prefdir is not None:
	cmd += " --profile " + ft.prefdir

gdb.execute("set disable-randomization off")
gdb.execute("set confirm off")
gdb.execute("set pagination off")
gdb.execute("set breakpoint pending on")
gdb.execute("break js::math_cos")
gdb.events.stop.connect(event_handler)
test_file()
