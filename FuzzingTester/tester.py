'''
 For each file in tests, spawn a child process: /path/to/firefox/binary and log the error output

'''
import os
import subprocess
import sys
from time import sleep
import tempfile
from helper import (create_profile)

def main():
	'''
	 python tester.py /path/to/firefox/binary 
						--profile /path/to/profile 
						--default-profile /path/to/pref.js
	 				  	--customize-profile /path/to/user.js
						--tests /path/to/test/cases 
						[--log /path/to/output/directory]
	 				  	[--timeout 30]
	'''
	ff = sys.argv[1]
	testdir = ''
	outdir = ''
	tempprefdir = ''
	defaultpref = ''
	customizepref = ''
	TIMEOUT = 15
	index = 2
	while index < len(sys.argv):
		if sys.argv[index] == '--tests':
			testdir = sys.argv[index + 1]
		elif sys.argv[index] == '--log':
			outdir = sys.argv[index+1]
		elif sys.argv[index] == '--profile':
			prefdir = sys.argv[index+1]
		elif sys.argv[index] == '--default-profile':
			defaultpref = sys.argv[index+1]
		elif sys.argv[index] == '--customize-profile':
			customizepref = sys.argv[index+1]
		elif sys.argv[index] == '--timeout':
			TIMEOUT = int(sys.argv[index+1])
		else:
			raise Exception("invalid argument")
		index = index +2
	
	if testdir == '':
		raise Exception("test cases directory should be specified")

	# working dir
	workingdir = os.environ['TESTER_WORKDIR']
	if outdir == '':
		outdir = os.path.join(workingdir, "out")
		os.makedirs(outdir)
	if len(os.listdir(outdir)) > 0:
		raise Exception("output directory must be empty")

	prefdir = os.path.join(workingdir, "pref")
	print("save pref under directory " + prefdir)
	os.makedirs(prefdir)

	cmd = ff
	cmd += " -no-remote -headless"

	nofiles = len(os.listdir(testdir))
	print(str(nofiles) + " to test")
	count = 0
	for file in os.listdir(testdir):
		proccmd = cmd
		if not file.endswith('.html'):
			continue

		# create profile
		if tempprefdir != '':
			profile = create_profile(template=tempprefdir, tmpdir=prefdir)
		elif defaultpref != '':
			profile = create_profile(prefs_js=defaultpref, usr_js=customizepref ,tmpdir=prefdir)
		else:
			profile = create_profile(prefs_js=os.path.join(workingdir, "default_pref.js"), tmpdir=prefdir)
		print("running using profile "+ profile)
		proccmd += " --profile " + profile

		fileName = file.split('.')[0]
		fileurl = "file://" + os.path.join(testdir, file)
		print("================== Testing with exploitation:" + fileurl)
		proccmd += " " + fileurl
		# output:
		outfile = os.path.join(outdir, fileName + "_out.txt")

		print("================== Executing Command: " + proccmd)
		proc = subprocess.Popen(proccmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		try:
		    outs, errs = proc.communicate(timeout=TIMEOUT)
		except subprocess.TimeoutExpired:
		    proc.kill()
		    outs, errs = proc.communicate()
		print("================== killed process")
		out = open(outfile, 'w')
		out.write(errs.decode('utf-8'))
		out.close()
		count += 1
		print(str(count) + "/" + str(nofiles) + " done.")

	print("DONE testing all files in " + testdir)

if __name__ == '__main__':
    main()