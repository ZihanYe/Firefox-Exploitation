'''
 For each file in tests, spawn a gdb child process: gdb /path/to/firefox/binary 
 and when crash happens, log the backtrace to file

'''
import os
import subprocess
import sys
from time import sleep
import tempfile
import shutil
from helper import (create_profile)

def run_gdb_tests(firefox, tests, outdir, templateProfile=None, timeout=20, ffargs=[]):
	try:
		WORKDIR = os.environ.get('TESTER_WORKDIR')
	except:
		raise Exception("No environment variable: TESTER_WORKDIR")

	# validation
	if not os.path.isfile(firefox):
		raise Exception("Firefox binary: No such file: " + firefox)
	if not os.path.isdir(tests):
		raise Exception("Test directory: No such directory: "+ tests)
	if not os.path.isdir(outdir):
		raise Exception("Output directory: No such directory: "+ outdir)
	if len(os.listdir(outdir)) > 0:
		raise Exception("output directory must be empty")
	if templateProfile == None:
		templateProfile = os.path.join(WORKDIR, "profile")
	elif not os.path.isdir(templateProfile):
		raise Exception("Profile directory: No such directory: "+ profile)

	# create tmp working sub-directory
	tempworkingdir = tempfile.mkdtemp(prefix="run_")
	prefdir = os.path.join(tempworkingdir, "pref")
	if not os.path.isdir(prefdir):
		os.makedirs(prefdir)
	print("save pref under directory " + prefdir)

	allfiles = os.listdir(tests)
	testcases = list(filter(lambda f: f.endswith('.html'),allfiles))
	nofiles = len(testcases)
	print(str(nofiles) + " to test")
	count = 0

	# timeout test cases log:
	timeoutlog = open(os.path.join(outdir, "timeoutTests.txt"), "a")
	timeoutlog.write("All test cases that was stopped due to timeout: \n")

	for file in testcases:
		if not file.endswith('.html'):
			continue
		fileName = file.replace('.html', '')
		logfile = os.path.join(outdir, fileName+'_out.txt')

		os.environ['TESTER_TESTCASE'] = os.path.abspath(os.path.join(tests, file))
		os.environ['TESTER_LOGFILE'] = logfile

		# create profile
		profile = create_profile(template=templateProfile, tmpdir=prefdir)
		print("================== running using profile "+ profile)
		os.environ['TESTER_PREFDIR'] = profile

		# call gdb
		print("================== Testing with exploitation:" + file)
		cmd = "gdb -batch " + ff + " -x " + workingdir + "gdbtestercmd.gdb"
		print("================== Executing Command: " + cmd)
		proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		try:
		    outs, errs = proc.communicate(timeout=timeout)
		except subprocess.TimeoutExpired:
		    proc.kill()
		    timeoutlog.write(file + " \n")
		    print("================== TIMEOUT, killed process")
		    outs, errs = proc.communicate()

		print("========== ERROR: \n" + errs.decode('utf-8'))
		# remove temp profile 
		shutil.rmtree(profile, True)
		count += 1
		print(str(count) + "/" + str(nofiles) + " done.")

	timeoutlog.close()
	shutil.rmtree(tempworkingdir, True)
	print("DONE testing all files in " + testdir)

if __name__ == '__main__':
	import argparse
	parser = argparse.ArgumentParser()
	parser.add_argument('tests', help="path to directory containing all tests to run")
	parser.add_argument('out_dir', help="path to output directory")
	parser.add_argument('--firefox', help="path to firefox binary; if not specified, must be set in TESTER_FIREFOX environment variable")
	parser.add_argument('--template_profile', help="path to directory used as template for profile")
	parser.add_argument('--timeout', type=int, help="maximum time allowed for running firefox before shutting down", default=20)
	parser.add_argument('--firefox_args', nargs='*', help="additional arguments to firefox (without -)", default=[])
	args = parser.parse_args()

	firefox = args.firefox
	if firefox == None:
		try:
			firefox = os.environ.get('TESTER_FIREFOX')
		except:
			raise Exception("must set TESTER_FIREFOX environment variable or pass in via argument")

	run_gdb_tests(firefox, args.tests, args.out_dir, templateProfile=args.template_profile, timeout=args.timeout, ffargs=args.firefox_args)


		