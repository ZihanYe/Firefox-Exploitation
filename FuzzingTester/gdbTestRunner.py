'''
 For each file in tests, spawn a gdb child process: gdb /path/to/firefox/binary
 and when crash happens, log the backtrace to file

'''
import os
import subprocess
import sys
from time import sleep
import tempfile
import shutil
from helper import (create_profile, get_log_file)

__all__ = ['run_gdb_tests', 'run_gdb_test']

def run_gdb_test(firefox, test, logfile, profile, timeout=20, ffargs=[]):
	try:
		WORKDIR = os.environ.get('TESTER_WORKDIR')
	except:
		raise Exception("No environment variable: TESTER_WORKDIR")

	if not test.endswith('.html'):
		raise Exception("[run_gdb_test] test is not an HTML file")

	os.environ['TESTER_TESTCASE'] = test
	fileUrl = "file://" + test
	os.environ['TESTER_LOGFILE'] = logfile

	print("================== running using profile "+ profile)
	os.environ['TESTER_PREFDIR'] = profile

	# call gdb
	print("================== Testing with exploitation:" + test)
	cmd = "gdb -batch " + firefox + " -x " + WORKDIR + "gdbtestercmd.gdb"
	print("================== Executing Command: " + cmd)
	timedout = False
	jsError = False
	proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	try:
	    outs, errs = proc.communicate(timeout=timeout)
	except subprocess.TimeoutExpired:
	    proc.kill()
	    timedout = True
	    print("================== TIMEOUT, killed process")
	    outs, errs = proc.communicate()
	    jsError = errs.decode('utf-8', "backslashreplace").find("JavaScript error: " + fileUrl) > -1
	return outs, errs, timedout, jsError

def run_gdb_tests(firefox, tests, outdir, templateProfile=None, timeout=20, ffargs=[]):
	try:
		WORKDIR = os.environ.get('TESTER_WORKDIR')
	except:
		raise Exception("No environment variable: TESTER_WORKDIR")

	# validation
	if not os.path.isfile(firefox):
		raise Exception("Firefox binary: No such file: " + firefox)
	if not os.path.isdir(tests):
		raise Exception("Test directory: No such directory: "+ tests)
	if not os.path.isdir(outdir):
		raise Exception("Output directory: No such directory: "+ outdir)
	if templateProfile == None:
		templateProfile = os.path.join(WORKDIR, "profile")
	elif not os.path.isdir(templateProfile):
		raise Exception("Profile directory: No such directory: "+ profile)

	# create tmp working sub-directory
	tempworkingdir = tempfile.mkdtemp(prefix="run_")
	prefdir = os.path.join(tempworkingdir, "pref")
	if not os.path.isdir(prefdir):
		os.makedirs(prefdir)
	print("save pref under directory " + prefdir)

	allfiles = os.listdir(tests)
	testcases = list(filter(lambda f: f.endswith('.html'),allfiles))
	nofiles = len(testcases)
	print(str(nofiles) + " to test")
	count = 0

	# timeout test cases log:
	timeoutlogPath = os.path.join(outdir, "timeoutTests.txt")
	timeoutlog = open(timeoutlogPath, "a")
	# test cases that contained js error:
	jsErrlogPath = os.path.join(outdir, "jsErrorTests.txt")
	jsErrlog = open(jsErrlogPath, "a")

	testedPath = os.path.join(outdir, "tested.txt")
	if os.path.isfile(testedPath):
		testedlog = open(testedPath, "r")
		content = testedlog.read()
		testedlog.close()
		tested = content.split('\n')
	else:
		tested = []

	testedlog = open(testedPath, "a")
	for file in testcases:
		if file in tested:
			continue
		test = os.path.abspath(os.path.join(tests, file))
		logfile = get_log_file(file, outdir)
		if (os.path.isfile(logfile)):
			count += 1
			print("========== output of "+ file + " exits, skipping...")
			continue
		# create profile
		profile = create_profile(template=templateProfile, tmpdir=prefdir)

		outs, errs, timedout, jsError = run_gdb_test(firefox, test, logfile, profile, timeout, ffargs)
		# print("========== ERROR: \n" + errs.decode('utf-8', "backslashreplace"))
		if timedout:
			timeoutlog.write(file + "\n")
		if jsError:
			jsErrlog.write(file + "\n")

		testedlog.write(file + "\n")
		# remove temp profile
		shutil.rmtree(profile, True)
		count += 1
		print(str(count) + "/" + str(nofiles) + " done.")

	timeoutlog.close()
	jsErrlog.close()
	testedlog.close()
	shutil.rmtree(tempworkingdir, True)
	print("DONE testing all files in " + tests)
	return timeoutlogPath, jsErrlogPath

if __name__ == '__main__':
	import argparse
	parser = argparse.ArgumentParser()
	parser.add_argument('tests', help="path to directory containing all tests to run, OR path to a single file")
	parser.add_argument('out_dir', help="path to output directory")
	parser.add_argument('--firefox', help="path to firefox binary; if not specified, must be set in TESTER_FIREFOX environment variable")
	parser.add_argument('--template_profile', help="path to directory used as template for profile")
	parser.add_argument('--timeout', type=int, help="maximum time allowed for running firefox before shutting down", default=45)
	parser.add_argument('--firefox_args', nargs='*', help="additional arguments to firefox (without -)", default=[])
	args = parser.parse_args()

	firefox = args.firefox
	if firefox == None:
		try:
			firefox = os.environ.get('TESTER_FIREFOX')
		except:
			raise Exception("must set TESTER_FIREFOX environment variable or pass in via argument")

	tests = args.tests
	tempdir = None
	if os.path.isfile(tests):
		# make a temp directory containing only one test
		# create tmp working sub-directory
		tempdir = tempfile.mkdtemp(prefix="testcase_")
		shutil.copyfile(tests, os.path.join(tempdir, os.path.basename(tests)))
		tests = tempdir

	run_gdb_tests(firefox, tests, args.out_dir, templateProfile=args.template_profile, timeout=args.timeout, ffargs=args.firefox_args)

	if tempdir != None:
		shutil.rmtree(tempdir, True)
