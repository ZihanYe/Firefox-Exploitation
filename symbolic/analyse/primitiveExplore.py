import angr
from colorama import Fore, Back, Style
from tabulate import tabulate

class PrimitiveExplore:
    def __init__(self, project, simgr, write_primitive = [], paths_to_write_primitive=0, control_hijack=[], paths_to_control_hijack=0):
        self.write_primitive = write_primitive
        self.paths_to_write_primitive = paths_to_write_primitive
        self.control_hijack = control_hijack
        self.paths_to_control_hijack = paths_to_control_hijack
        self.simgr = simgr
        self.proj = project
        self.listmap = {
            'W': self.write_primitive,
            'C': self.control_hijack,
            'A': self.simgr.active,
            # 'F': self.simgr.found,
            # 'U': self.simgr.unconstrained,
            'E': self.simgr.errored,
            # 'K': self.simgr.avoided,
        }

    def dump_stats(self):
        print("State stats:")
        print('*' * 100)
        table = []
        table.append(["write primitive (W)", len(self.listmap['W'])])
        table.append(["control_hijack (C)", len(self.listmap['C'])])
        table.append(["active (A)", len(self.listmap['A'])])
        # table.append(["found (F)", len(self.listmap['F'])])
        # table.append(["unconstrained (U)", len(self.listmap['U'])])
        table.append(["errored (E)", len(self.listmap['E'])])
        # table.append(["avoided (K)", len(self.listmap['K'])])
        print(tabulate(table, headers=["Type", "Count"]))
        print("paths to write primitive: ", self.paths_to_write_primitive)
        print("paths to control hijack: ", self.paths_to_control_hijack)

    def count_obj(self, s):
        return len(s.record.obj_mem)

    def sort_by_obj_count(self, type='W'):
        if type not in self.listmap:
            print(Fore.RED + "[-] Please specify the correct type" + Style.RESET_ALL)
            return
        self.listmap[type].sort(key=self.count_obj)

    def count_constraints(self, s):
        return len(s.solver.constraints)

    def sort_by_constraints(self,type='W'):
        if type not in self.listmap:
            print(Fore.RED + "[-] Please specify the correct type" + Style.RESET_ALL)
            return
        self.listmap[type].sort(key=self.count_constraints)

    def get_states(self, type='W', limit = 5):
        if type not in self.listmap:
            print(Fore.RED + "[-] Please specify the correct type" + Style.RESET_ALL)
            return

        n = min(len(self.listmap[type]), limit)
        return self.listmap[type][:n]

    def primitive_complexity(self,s):
        return len(s.record.obj_mem) + len(s.record.sym_call_ret_values)

    def prune_write_primitive(self):
        map = {}
        for w in self.listmap['W']:
            if w.addr in map:
                map[w.addr].append(w)
            else:
                map[w.addr] = [w]

        lst = []
        for addr in map:
            ps = map[addr]
            # ps.sort(key=self.primitive_complexity)
            lst.append(min(ps, key=self.primitive_complexity))
        lst.sort(key=self.count_constraints)
        return lst


    def prune_control_hijack(self):
        map = {}
        for c in self.listmap['C']:
            addr = c.record.primitive['call_from']
            if addr in map:
                map[addr].append(w)
            else:
                map[addr] = [w]

        lst = []
        for addr in map:
            ps = map[addr]
            # ps.sort(key=self.primitive_complexity)
            lst.append(min(ps, key=self.count_constraints))
        return lst
