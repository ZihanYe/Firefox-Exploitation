import angr
import logging
log = logging.getLogger("symbolic")

class StateContraints(angr.SimStatePlugin):
    def __init__(self, history= [],
                symbolic_pointer=[],
                unresolved_symbolic_pointer = [], obj_mem=[],
                sym_call_ret_values=[],
                had_write_primitive = False,
                had_control_hijack = False,
                progress = {}, latest_milestone = None):
        super(StateContraints, self).__init__()
        self.history = history
        self.symbolic_pointer = symbolic_pointer # pointers we can control
        self.unresolved_symbolic_pointer = unresolved_symbolic_pointer
        # primitive
        self.primitive = None
        self.had_write_primitive = had_write_primitive
        self.had_control_hijack = had_control_hijack
        # region of memory that are controlled object
        self.obj_mem = obj_mem
        self.sym_call_ret_values = sym_call_ret_values
        # progress
        self.progress = progress
        self.latest_milestone = latest_milestone

    @angr.SimStatePlugin.memo
    def copy(self, memo):
        return StateContraints(self.history.copy(),
                                self.symbolic_pointer.copy(),
                                self.unresolved_symbolic_pointer.copy(),
                                self.obj_mem.copy(),
                                sym_call_ret_values=self.sym_call_ret_values.copy(),
                                had_write_primitive = self.had_write_primitive,
                                had_control_hijack = self.had_control_hijack,
                                progress= self.progress, latest_milestone = self.latest_milestone)

    def merge(self, others, merge_conditions, common_ancestor=None):
        log.warning("Merge has not been implemented for record")
        return False

    def widen(self, others): # pylint: disable=unused-argument
        l.warning("Widening is not implemented for record")
        return False

    def append_history(self, history):
        self.history.append(history)

    def add_obj_mem(self, new_obj):
        self.obj_mem.append(new_obj)

    def add_symbolic_pointer(self, s, points_to):
        try:
            if not isinstance(s, int):
                self.unresolved_symbolic_pointer.append((s, points_to))
                return
            if not isinstance(points_to, int):
                points_to = None
            if (s, points_to) not in self.symbolic_pointer:
                self.symbolic_pointer.append((s,points_to))
        except:
            log.error("[-] WARNING Exception in add_symbolic_pointer")
            import IPython; IPython.embed()

    def check_inside_obj(self, addr):
        try:
            for (a,b) in self.obj_mem:
                if self.state.solver.eval(a <= addr) and self.state.solver.eval(b > addr):
                    return True
        except:
            log.error("[-] EXCEPTION during checking "+ str(addr)+ " is inside a controlled object or not")
        return False

    def check_inside_obj_index(self, addr):
        try:
            for i in range(len(self.obj_mem)):
                (a,b) = self.obj_mem[i]
                if self.state.solver.eval(a <= addr) and self.state.solver.eval(b > addr):
                    return i
        except:
            log.error( "[-] EXCEPTION during checking "+ str(addr)+ " is inside a controlled object or not")
        return None

    def get_return_index(self):
        return len(self.sym_call_ret_values)

    def do_symbolic_call(self, ret_symbol):
        self.sym_call_ret_values.append(ret_symbol)


from angr.sim_state import SimState
SimState.register_default('record', StateContraints)
