from . import ExplorationTechnique

class MatchTracer(ExplorationTechnique):
    def __init__(self, guide_state):
        super(MatchTracer, self).__init__()
        self.guide_state = guide_state
        self.trace = guide_state.history.bbl_addr.hardcopy
        self.trace_len = len(self.trace)

    def setup(self, simgr):
        self.project = simgr._project
        if len(simgr.active) != 1:
            raise Error("Tracer is being invoked on a SimulationManager without exactly one active state")

    def step(self, simgr, stash='active', **kwargs):
        return simgr.step(stash=stash, **kwargs)

    def step_state(self, simgr, state, **kwargs):
        succs_dict = simgr.step_state(state, **kwargs)
        sat_succs = succs_dict[None]  # satisfiable states

        # pick the right sucess
        picked = []
        for s in sat_succs:
            s.tracerHelper.trace_idx += 1
            if s.tracerHelper.trace_idx == self.trace_len:
                print("trace reaching the end")
                succs_dict['found'].append(s)
            elif self.trace[s.tracerHelper.trace_idx] == s.addr:
                picked.append(s)

        if len(picked) > 1:
            # raise Exception("The state split but several successors have the same (correct) address?")
            print("multiple successors have correct address, why?")
            import IPython; IPython.embed()
        elif len(picked) == 0:
            print("no more state tracable")

        succs_dict[None] = picked
        return succs_dict
