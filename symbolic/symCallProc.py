import angr

class SymCallProc(angr.SimProcedure):
    NO_RET = False
    IS_FUNCTION = True

    def run(self):
        # Fork two sucessors:
        # one is returning unconstrainted symbolic value (assuming we can control whatever it returns)
        # one is returning a pointer to unconstrained memory (assuming we cannot control, but the return value is a pointer)

        # return a value of size 64 bits
        try:
            index = self.state.record.get_return_index()
            ret_symbol = self.state.solver.BVS("symbolic_call_"+str(index), size = 64, explicit_name=True)
            ret_v = self.ret(expr=ret_symbol, index=index)
            self.state.record.do_symbolic_call(ret_v)
        except:
            print("[-] WARNING symbolic call SimProcedure failed unexpectedly")
