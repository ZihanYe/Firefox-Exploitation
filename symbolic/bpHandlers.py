import angr
from symCallProc import SymCallProc

class BpHandlers:
    def track_reads(self, state):
        print('=' * 100 + 'MEMREAD')
        print('read from ', state.inspect.mem_read_address, ' of size ', state.inspect.mem_read_length)

        if not isinstance(state.inspect.mem_read_length,int) and state.inspect.mem_read_length.symbolic:
            print('[+] reading with symbolic length')
            import IPython; IPython.embed()

        # self.dump_state(state)
        print('uninit:', state.inspect.mem_read_address.uninitialized,\
            'symbolic:', state.inspect.mem_read_address.symbolic)

        t=state.memory.load(state.inspect.mem_read_address,size=1,inspect=False)
        print(t)
        if (t.uninitialized and not state.inspect.mem_read_address.symbolic):
            print('[+] reading from uninitialized concrete memory address ', state.inspect.mem_read_address)
            self.dump_state(state)
            print('[+] zero filling uninitialized concrete value')
            size = state.solver.eval(state.inspect.mem_read_length)
            # initialize untinitialized concrete memory with 0 (instead of symbol)
            state.memory.store(state.inspect.mem_read_address, state.solver.BVV(0, size*self.ap.arch.byte_width),inspect=False)
            # state.solver.constraints.add(t == 0x0)
            # import IPython; IPython.embed()
        elif (t.uninitialized and state.inspect.mem_read_address.symbolic):
            print('[+] reading from uninitialized symbolic memory address')
            print('[+] concretizing symbolic memory address and setting symbolic value at the address')
            t=state.memory.load(state.inspect.mem_read_address,size=state.inspect.mem_read_length,inspect=False)
            # import IPython; IPython.embed()

    def track_after_reads(self, state):
        if state.inspect.mem_read_address.symbolic:
            concrete_addr = state.solver.eval(state.inspect.mem_read_address)
            # find out where the pointer is
            self.__add_symbolic_pointer(state, state.inspect.mem_read_address)

        elif state.record.check_tained(state.inspect.mem_read_address):
            print('[+] reading from tainted concrete address')
            # read from tainted memory (tainted memory is region of memory we've written controlled value to)
            state.record.append_history({
                'inst': state.addr,
                'access': 'read_taint',
                'address': state.inspect.mem_read_address,
                'read_size': state.inspect.mem_read_length,
                'value': state.inspect.mem_read_expr,
                'constraints': state.solver.constraints.copy(),
            })

    def track_writes(self, state):
        print('=' * 100 + 'MEMWRITE')
        print('write ', state.inspect.mem_write_expr, ' to ', state.inspect.mem_write_address \
            , ' of size ', state.inspect.mem_write_length , 'Write target type:', type(state.inspect.mem_write_address))

        if not isinstance(state.inspect.mem_write_length,int) and state.inspect.mem_write_length.symbolic:
            print('[+] writing with symbolic length')
            import IPython; IPython.embed()

        print('uninit:', state.inspect.mem_write_address.uninitialized,\
            'symbolic:', state.inspect.mem_write_address.symbolic)
        if state.inspect.mem_write_address.symbolic:
            if state.inspect.mem_write_expr.symbolic:
                print('[+] writing symbolic value to symbolic address')
                print('Write primitive!')
                s = state.copy()
                self.write_primitive.append(s)
                state.record.is_write_primitive = True
                import IPython; IPython.embed()
                # TODO: we don't need to continue anymore, configuration
            else:
                print('[+] writing concrete value to symbolic address')


    def track_after_writes(self,state):
        if state.inspect.mem_write_expr.symbolic:
            concrete_addr = state.solver.eval(state.inspect.mem_write_address)
            if isinstance(concrete_addr, int):
                print('[+] add to taint memory region')
                state.record.add_tainted_mem(concrete_addr, state.inspect.mem_write_length)
                state.record.append_history({
                    'inst': state.addr,
                    'access': 'taint_mem',
                    'address': concrete_addr,
                    'write_size': state.inspect.mem_write_length,
                    'value': state.inspect.mem_write_expr,
                    'constraints': state.solver.constraints.copy(),
                })
            else:
                print("[-] WARNING: something wrong during address concretization")
                import IPython; IPython.embed()

        if state.inspect.mem_write_address.symbolic:
            self.__add_symbolic_pointer(state, state.inspect.mem_write_address)


    def track_symbolic_variable(self, state):
        print('=' * 100 + 'SYMBOL')
        print(state.inspect.symbolic_name)
        print(state.inspect.symbolic_size)
        print(state.inspect.symbolic_expr)
        pass

    def track_call(self, state):
        print('=' * 100 + 'CALL')
        addr = state.inspect.function_address
        print('call ', addr)
        if addr.symbolic:
            print('[+] Call with symbolic address ', addr.symbolic)
            state.record.append_history({
                'access': 'call',
                'from': state.scratch.exit_ins_addr,
                'address': state.inspect.function_address,
                'constraints': state.solver.constraints.copy(),
                'ret_symbol': state.record.get_return_symbol()
            })
            self.control_hijack.append(state.copy())
            state.inspect.function_address = state.solver.BVV(0xfffffffffffff00e, 64)
            state.scratch.target = state.solver.BVV(0xfffffffffffff00e, 64)
            # import IPython; IPython.embed()

    def track_after_address_concretization(self, state):
        print('=' * 100 + 'CONCRETIZATION')
        print(state.inspect.address_concretization_strategy)
        print(state.inspect.address_concretization_action)
        print(state.inspect.address_concretization_memory)
        print(state.inspect.address_concretization_expr)
        print(state.inspect.address_concretization_add_constraints)
        print(state.inspect.address_concretization_result)
        if state.inspect.address_concretization_result is not None and len(state.inspect.address_concretization_result) > 1:
            print("address concretized to multiple results ")
            import IPython; IPython.embed()

    def track_after_jump(self, state):
        print('=' * 100 + 'JUMP')
        target = state.inspect.exit_target
        if not isinstance(target, int) and target.symbolic:
            print('jump to symbolic address, it is a control hijack!')
            state.record.append_history({
                'access': 'jump',
                'from': state.scratch.exit_ins_addr,
                'constraints': state.solver.constraints.copy(),
            })
            self.control_hijack.append(state.copy())
            import IPython; IPython.embed()



    def __add_symbolic_pointer(self,state,addr):
        addrs_of_pointer = self.__get_address_of_symbolic_pointer(state, addr)
        if addrs_of_pointer is not None:
            state.record.add_symbolic_pointer(addrs_of_pointer)


    def __get_address_of_symbolic_pointer(self, state, addr):
        if addr.op == '__add__':
            # possibly base + offset
            children = list(addr.children_asts())
            for c in children:
                cv = state.solver.eval(c)
                if state.record.check_inside_obj(cv):
                    # mostly likely to be an address
                    return self.__get_address_of_symbolic_pointer(state, c)
        else:
            leaf = list(addr.leaf_asts())
            addr_start = None
            for l in leaf:
                if l.symbolic:
                    ls = list(state.memory.addrs_for_hash(hash(l)))
                    if len(ls) > 0 and (addr_start is None or addr_start > ls[0]):
                        addr_start = ls[0]
            if addr_start is not None:
                return addr_start
        return None
