import socket
import logging

log = logging.getLogger("symbolic")
log.setLevel('INFO')

class GdbInterface:
    def __init__(self, proj, port):
        if port is None:
            self.gdb_port = None
        else:
            try:
                self.gdb_port = socket.socket()
                self.gdb_port.connect((port[0], port[1]))
                log.info('[+] connecting to gdb server at host: ', port[0], ' port: ', port[1])
            except Exception as e:
                print(str(e))
                self.gdb_port = None
        self.proj = proj
        self.cannot_access_addr = []

    def resolve_address(self, states, addr):
        if self.gdb_port is not None:
            log.info('[+] Querying gdb server for a page starting at '+ str(addr))
            try:
                self.gdb_port.send(hex(addr).encode())
                self.gdb_port.settimeout(1.0)
                data = self.gdb_port.recv(20000)
                self.gdb_port.settimeout(None)
                if len(data) > 0:
                    print("[+] Write to memory")
                    for s in states:
                        s.memory.store(addr, data, inspect=False, endness='Iend_BE')
                    return True
                else:
                    self.cannot_access_addr.append(addr)
            except Exception as e:
                print(str(e))
                return False
        return False

    def get_instr(self, addr):
        if self.gdb_port is not None:
            try:
                cmd = "instr " + hex(addr)
                self.gdb_port.send(cmd.encode())
                self.gdb_port.settimeout(1.0)
                data = self.gdb_port.recv(20000).decode()
                self.gdb_port.settimeout(None)
                if len(data) == 0:
                    self.cannot_access_addr.append(addr)
                return data
            except Exception as e:
                print(str(e))
        return None

    def check_addr(self, addr):
        for o in self.proj.loader.all_elf_objects:
            if o.contains_addr(addr):
                return True
        return False

    def set_memory(self, addr, content, size):
        if self.gdb_port is not None:
            if size == 1:
                cmd = "set byte"
            elif size == 4:
                cmd = "set dword"
            elif size == 8:
                cmd = "set qword"
            else:
                print("[-] unsupported size")
                return False
            try:
                self.gdb_port.send(cmd.encode())
                self.gdb_port.send(cmd.encode())
                res = self.gdb_port.recv(20000).decode()
                self.gdb_port.settimeout(None)
                print(res)
                if res == "":
                    return True
            except Exception as e:
                print(str(e))
        return False

    def continue_concrete(self):
        if self.gdb_port is not None:
            self.gdb_port.send("c".encode())
            res = self.gdb_port.recv(20000).decode()
            print(res)
