
class GdbInterface:
    def __init__(self, host, port):
        try:
            self.gdb_port = socket.socket()
            self.gdb_port.connect((host, port))
        except Exception as e:
            print(str(e))
            self.gdb_port = None

    def resolve_address(self, state, addr):
        if self.gdb_port is not None:
            log.info('[+] Querying gdb server for a page starting at '+ str(addr))
            try:
                self.gdb_port.send(hex(addr).encode())
                data = self.gdb_port.recv(20000)
                print("[+] Write to memory")
                if len(data) > 0:
                    state.memory.store(addr, data, inspect=False, endness='Iend_BE')
                    return True
            except Exception as e:
                print(str(e))
        return False

    # for debugging
    def get_instr(self, addr):
        if self.gdb_port is not None:
            try:
                cmd = "instr " + hex(addr)
                self.gdb_port.send(cmd.encode())
                data = self.gdb_port.recv(20000).decode()
                print(data)
            except Exception as e:
                print(str(e))

    def set_memory(self, addr, content, size):
        if self.gdb_port is not None:
            if size == 1:
                cmd = "set byte"
            elif size == 4:
                cmd = "set dword"
            elif size == 8:
                cmd = "set qword"
            else:
                print("unsupported size")
                return False
            try:
                self.gdb_port.send(cmd.encode())
                res = self.gdb_port.recv(20000).decode()
                print(res)
                if res == "":
                    return True
            except Exception as e:
                print(str(e))
        return False

    def continue_concrete(self):
        if self.gdb_port is not None:
            self.gdb_port.send("c".encode())
            res = self.gdb_port.recv(20000).decode()
            print(res)
