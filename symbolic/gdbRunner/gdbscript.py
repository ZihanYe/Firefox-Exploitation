import socket
import os
import sys
import gdb

def get_instr(conn, q):
    q = q.split(' ')[1]
    try:
        instr = gdb.execute("x /4i " + str(q), from_tty=True, to_string= True)
    except Exception as e:
        print(str(e))
        instr = ""
    sent = conn.send(instr.encode())

def get_memory(conn, q):
    try:
        memory = gdb.execute("x /128gx " + str(q), from_tty=True, to_string= True)
        print(memory)
        if memory.startswith("Cannot access"):
            print("send empty")
            out = bytearray()
        else:
            bytes = []
            bytearr = bytearray()
            for line in memory.splitlines():
                qwords = line.split('0x')[-2:]
                for q in qwords:
                    for i in range(0,16,2):
                        bytes.append( chr( int (q[i:i+2], 16 ) ) )
                        bytearr.append(int (q[i:i+2], 16 ))
            # out = ''.join( bytes ).encode()
            out=bytearr
    except Exception as e:
        print(str(e))
        out = bytearray()
    sent = conn.send(out)

def set_memory(conn, q):
    reply = ""
    try:
        type = "char"
        if q.startswith("set qword"):
            type = "long"
        elif q.startswith("set dword"):
            type = "int"
        parts = q.split(' ')
        address = parts[2]
        content = parts[3]
        cmd = "set {" + type + "}" + address + "=" + content
        reply = gdb.execute(cmd, from_tty=True, to_string=True)
    except Exception as e:
        print(str(e))
    sent = conn.send(reply.encode())

def event_handler(event):
    gdb.execute("set scheduler-locking on") # to avoid parallel signals in other threads
    if event.stop_signal == "SIGSEGV":
        gdb.write("\n[ME] SIG " + event.stop_signal)
        frame = gdb.selected_frame()
        while frame:
            gdb.write("\n[ME] FN " + str(frame.name()))
            frame = frame.older()
    gdb.execute("set scheduler-locking off") # otherwise just this thread is continued, leading to a deadlock

def continue_exec(conn):
    gdb.execute("continue")
    reply = "check execution result in file gdbout"
    conn.send(reply.encode())

def main():
    gdb.execute("set pagination off")
    gdb.execute("set endian big")
    gdb.execute("set logging on")
    gdb.execute("set logging file gdbout")
    gdb.events.stop.connect(event_handler)
    # get the hostname
    host = socket.gethostname()
    port = 5000

    server_socket = socket.socket()
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((host, port))
    print("listen on host: ", host, " port: ", port)
    server_socket.listen(1)
    conn, address = server_socket.accept()
    print("Connection from: " + str(address))
    while True:
        query = conn.recv(1024).decode()
        if not query:
            # if data is not received break
            break
        print("Connected user queries: " + str(query))
        if query.startswith("instr"):
            # get instruction
            get_instr(conn, query)
        elif query.startswith("set"):
            # set memory
            set_memory(conn, query)
        elif query.startswith("c"):
            continue_exec(conn)
        else:
            # get memory content
            get_memory(conn, query)

    conn.close()

if __name__ == '__main__':
    main()
