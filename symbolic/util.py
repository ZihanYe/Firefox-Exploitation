import angr
import traceback

class Util:
    def dump_state(self,state):
        ap = self.ap
        try:
            print('-----start dump state-----')
            # print('state addr: ', state.addr)
            print('**registers**')
            self.dump_reg(state)
            print('**instructions**')
            if isinstance(state.addr, int) or not state.addr.symbolic:
                irsb = ap.factory.block(state.addr).vex
                cap = ap.factory.block(state.addr).capstone
                irsb.pp()
                cap.pp()
            # print('**state**')
            # print('variable: ', list(state.solver.get_variables()))
            # print('constraints: ', list(state.solver.constraints))
            # print('tainted: ', state.record.tainted_mem)
            print('-----end dump state-----')
        except angr.errors.SimEngineError:
            print('angr.errors.SimEngineError')
            traceback.print_exc()
        except angr.errors.SimValueError:
            print('angr.errors.SimValueError:')

    def dump_reg(self, state):
        print( 'rax:', state.regs.rax,' r8:', state.regs.r8)
        print( 'rbx:', state.regs.rbx, ' r9:', state.regs.r9)
        print( 'rcx:', state.regs.rcx,' r10:', state.regs.r10)
        print( 'rdx:', state.regs.rdx,' r11:', state.regs.r11)
        print('rsi:', state.regs.rsi, ' r12:', state.regs.r12)
        print('rdi:', state.regs.rdi, ' r13:', state.regs.r13)
        print('rsp:', state.regs.rsp, ' r14:', state.regs.r14)
        print('rbp:', state.regs.rbp, ' r15:', state.regs.r15)
        print( 'gs:', state.regs.gs)
        return

    def dump_one_reg(self, state, name):
        try:
            print(name, state.regs.get(name))
        except:
            print("no such register")

    def dump_instr(self, simgr):
        for ins in self.ap.factory.block(simgr.active[0].addr).capstone.insns:
            print(ins)


    def debug_simgr(self, simgr):
        print('-----start dump simulator-----')
        count = 0;
        print('active:')
        for state in simgr.stashes['active']:
            self.dump_state(state)
            count += 1
        print("active state: ", count)
        print('-----end dump simulator-----')

    def retrive_addr(self, bv, prefix, addr_size=64):
        tindex = str(bv).find(prefix)
        if tindex != -1:
            endindex = str(bv)[tindex+len(prefix):].find('_')
            memaddr = str(bv)[tindex+len(prefix):(tindex+len(prefix)+ endindex)]
            addr = int('0x' + memaddr, 16)
            return addr
        else:
            print('[-] WARNING: Unable to find addresss from the name ', str(bv))
            import IPython; IPython.embed()
            return None
