import executor

# do_nothing = [0x00007fd48c07ab10, 0x7fd47dde3530, 0x7fd47b8e1dc0, 0x7fd48c08a480, 0x7fd47b901ec0, 0x7fd47b901370, 0x000056544a9a5890, 0x7fd47ce28cb0]
# LogMessage, LogMessage, std::__Cr::lock_guard, base::subtle::RefCountedBase::CalledOnValidSequence, RefCounted, AddRef, Release , AutoRef
# (_ZN7logging10LogMessageC1EPKcii, <_ZN7logging10LogMessageC1EPKcii@plt>)

lib_call = []
avoids = []
gdb_server = ("dkr12-ug16zy2", 5000)

# shellcodes = [(0x00007fd48c00b000, "/nas/ug16zy2/corefiles/CVE20195808func/libbase.bin"),
#		(0x00007fd47b8e1000, "/nas/ug16zy2/corefiles/CVE20195808func/liblink.bin")]

# (0x00007fd48c08a3b0, "/nas/ug16zy2/corefiles/CVE20195808func/AddRefImpl.bin"),
#		(0x7fd48c0f1480, "/nas/ug16zy2/corefiles/CVE20195808func/SequenceCheckerImpl.bin"),
#		(0x00007fd48c08a480, "/nas/ug16zy2/corefiles/CVE20195808func/CalledOnValidSequence.bin")]
# stack = (0x00007ffd8021e000, "/nas/ug16zy2/corefiles/CVE20195808func/stack.bin")


# e = executor.Executor("/nas/ug16zy2/corefiles/CVE20195808.core", step_limit=1000, stop_when_primtive_found=1, gdb_server = gdb_server, do_nothing_instr=do_nothing, log_file="./testresult/CVE-2019-5808", log_interval=10, debug=False, avoids=avoids, lib_call_hook=lib_call)

# e.run(uaf_object_base=0x3253a95217a0, uaf_object_size=176, context_end=0x00007fd47bf85951)



# do_nothing = [0x000055bf95f407c0, 0x000055bf95f43430, 0x00007f0c6ffb8480]
# BasicAutoLock, base::Lock::Acquire, CalledOnValidSequence

# e = executor.Executor("/nas/ug16zy2/corefiles/CVE20195808_2.core", step_limit=1000, stop_when_primtive_found=1, gdb_server = gdb_server, do_nothing_instr=do_nothing, log_file="./testresult/CVE-2019-5808", log_interval=10, debug=False, avoids=avoids, lib_call_hook=lib_call)

# e.run(uaf_object_base=0x3b3c2ad235b0,uaf_object_size=176,context_end= 0x00007f0c60dd104b)


do_nothing = []
e = executor.Executor("/nas/ug16zy2/corefiles/CVE20195908_3.core", gdb_server = gdb_server, do_nothing_instr=do_nothing, log_file="./testresult/CVE-2019-5808_3", log_interval=10, debug=False, avoids=avoids, lib_call_hook=lib_call)

e.run(uaf_object_base=0x30cbac079ec0,uaf_object_size=176,context_end=0x00005633a9051a62)

