-----start dump executor-----
Step:  1374
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        3
control_hijack (C)         0
active (A)                 0
unconstrained (U)          0
errored (E)                4
found                      0
avoided                    0
paths to write primitive:  212
paths to control hijack:  0
first primitive after:  1306
total paths:  4346
****************************************************************************************************
Milestones: 
address           number of active states have passed it
--------------  ----------------------------------------
0x7f95ca01d17b                                         0
0x7f95c7f10b58                                         0
0x7f95c7f10c50                                         0
address           number of active states just passed it
--------------  ----------------------------------------
0x7f95ca01d17b                                         0
0x7f95c7f10b58                                         0
0x7f95c7f10c50                                         0
****************************************************************************************************
Some errored states: 
<State errored with "Unsupported dirty helper amd64g_dirtyhelper_XSAVE_COMPONENT_0">
<State errored with "Unsupported dirty helper amd64g_dirtyhelper_XSAVE_COMPONENT_0">
<State errored with "Unsupported dirty helper amd64g_dirtyhelper_XSAVE_COMPONENT_0">
<State errored with "Unsupported dirty helper amd64g_dirtyhelper_XSAVE_COMPONENT_0">
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c000c131_1362_56{UNINITIALIZED} .. mem_c000c130_1361_8{UNINITIALIZED}>  r8: <BV64 0x7ffcc7d89840>
rbx: <BV64 0x5563803a0e50>  r9: <BV64 0x55637e04b2b8>
rcx: <BV64 0x13>  r10: <BV64 0x7ffcc7d89ad0>
rdx: <BV64 0x0 .. 0x30 + (0x0 .. mem_c000c831_1553_8{UNINITIALIZED} .. mem_c000c830_1552_8{UNINITIALIZED})>  r11: <BV64 0x1>
rsi: <BV64 unconstrained_ret_depth_limit__1406_64{UNINITIALIZED}>  r12: <BV64 0x5563803a4af0>
rdi: <BV64 mem_c000c131_1362_56{UNINITIALIZED} .. mem_c000c130_1361_8{UNINITIALIZED}>  r13: <BV64 0x55637dc71c40>
rsp: <BV64 0x7ffcc7d89480>  r14: <BV64 0x7f95c686eac4>
rbp: <BV64 0x7ffcc7d89510>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I16 t2:Ity_I64

   00 | ------ IMark(0x7f95ccb9f644, 3, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t1 = GET:I16(dx)
   03 | STle(t0) = t1
   04 | ------ IMark(0x7f95ccb9f647, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f95ccb9f69f; Ijk_Boring
}
0x7f95ccb9f644:	mov	word ptr [rax], dx
0x7f95ccb9f647:	jmp	0x7f95ccb9f69f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x5563806ea640
maximum memory range     [  0x5563806ea640  ,  0x5563806ea698  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x58
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj87_88_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0008030
maximum memory range     [  0xc0008030  ,  0xc0008730  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0008930
maximum memory range     [  0xc0008730  ,  0xc0008e30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0008930_101_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0009030
maximum memory range     [  0xc0008e30  ,  0xc0009530  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0009030_112_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0009730
maximum memory range     [  0xc0009530  ,  0xc0009c30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ------------------
<BV8 mem_c0009730_157_8{UNINITIALIZED}>  0x0,0x7ffc07d80020

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0009e30
maximum memory range     [  0xc0009c30  ,  0xc000a330  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0009e30_178_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000a530
maximum memory range     [  0xc000a330  ,  0xc000aa30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c000a530_185_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc000ac30
maximum memory range     [  0xc000aa30  ,  0xc000b130  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c000ac30_195_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc000b130
maximum memory range     [  0xc000b130  ,  0xc000b830  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc000ba30
maximum memory range     [  0xc000b830  ,  0xc000bf30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000ba30_1086_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc000c130
maximum memory range     [  0xc000bf30  ,  0xc000c630  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_11       0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000c130_1361_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_11
(possible) base address  0xc000c830
maximum memory range     [  0xc000c630  ,  0xc000cd30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000c830_1552_8{UNINITIALIZED}>  0x0
<BV8 mem_c000c831_1553_8{UNINITIALIZED}>  0x1
<BV8 mem_c000c832_1554_8{UNINITIALIZED}>  0x2
<BV8 mem_c000c833_1555_8{UNINITIALIZED}>  0x3

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                      address
------------------------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__89_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__93_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__97_64{UNINITIALIZED}>
<BV8 mem_c0008230_98_8{UNINITIALIZED}>
<BV56 mem_c0008231_99_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__100_64{UNINITIALIZED}>
<BV56 mem_c0008931_102_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__107_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__110_64{UNINITIALIZED}>
<BV56 mem_c0009031_113_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__132_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__134_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__138_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__149_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__155_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__158_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__174_64{UNINITIALIZED}>
<BV56 mem_c0009e31_179_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__182_64{UNINITIALIZED}>
<BV56 mem_c000a531_186_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__193_64{UNINITIALIZED}>
<BV56 mem_c000ac31_196_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__241_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__247_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__644_64{UNINITIALIZED}>
<BV8 mem_c000b330_673_8{UNINITIALIZED}>
<BV56 mem_c000b331_674_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1053_64{UNINITIALIZED}>
<BV56 mem_c000ba31_1087_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1229_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1312_64{UNINITIALIZED}>
<BV56 mem_c000c131_1362_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1406_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1509_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_1556_64{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140281361593924
Write  <BV64 0x2>  bytes to  <BV64 mem_c000c131_1362_56{UNINITIALIZED} .. mem_c000c130_1361_8{UNINITIALIZED}>
with expression : <BV16 0x30 + (0x0 .. mem_c000c831_1553_8{UNINITIALIZED} .. mem_c000c830_1552_8{UNINITIALIZED})[15:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f95ccb9f57e
0x7f95ccb9f57e:	push	rbp
0x7f95ccb9f57f:	mov	rbp, rsp
0x7f95ccb9f582:	sub	rsp, 0x90
0x7f95ccb9f589:	mov	qword ptr [rbp - 0x78], rdi
0x7f95ccb9f58d:	mov	dword ptr [rbp - 0x7c], esi
0x7f95ccb9f590:	mov	qword ptr [rbp - 0x88], rdx
0x7f95ccb9f597:	mov	rax, qword ptr fs:[0x28]
0x7f95ccb9f5a0:	mov	qword ptr [rbp - 8], rax
0x7f95ccb9f5a4:	xor	eax, eax
0x7f95ccb9f5a6:	mov	rax, qword ptr [rbp - 0x78]
0x7f95ccb9f5aa:	mov	rdi, rax
0x7f95ccb9f5ad:	call	0x7f95ccb99b8c
----------------------------------------------------------------------------------------------------
At  0x7f95ccb9aef8
0x7f95ccb9aef8:	push	rbp
0x7f95ccb9aef9:	mov	rbp, rsp
0x7f95ccb9aefc:	sub	rsp, 0x20
0x7f95ccb9af00:	mov	qword ptr [rbp - 0x18], rdi
0x7f95ccb9af04:	mov	dword ptr [rbp - 0xc], 0x13
0x7f95ccb9af0b:	mov	qword ptr [rbp - 8], 0x30
0x7f95ccb9af13:	mov	rax, qword ptr [rbp - 0x18]
0x7f95ccb9af17:	mov	rdi, rax
0x7f95ccb9af1a:	call	0x7f95cc1c87c4
----------------------------------------------------------------------------------------------------
At  0x7f95cc9d8058
0x7f95cc9d8058:	push	rbp
0x7f95cc9d8059:	mov	rbp, rsp
0x7f95cc9d805c:	push	r12
0x7f95cc9d805e:	push	rbx
0x7f95cc9d805f:	sub	rsp, 0x40
0x7f95cc9d8063:	mov	qword ptr [rbp - 0x38], rdi
0x7f95cc9d8067:	mov	qword ptr [rbp - 0x40], rsi
0x7f95cc9d806b:	mov	qword ptr [rbp - 0x48], rdx
0x7f95cc9d806f:	mov	dword ptr [rbp - 0x4c], ecx
0x7f95cc9d8072:	mov	rax, qword ptr fs:[0x28]
0x7f95cc9d807b:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc9d807f:	xor	eax, eax
0x7f95cc9d8081:	mov	rax, qword ptr [rbp - 0x38]
0x7f95cc9d8085:	mov	rdi, rax
0x7f95cc9d8088:	call	0x7f95ccb9aef8
----------------------------------------------------------------------------------------------------
At  0x7f95cc9d23da
0x7f95cc9d23da:	push	rbp
0x7f95cc9d23db:	mov	rbp, rsp
0x7f95cc9d23de:	push	r13
0x7f95cc9d23e0:	push	r12
0x7f95cc9d23e2:	push	rbx
0x7f95cc9d23e3:	sub	rsp, 0x1c8
0x7f95cc9d23ea:	mov	qword ptr [rbp - 0x1c8], rdi
0x7f95cc9d23f1:	mov	qword ptr [rbp - 0x1d0], rsi
0x7f95cc9d23f8:	mov	qword ptr [rbp - 0x1d8], rdx
0x7f95cc9d23ff:	mov	qword ptr [rbp - 0x1e0], rcx
0x7f95cc9d2406:	mov	rax, qword ptr fs:[0x28]
0x7f95cc9d240f:	mov	qword ptr [rbp - 0x28], rax
0x7f95cc9d2413:	xor	eax, eax
0x7f95cc9d2415:	cmp	qword ptr [rbp - 0x1e0], 0
0x7f95cc9d241d:	je	0x7f95cc9d243c
----------------------------------------------------------------------------------------------------
At  0x7f95cc7d8a2f
0x7f95cc7d8a2f:	push	rbp
0x7f95cc7d8a30:	mov	rbp, rsp
0x7f95cc7d8a33:	push	rbx
0x7f95cc7d8a34:	sub	rsp, 0xc8
0x7f95cc7d8a3b:	mov	qword ptr [rbp - 0xb8], rdi
0x7f95cc7d8a42:	mov	qword ptr [rbp - 0xc0], rsi
0x7f95cc7d8a49:	mov	qword ptr [rbp - 0xc8], rdx
0x7f95cc7d8a50:	mov	dword ptr [rbp - 0xcc], ecx
0x7f95cc7d8a56:	mov	dword ptr [rbp - 0xd0], r8d
0x7f95cc7d8a5d:	mov	rax, qword ptr fs:[0x28]
0x7f95cc7d8a66:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc7d8a6a:	xor	eax, eax
0x7f95cc7d8a6c:	lea	rax, [rbp - 0xc8]
0x7f95cc7d8a73:	mov	rdi, rax
0x7f95cc7d8a76:	call	0x7f95c6822634
----------------------------------------------------------------------------------------------------
At  0x7f95cc25d2ee
0x7f95cc25d2ee:	push	rbp
0x7f95cc25d2ef:	mov	rbp, rsp
0x7f95cc25d2f2:	sub	rsp, 0x20
0x7f95cc25d2f6:	mov	qword ptr [rbp - 8], rdi
0x7f95cc25d2fa:	mov	qword ptr [rbp - 0x10], rsi
0x7f95cc25d2fe:	mov	qword ptr [rbp - 0x18], rdx
0x7f95cc25d302:	mov	dword ptr [rbp - 0x1c], ecx
0x7f95cc25d305:	mov	dword ptr [rbp - 0x20], r8d
0x7f95cc25d309:	mov	edi, dword ptr [rbp - 0x20]
0x7f95cc25d30c:	mov	ecx, dword ptr [rbp - 0x1c]
0x7f95cc25d30f:	mov	rdx, qword ptr [rbp - 0x18]
0x7f95cc25d313:	mov	rsi, qword ptr [rbp - 0x10]
0x7f95cc25d317:	mov	rax, qword ptr [rbp - 8]
0x7f95cc25d31b:	mov	r8d, edi
0x7f95cc25d31e:	mov	rdi, rax
0x7f95cc25d321:	call	0x7f95cc7d8a2f
----------------------------------------------------------------------------------------------------
At  0x7f95cc2a612e
0x7f95cc2a612e:	push	rbp
0x7f95cc2a612f:	mov	rbp, rsp
0x7f95cc2a6132:	sub	rsp, 0x30
0x7f95cc2a6136:	mov	qword ptr [rbp - 0x18], rdi
0x7f95cc2a613a:	mov	qword ptr [rbp - 0x20], rsi
0x7f95cc2a613e:	mov	qword ptr [rbp - 0x28], rdx
0x7f95cc2a6142:	mov	dword ptr [rbp - 0x2c], ecx
0x7f95cc2a6145:	mov	rax, qword ptr [rbp - 0x20]
0x7f95cc2a6149:	mov	rdi, rax
0x7f95cc2a614c:	call	0x7f95cc26d7d7
----------------------------------------------------------------------------------------------------
At  0x7f95cc33bdbb
0x7f95cc33bdbb:	push	rbp
0x7f95cc33bdbc:	mov	rbp, rsp
0x7f95cc33bdbf:	sub	rsp, 0x30
0x7f95cc33bdc3:	mov	qword ptr [rbp - 0x18], rdi
0x7f95cc33bdc7:	mov	qword ptr [rbp - 0x20], rsi
0x7f95cc33bdcb:	mov	dword ptr [rbp - 0x24], edx
0x7f95cc33bdce:	mov	ecx, dword ptr [rbp - 0x24]
0x7f95cc33bdd1:	mov	rdx, qword ptr [rbp - 0x20]
0x7f95cc33bdd5:	mov	rax, qword ptr [rbp - 0x18]
0x7f95cc33bdd9:	lea	rsi, [rip + 0x4e6d6c0]
0x7f95cc33bde0:	mov	rdi, rax
0x7f95cc33bde3:	call	0x7f95cc2a612e
----------------------------------------------------------------------------------------------------
At  0x7f95cc2d5261
0x7f95cc2d5261:	push	rbp
0x7f95cc2d5262:	mov	rbp, rsp
0x7f95cc2d5265:	push	rbx
0x7f95cc2d5266:	sub	rsp, 0xc8
0x7f95cc2d526d:	mov	qword ptr [rbp - 0xb8], rdi
0x7f95cc2d5274:	mov	qword ptr [rbp - 0xc0], rsi
0x7f95cc2d527b:	mov	eax, ecx
0x7f95cc2d527d:	mov	byte ptr [rbp - 0xc4], dl
0x7f95cc2d5283:	mov	byte ptr [rbp - 0xc8], al
0x7f95cc2d5289:	mov	rax, qword ptr fs:[0x28]
0x7f95cc2d5292:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc2d5296:	xor	eax, eax
0x7f95cc2d5298:	lea	rdx, [rbp - 0xb8]
0x7f95cc2d529f:	lea	rax, [rbp - 0xa0]
0x7f95cc2d52a6:	mov	rsi, rdx
0x7f95cc2d52a9:	mov	rdi, rax
0x7f95cc2d52ac:	call	0x7f95cc33b992
----------------------------------------------------------------------------------------------------
At  0x7f95cc2d2642
0x7f95cc2d2642:	push	rbp
0x7f95cc2d2643:	mov	rbp, rsp
0x7f95cc2d2646:	push	rbx
0x7f95cc2d2647:	sub	rsp, 0x48
0x7f95cc2d264b:	mov	qword ptr [rbp - 0x48], rdi
0x7f95cc2d264f:	mov	rax, qword ptr fs:[0x28]
0x7f95cc2d2658:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc2d265c:	xor	eax, eax
0x7f95cc2d265e:	lea	rax, [rbp - 0x40]
0x7f95cc2d2662:	mov	esi, 0
0x7f95cc2d2667:	mov	rdi, rax
0x7f95cc2d266a:	call	0x7f95c77db232
----------------------------------------------------------------------------------------------------
At  0x7f95cc2d63cc
0x7f95cc2d63cc:	push	rbp
0x7f95cc2d63cd:	mov	rbp, rsp
0x7f95cc2d63d0:	sub	rsp, 0x10
0x7f95cc2d63d4:	mov	qword ptr [rbp - 8], rdi
0x7f95cc2d63d8:	mov	rax, qword ptr [rbp - 8]
0x7f95cc2d63dc:	mov	rdi, rax
0x7f95cc2d63df:	call	0x7f95cc2d2642
----------------------------------------------------------------------------------------------------
At  0x7f95cc7070b7
0x7f95cc7070b7:	push	rbp
0x7f95cc7070b8:	mov	rbp, rsp
0x7f95cc7070bb:	sub	rsp, 0x20
0x7f95cc7070bf:	mov	qword ptr [rbp - 8], rdi
0x7f95cc7070c3:	mov	qword ptr [rbp - 0x10], rsi
0x7f95cc7070c7:	mov	qword ptr [rbp - 0x18], rdx
0x7f95cc7070cb:	call	0x7f95cc6f6da8
----------------------------------------------------------------------------------------------------
At  0x7f95c9be5dfe
0x7f95c9be5dfe:	push	rbp
0x7f95c9be5dff:	mov	rbp, rsp
0x7f95c9be5e02:	push	rbx
0x7f95c9be5e03:	sub	rsp, 0xb8
0x7f95c9be5e0a:	mov	qword ptr [rbp - 0xa8], rdi
0x7f95c9be5e11:	mov	qword ptr [rbp - 0xb0], rsi
0x7f95c9be5e18:	mov	qword ptr [rbp - 0xb8], rdx
0x7f95c9be5e1f:	mov	rax, qword ptr fs:[0x28]
0x7f95c9be5e28:	mov	qword ptr [rbp - 0x18], rax
0x7f95c9be5e2c:	xor	eax, eax
0x7f95c9be5e2e:	lea	rax, [rbp - 0x80]
0x7f95c9be5e32:	mov	rdi, rax
0x7f95c9be5e35:	call	0x7f95c9ddec62
----------------------------------------------------------------------------------------------------
At  0x7f95c9be5306
0x7f95c9be5306:	push	rbp
0x7f95c9be5307:	mov	rbp, rsp
0x7f95c9be530a:	push	rbx
0x7f95c9be530b:	sub	rsp, 0x48
0x7f95c9be530f:	mov	qword ptr [rbp - 0x38], rdi
0x7f95c9be5313:	mov	qword ptr [rbp - 0x40], rsi
0x7f95c9be5317:	mov	qword ptr [rbp - 0x48], rdx
0x7f95c9be531b:	mov	rax, qword ptr fs:[0x28]
0x7f95c9be5324:	mov	qword ptr [rbp - 0x18], rax
0x7f95c9be5328:	xor	eax, eax
0x7f95c9be532a:	cmp	qword ptr [rbp - 0x40], 0
0x7f95c9be532f:	jne	0x7f95c9be5358
----------------------------------------------------------------------------------------------------
At  0x7f95ca01e1f6
0x7f95ca01e1f6:	push	rbp
0x7f95ca01e1f7:	mov	rbp, rsp
0x7f95ca01e1fa:	sub	rsp, 0x40
0x7f95ca01e1fe:	mov	qword ptr [rbp - 0x38], rdi
0x7f95ca01e202:	mov	rax, qword ptr fs:[0x28]
0x7f95ca01e20b:	mov	qword ptr [rbp - 8], rax
0x7f95ca01e20f:	xor	eax, eax
0x7f95ca01e211:	mov	rax, qword ptr [rbp - 0x38]
0x7f95ca01e215:	add	rax, 0x30
0x7f95ca01e219:	mov	rdi, rax
0x7f95ca01e21c:	call	0x7f95c7803026
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool 0x9e3779b9 * unconstrained_ret_depth_limit__89_64{UNINITIALIZED}[31:0][31:1] == 0x0>
1  <Bool 0x18 * (0x0 .. 0xfffffffe + 0x9e3779b9 * unconstrained_ret_depth_limit__89_64{UNINITIALIZED}[31:0][31:20]) == 0x17fe8>
2  <Bool 0x9e3779b9 * unconstrained_ret_depth_limit__93_64{UNINITIALIZED}[31:0][31:1] == 0x0>
3  <Bool unconstrained_ret_depth_limit__97_64{UNINITIALIZED} == 0xc0008230>
4  <Bool unconstrained_ret_depth_limit__100_64{UNINITIALIZED} == 0xc0008930>
5  <Bool !(mem_c0008930_101_8{UNINITIALIZED} == 0) || !(mem_c0008931_102_56{UNINITIALIZED} == 0xfff90000000000)>
6  <Bool unconstrained_ret_depth_limit__107_64{UNINITIALIZED}[31:7] == 0x0>
7  <Bool unconstrained_ret_depth_limit__107_64{UNINITIALIZED}[6:0] <= 122>
8  <Bool unconstrained_ret_depth_limit__110_64{UNINITIALIZED} == 0xc0009030>
9  <Bool unconstrained_ret_depth_limit__155_64{UNINITIALIZED} == 0xc0009730>
10  <Bool unconstrained_ret_depth_limit__174_64{UNINITIALIZED} == 0xc0009e30>
11  <Bool unconstrained_ret_depth_limit__182_64{UNINITIALIZED} == 0xc000a530>
12  <Bool unconstrained_ret_depth_limit__193_64{UNINITIALIZED} == 0xc000ac30>
13  <Bool !(mem_c000ac30_195_8{UNINITIALIZED} == 0) || !(mem_c000ac31_196_56{UNINITIALIZED} == 0x0)>
14  <Bool mem_c0009030_112_8{UNINITIALIZED} == 1>
15  <Bool mem_c0009031_113_56{UNINITIALIZED}[38:0] == 0x0>
16  <Bool !(unconstrained_ret_depth_limit__247_64{UNINITIALIZED}[0:0] == 1) || !(unconstrained_ret_depth_limit__247_64{UNINITIALIZED}[7:1] == 0)>
17  <Bool unconstrained_ret_depth_limit__644_64{UNINITIALIZED} == 0xc000b330>
18  <Bool unconstrained_ret_depth_limit__1053_64{UNINITIALIZED} == 0xc000ba30>
19  <Bool !(mem_c000ba30_1086_8{UNINITIALIZED} == 0) || !(mem_c000ba31_1087_56{UNINITIALIZED} == 0x0)>
20  <Bool unconstrained_ret_depth_limit__1312_64{UNINITIALIZED} == 0xc000c130>
21  <Bool mem_c000c131_1362_56{UNINITIALIZED} == 0xc000c8>
22  <Bool mem_c000c130_1361_8{UNINITIALIZED} == 48>
23  <Bool !((mem_c000c833_1555_8{UNINITIALIZED} .. mem_c000c832_1554_8{UNINITIALIZED}) <= (mem_c000c831_1553_8{UNINITIALIZED} .. mem_c000c830_1552_8{UNINITIALIZED}))>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 unconstrained_ret_depth_limit__1745_64{UNINITIALIZED}>  r8: <BV64 0x7ffcc7d89840>
rbx: <BV64 0x5563803a0e50>  r9: <BV64 0x55637e04b2b8>
rcx: <BV64 0x13>  r10: <BV64 0x7ffcc7d89ad0>
rdx: <BV64 0x0 .. mem_c000cf31_1811_8{UNINITIALIZED} .. mem_c000cf30_1810_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 unconstrained_ret_depth_limit__1406_64{UNINITIALIZED}>  r12: <BV64 0x5563803a4af0>
rdi: <BV64 mem_c000c131_1362_56{UNINITIALIZED} .. mem_c000c130_1361_8{UNINITIALIZED}>  r13: <BV64 0x55637dc71c40>
rsp: <BV64 0x7ffcc7d89480>  r14: <BV64 0x7f95c686eac4>
rbp: <BV64 0x7ffcc7d89510>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I16 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I32 t13:Ity_I16 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I16 t20:Ity_I64

   00 | ------ IMark(0x7f95ccb9f680, 3, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t5 = GET:I16(dx)
   03 | STle(t0) = t5
   04 | PUT(rip) = 0x00007f95ccb9f683
   05 | ------ IMark(0x7f95ccb9f683, 4, 0) ------
   06 | t7 = GET:I64(rbp)
   07 | t6 = Add64(t7,0xffffffffffffffe0)
   08 | t8 = LDle:I64(t6)
   09 | PUT(rip) = 0x00007f95ccb9f687
   10 | ------ IMark(0x7f95ccb9f687, 4, 0) ------
   11 | t9 = Add64(t8,0x0000000000000002)
   12 | t13 = LDle:I16(t9)
   13 | t12 = 16Uto32(t13)
   14 | t11 = 32Uto64(t12)
   15 | PUT(rdx) = t11
   16 | PUT(rip) = 0x00007f95ccb9f68b
   17 | ------ IMark(0x7f95ccb9f68b, 4, 0) ------
   18 | t14 = Add64(t7,0xffffffffffffffc0)
   19 | t16 = LDle:I64(t14)
   20 | PUT(rax) = t16
   21 | PUT(rip) = 0x00007f95ccb9f68f
   22 | ------ IMark(0x7f95ccb9f68f, 4, 0) ------
   23 | t17 = Add64(t16,0x0000000000000002)
   24 | t19 = GET:I16(dx)
   25 | STle(t17) = t19
   26 | ------ IMark(0x7f95ccb9f693, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f95ccb9f69f; Ijk_Boring
}
0x7f95ccb9f680:	mov	word ptr [rax], dx
0x7f95ccb9f683:	mov	rax, qword ptr [rbp - 0x20]
0x7f95ccb9f687:	movzx	edx, word ptr [rax + 2]
0x7f95ccb9f68b:	mov	rax, qword ptr [rbp - 0x40]
0x7f95ccb9f68f:	mov	word ptr [rax + 2], dx
0x7f95ccb9f693:	jmp	0x7f95ccb9f69f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x5563806ea640
maximum memory range     [  0x5563806ea640  ,  0x5563806ea698  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x58
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj87_88_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0008030
maximum memory range     [  0xc0008030  ,  0xc0008730  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0008930
maximum memory range     [  0xc0008730  ,  0xc0008e30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0008930_101_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0009030
maximum memory range     [  0xc0008e30  ,  0xc0009530  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0009030_112_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0009730
maximum memory range     [  0xc0009530  ,  0xc0009c30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ------------------
<BV8 mem_c0009730_157_8{UNINITIALIZED}>  0x0,0x7ffc07d80020

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0009e30
maximum memory range     [  0xc0009c30  ,  0xc000a330  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0009e30_178_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000a530
maximum memory range     [  0xc000a330  ,  0xc000aa30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c000a530_185_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc000ac30
maximum memory range     [  0xc000aa30  ,  0xc000b130  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c000ac30_195_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc000b130
maximum memory range     [  0xc000b130  ,  0xc000b830  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc000ba30
maximum memory range     [  0xc000b830  ,  0xc000bf30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000ba30_1086_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc000c130
maximum memory range     [  0xc000bf30  ,  0xc000c630  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_11       0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000c130_1361_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_11
(possible) base address  0xc000c830
maximum memory range     [  0xc000c630  ,  0xc000cd30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000c830_1552_8{UNINITIALIZED}>  0x0
<BV8 mem_c000c831_1553_8{UNINITIALIZED}>  0x1
<BV8 mem_c000c832_1554_8{UNINITIALIZED}>  0x2
<BV8 mem_c000c833_1555_8{UNINITIALIZED}>  0x3

****************************************************************************************************
object:                  OBJ_12
(possible) base address  0xc000cf30
maximum memory range     [  0xc000cd30  ,  0xc000d430  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000cf30_1810_8{UNINITIALIZED}>  0x0
<BV8 mem_c000cf31_1811_8{UNINITIALIZED}>  0x1

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                      address
------------------------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__89_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__93_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__97_64{UNINITIALIZED}>
<BV8 mem_c0008230_98_8{UNINITIALIZED}>
<BV56 mem_c0008231_99_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__100_64{UNINITIALIZED}>
<BV56 mem_c0008931_102_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__107_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__110_64{UNINITIALIZED}>
<BV56 mem_c0009031_113_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__132_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__134_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__138_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__149_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__155_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__158_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__174_64{UNINITIALIZED}>
<BV56 mem_c0009e31_179_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__182_64{UNINITIALIZED}>
<BV56 mem_c000a531_186_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__193_64{UNINITIALIZED}>
<BV56 mem_c000ac31_196_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__241_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__247_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__644_64{UNINITIALIZED}>
<BV8 mem_c000b330_673_8{UNINITIALIZED}>
<BV56 mem_c000b331_674_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1053_64{UNINITIALIZED}>
<BV56 mem_c000ba31_1087_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1229_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1312_64{UNINITIALIZED}>
<BV56 mem_c000c131_1362_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1406_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1509_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_1556_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1745_64{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140281361593984
Write  <BV64 0x2>  bytes to  <BV64 mem_c000c131_1362_56{UNINITIALIZED} .. mem_c000c130_1361_8{UNINITIALIZED}>
with expression : <BV16 mem_c000cf31_1811_8{UNINITIALIZED} .. mem_c000cf30_1810_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f95ccb9f57e
0x7f95ccb9f57e:	push	rbp
0x7f95ccb9f57f:	mov	rbp, rsp
0x7f95ccb9f582:	sub	rsp, 0x90
0x7f95ccb9f589:	mov	qword ptr [rbp - 0x78], rdi
0x7f95ccb9f58d:	mov	dword ptr [rbp - 0x7c], esi
0x7f95ccb9f590:	mov	qword ptr [rbp - 0x88], rdx
0x7f95ccb9f597:	mov	rax, qword ptr fs:[0x28]
0x7f95ccb9f5a0:	mov	qword ptr [rbp - 8], rax
0x7f95ccb9f5a4:	xor	eax, eax
0x7f95ccb9f5a6:	mov	rax, qword ptr [rbp - 0x78]
0x7f95ccb9f5aa:	mov	rdi, rax
0x7f95ccb9f5ad:	call	0x7f95ccb99b8c
----------------------------------------------------------------------------------------------------
At  0x7f95ccb9aef8
0x7f95ccb9aef8:	push	rbp
0x7f95ccb9aef9:	mov	rbp, rsp
0x7f95ccb9aefc:	sub	rsp, 0x20
0x7f95ccb9af00:	mov	qword ptr [rbp - 0x18], rdi
0x7f95ccb9af04:	mov	dword ptr [rbp - 0xc], 0x13
0x7f95ccb9af0b:	mov	qword ptr [rbp - 8], 0x30
0x7f95ccb9af13:	mov	rax, qword ptr [rbp - 0x18]
0x7f95ccb9af17:	mov	rdi, rax
0x7f95ccb9af1a:	call	0x7f95cc1c87c4
----------------------------------------------------------------------------------------------------
At  0x7f95cc9d8058
0x7f95cc9d8058:	push	rbp
0x7f95cc9d8059:	mov	rbp, rsp
0x7f95cc9d805c:	push	r12
0x7f95cc9d805e:	push	rbx
0x7f95cc9d805f:	sub	rsp, 0x40
0x7f95cc9d8063:	mov	qword ptr [rbp - 0x38], rdi
0x7f95cc9d8067:	mov	qword ptr [rbp - 0x40], rsi
0x7f95cc9d806b:	mov	qword ptr [rbp - 0x48], rdx
0x7f95cc9d806f:	mov	dword ptr [rbp - 0x4c], ecx
0x7f95cc9d8072:	mov	rax, qword ptr fs:[0x28]
0x7f95cc9d807b:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc9d807f:	xor	eax, eax
0x7f95cc9d8081:	mov	rax, qword ptr [rbp - 0x38]
0x7f95cc9d8085:	mov	rdi, rax
0x7f95cc9d8088:	call	0x7f95ccb9aef8
----------------------------------------------------------------------------------------------------
At  0x7f95cc9d23da
0x7f95cc9d23da:	push	rbp
0x7f95cc9d23db:	mov	rbp, rsp
0x7f95cc9d23de:	push	r13
0x7f95cc9d23e0:	push	r12
0x7f95cc9d23e2:	push	rbx
0x7f95cc9d23e3:	sub	rsp, 0x1c8
0x7f95cc9d23ea:	mov	qword ptr [rbp - 0x1c8], rdi
0x7f95cc9d23f1:	mov	qword ptr [rbp - 0x1d0], rsi
0x7f95cc9d23f8:	mov	qword ptr [rbp - 0x1d8], rdx
0x7f95cc9d23ff:	mov	qword ptr [rbp - 0x1e0], rcx
0x7f95cc9d2406:	mov	rax, qword ptr fs:[0x28]
0x7f95cc9d240f:	mov	qword ptr [rbp - 0x28], rax
0x7f95cc9d2413:	xor	eax, eax
0x7f95cc9d2415:	cmp	qword ptr [rbp - 0x1e0], 0
0x7f95cc9d241d:	je	0x7f95cc9d243c
----------------------------------------------------------------------------------------------------
At  0x7f95cc7d8a2f
0x7f95cc7d8a2f:	push	rbp
0x7f95cc7d8a30:	mov	rbp, rsp
0x7f95cc7d8a33:	push	rbx
0x7f95cc7d8a34:	sub	rsp, 0xc8
0x7f95cc7d8a3b:	mov	qword ptr [rbp - 0xb8], rdi
0x7f95cc7d8a42:	mov	qword ptr [rbp - 0xc0], rsi
0x7f95cc7d8a49:	mov	qword ptr [rbp - 0xc8], rdx
0x7f95cc7d8a50:	mov	dword ptr [rbp - 0xcc], ecx
0x7f95cc7d8a56:	mov	dword ptr [rbp - 0xd0], r8d
0x7f95cc7d8a5d:	mov	rax, qword ptr fs:[0x28]
0x7f95cc7d8a66:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc7d8a6a:	xor	eax, eax
0x7f95cc7d8a6c:	lea	rax, [rbp - 0xc8]
0x7f95cc7d8a73:	mov	rdi, rax
0x7f95cc7d8a76:	call	0x7f95c6822634
----------------------------------------------------------------------------------------------------
At  0x7f95cc25d2ee
0x7f95cc25d2ee:	push	rbp
0x7f95cc25d2ef:	mov	rbp, rsp
0x7f95cc25d2f2:	sub	rsp, 0x20
0x7f95cc25d2f6:	mov	qword ptr [rbp - 8], rdi
0x7f95cc25d2fa:	mov	qword ptr [rbp - 0x10], rsi
0x7f95cc25d2fe:	mov	qword ptr [rbp - 0x18], rdx
0x7f95cc25d302:	mov	dword ptr [rbp - 0x1c], ecx
0x7f95cc25d305:	mov	dword ptr [rbp - 0x20], r8d
0x7f95cc25d309:	mov	edi, dword ptr [rbp - 0x20]
0x7f95cc25d30c:	mov	ecx, dword ptr [rbp - 0x1c]
0x7f95cc25d30f:	mov	rdx, qword ptr [rbp - 0x18]
0x7f95cc25d313:	mov	rsi, qword ptr [rbp - 0x10]
0x7f95cc25d317:	mov	rax, qword ptr [rbp - 8]
0x7f95cc25d31b:	mov	r8d, edi
0x7f95cc25d31e:	mov	rdi, rax
0x7f95cc25d321:	call	0x7f95cc7d8a2f
----------------------------------------------------------------------------------------------------
At  0x7f95cc2a612e
0x7f95cc2a612e:	push	rbp
0x7f95cc2a612f:	mov	rbp, rsp
0x7f95cc2a6132:	sub	rsp, 0x30
0x7f95cc2a6136:	mov	qword ptr [rbp - 0x18], rdi
0x7f95cc2a613a:	mov	qword ptr [rbp - 0x20], rsi
0x7f95cc2a613e:	mov	qword ptr [rbp - 0x28], rdx
0x7f95cc2a6142:	mov	dword ptr [rbp - 0x2c], ecx
0x7f95cc2a6145:	mov	rax, qword ptr [rbp - 0x20]
0x7f95cc2a6149:	mov	rdi, rax
0x7f95cc2a614c:	call	0x7f95cc26d7d7
----------------------------------------------------------------------------------------------------
At  0x7f95cc33bdbb
0x7f95cc33bdbb:	push	rbp
0x7f95cc33bdbc:	mov	rbp, rsp
0x7f95cc33bdbf:	sub	rsp, 0x30
0x7f95cc33bdc3:	mov	qword ptr [rbp - 0x18], rdi
0x7f95cc33bdc7:	mov	qword ptr [rbp - 0x20], rsi
0x7f95cc33bdcb:	mov	dword ptr [rbp - 0x24], edx
0x7f95cc33bdce:	mov	ecx, dword ptr [rbp - 0x24]
0x7f95cc33bdd1:	mov	rdx, qword ptr [rbp - 0x20]
0x7f95cc33bdd5:	mov	rax, qword ptr [rbp - 0x18]
0x7f95cc33bdd9:	lea	rsi, [rip + 0x4e6d6c0]
0x7f95cc33bde0:	mov	rdi, rax
0x7f95cc33bde3:	call	0x7f95cc2a612e
----------------------------------------------------------------------------------------------------
At  0x7f95cc2d5261
0x7f95cc2d5261:	push	rbp
0x7f95cc2d5262:	mov	rbp, rsp
0x7f95cc2d5265:	push	rbx
0x7f95cc2d5266:	sub	rsp, 0xc8
0x7f95cc2d526d:	mov	qword ptr [rbp - 0xb8], rdi
0x7f95cc2d5274:	mov	qword ptr [rbp - 0xc0], rsi
0x7f95cc2d527b:	mov	eax, ecx
0x7f95cc2d527d:	mov	byte ptr [rbp - 0xc4], dl
0x7f95cc2d5283:	mov	byte ptr [rbp - 0xc8], al
0x7f95cc2d5289:	mov	rax, qword ptr fs:[0x28]
0x7f95cc2d5292:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc2d5296:	xor	eax, eax
0x7f95cc2d5298:	lea	rdx, [rbp - 0xb8]
0x7f95cc2d529f:	lea	rax, [rbp - 0xa0]
0x7f95cc2d52a6:	mov	rsi, rdx
0x7f95cc2d52a9:	mov	rdi, rax
0x7f95cc2d52ac:	call	0x7f95cc33b992
----------------------------------------------------------------------------------------------------
At  0x7f95cc2d2642
0x7f95cc2d2642:	push	rbp
0x7f95cc2d2643:	mov	rbp, rsp
0x7f95cc2d2646:	push	rbx
0x7f95cc2d2647:	sub	rsp, 0x48
0x7f95cc2d264b:	mov	qword ptr [rbp - 0x48], rdi
0x7f95cc2d264f:	mov	rax, qword ptr fs:[0x28]
0x7f95cc2d2658:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc2d265c:	xor	eax, eax
0x7f95cc2d265e:	lea	rax, [rbp - 0x40]
0x7f95cc2d2662:	mov	esi, 0
0x7f95cc2d2667:	mov	rdi, rax
0x7f95cc2d266a:	call	0x7f95c77db232
----------------------------------------------------------------------------------------------------
At  0x7f95cc2d63cc
0x7f95cc2d63cc:	push	rbp
0x7f95cc2d63cd:	mov	rbp, rsp
0x7f95cc2d63d0:	sub	rsp, 0x10
0x7f95cc2d63d4:	mov	qword ptr [rbp - 8], rdi
0x7f95cc2d63d8:	mov	rax, qword ptr [rbp - 8]
0x7f95cc2d63dc:	mov	rdi, rax
0x7f95cc2d63df:	call	0x7f95cc2d2642
----------------------------------------------------------------------------------------------------
At  0x7f95cc7070b7
0x7f95cc7070b7:	push	rbp
0x7f95cc7070b8:	mov	rbp, rsp
0x7f95cc7070bb:	sub	rsp, 0x20
0x7f95cc7070bf:	mov	qword ptr [rbp - 8], rdi
0x7f95cc7070c3:	mov	qword ptr [rbp - 0x10], rsi
0x7f95cc7070c7:	mov	qword ptr [rbp - 0x18], rdx
0x7f95cc7070cb:	call	0x7f95cc6f6da8
----------------------------------------------------------------------------------------------------
At  0x7f95c9be5dfe
0x7f95c9be5dfe:	push	rbp
0x7f95c9be5dff:	mov	rbp, rsp
0x7f95c9be5e02:	push	rbx
0x7f95c9be5e03:	sub	rsp, 0xb8
0x7f95c9be5e0a:	mov	qword ptr [rbp - 0xa8], rdi
0x7f95c9be5e11:	mov	qword ptr [rbp - 0xb0], rsi
0x7f95c9be5e18:	mov	qword ptr [rbp - 0xb8], rdx
0x7f95c9be5e1f:	mov	rax, qword ptr fs:[0x28]
0x7f95c9be5e28:	mov	qword ptr [rbp - 0x18], rax
0x7f95c9be5e2c:	xor	eax, eax
0x7f95c9be5e2e:	lea	rax, [rbp - 0x80]
0x7f95c9be5e32:	mov	rdi, rax
0x7f95c9be5e35:	call	0x7f95c9ddec62
----------------------------------------------------------------------------------------------------
At  0x7f95c9be5306
0x7f95c9be5306:	push	rbp
0x7f95c9be5307:	mov	rbp, rsp
0x7f95c9be530a:	push	rbx
0x7f95c9be530b:	sub	rsp, 0x48
0x7f95c9be530f:	mov	qword ptr [rbp - 0x38], rdi
0x7f95c9be5313:	mov	qword ptr [rbp - 0x40], rsi
0x7f95c9be5317:	mov	qword ptr [rbp - 0x48], rdx
0x7f95c9be531b:	mov	rax, qword ptr fs:[0x28]
0x7f95c9be5324:	mov	qword ptr [rbp - 0x18], rax
0x7f95c9be5328:	xor	eax, eax
0x7f95c9be532a:	cmp	qword ptr [rbp - 0x40], 0
0x7f95c9be532f:	jne	0x7f95c9be5358
----------------------------------------------------------------------------------------------------
At  0x7f95ca01e1f6
0x7f95ca01e1f6:	push	rbp
0x7f95ca01e1f7:	mov	rbp, rsp
0x7f95ca01e1fa:	sub	rsp, 0x40
0x7f95ca01e1fe:	mov	qword ptr [rbp - 0x38], rdi
0x7f95ca01e202:	mov	rax, qword ptr fs:[0x28]
0x7f95ca01e20b:	mov	qword ptr [rbp - 8], rax
0x7f95ca01e20f:	xor	eax, eax
0x7f95ca01e211:	mov	rax, qword ptr [rbp - 0x38]
0x7f95ca01e215:	add	rax, 0x30
0x7f95ca01e219:	mov	rdi, rax
0x7f95ca01e21c:	call	0x7f95c7803026
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool 0x9e3779b9 * unconstrained_ret_depth_limit__89_64{UNINITIALIZED}[31:0][31:1] == 0x0>
1  <Bool 0x18 * (0x0 .. 0xfffffffe + 0x9e3779b9 * unconstrained_ret_depth_limit__89_64{UNINITIALIZED}[31:0][31:20]) == 0x17fe8>
2  <Bool 0x9e3779b9 * unconstrained_ret_depth_limit__93_64{UNINITIALIZED}[31:0][31:1] == 0x0>
3  <Bool unconstrained_ret_depth_limit__97_64{UNINITIALIZED} == 0xc0008230>
4  <Bool unconstrained_ret_depth_limit__100_64{UNINITIALIZED} == 0xc0008930>
5  <Bool !(mem_c0008930_101_8{UNINITIALIZED} == 0) || !(mem_c0008931_102_56{UNINITIALIZED} == 0xfff90000000000)>
6  <Bool unconstrained_ret_depth_limit__107_64{UNINITIALIZED}[31:7] == 0x0>
7  <Bool unconstrained_ret_depth_limit__107_64{UNINITIALIZED}[6:0] <= 122>
8  <Bool unconstrained_ret_depth_limit__110_64{UNINITIALIZED} == 0xc0009030>
9  <Bool unconstrained_ret_depth_limit__155_64{UNINITIALIZED} == 0xc0009730>
10  <Bool unconstrained_ret_depth_limit__174_64{UNINITIALIZED} == 0xc0009e30>
11  <Bool unconstrained_ret_depth_limit__182_64{UNINITIALIZED} == 0xc000a530>
12  <Bool unconstrained_ret_depth_limit__193_64{UNINITIALIZED} == 0xc000ac30>
13  <Bool !(mem_c000ac30_195_8{UNINITIALIZED} == 0) || !(mem_c000ac31_196_56{UNINITIALIZED} == 0x0)>
14  <Bool mem_c0009030_112_8{UNINITIALIZED} == 1>
15  <Bool mem_c0009031_113_56{UNINITIALIZED}[38:0] == 0x0>
16  <Bool !(unconstrained_ret_depth_limit__247_64{UNINITIALIZED}[0:0] == 1) || !(unconstrained_ret_depth_limit__247_64{UNINITIALIZED}[7:1] == 0)>
17  <Bool unconstrained_ret_depth_limit__644_64{UNINITIALIZED} == 0xc000b330>
18  <Bool unconstrained_ret_depth_limit__1053_64{UNINITIALIZED} == 0xc000ba30>
19  <Bool !(mem_c000ba30_1086_8{UNINITIALIZED} == 0) || !(mem_c000ba31_1087_56{UNINITIALIZED} == 0x0)>
20  <Bool unconstrained_ret_depth_limit__1312_64{UNINITIALIZED} == 0xc000c130>
21  <Bool mem_c000c131_1362_56{UNINITIALIZED} == 0xc000c8>
22  <Bool mem_c000c130_1361_8{UNINITIALIZED} == 48>
23  <Bool (mem_c000c833_1555_8{UNINITIALIZED} .. mem_c000c832_1554_8{UNINITIALIZED}) <= (mem_c000c831_1553_8{UNINITIALIZED} .. mem_c000c830_1552_8{UNINITIALIZED})>
24  <Bool !(mem_c000c830_1552_8{UNINITIALIZED} == 0) || !(mem_c000c831_1553_8{UNINITIALIZED} == 0)>
25  <Bool unconstrained_ret_depth_limit__1745_64{UNINITIALIZED} == 0xc000cf30>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c000c131_1362_56{UNINITIALIZED} .. mem_c000c130_1361_8{UNINITIALIZED}>  r8: <BV64 0x7ffcc7d89840>
rbx: <BV64 0x5563803a0e50>  r9: <BV64 0x55637e04b2b8>
rcx: <BV64 0x13>  r10: <BV64 0x7ffcc7d89ad0>
rdx: <BV64 0x0 .. mem_c000cf33_1813_8{UNINITIALIZED} .. mem_c000cf32_1812_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 unconstrained_ret_depth_limit__1406_64{UNINITIALIZED}>  r12: <BV64 0x5563803a4af0>
rdi: <BV64 mem_c000c131_1362_56{UNINITIALIZED} .. mem_c000c130_1361_8{UNINITIALIZED}>  r13: <BV64 0x55637dc71c40>
rsp: <BV64 0x7ffcc7d89480>  r14: <BV64 0x7f95c686eac4>
rbp: <BV64 0x7ffcc7d89510>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I16 t4:Ity_I64

   00 | ------ IMark(0x7f95ccb9f68f, 4, 0) ------
   01 | t2 = GET:I64(rax)
   02 | t1 = Add64(t2,0x0000000000000002)
   03 | t3 = GET:I16(dx)
   04 | STle(t1) = t3
   05 | ------ IMark(0x7f95ccb9f693, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f95ccb9f69f; Ijk_Boring
}
0x7f95ccb9f68f:	mov	word ptr [rax + 2], dx
0x7f95ccb9f693:	jmp	0x7f95ccb9f69f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x5563806ea640
maximum memory range     [  0x5563806ea640  ,  0x5563806ea698  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x58
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj87_88_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0008030
maximum memory range     [  0xc0008030  ,  0xc0008730  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0008930
maximum memory range     [  0xc0008730  ,  0xc0008e30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0008930_101_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0009030
maximum memory range     [  0xc0008e30  ,  0xc0009530  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0009030_112_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0009730
maximum memory range     [  0xc0009530  ,  0xc0009c30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ------------------
<BV8 mem_c0009730_157_8{UNINITIALIZED}>  0x0,0x7ffc07d80020

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0009e30
maximum memory range     [  0xc0009c30  ,  0xc000a330  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0009e30_178_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000a530
maximum memory range     [  0xc000a330  ,  0xc000aa30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c000a530_185_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc000ac30
maximum memory range     [  0xc000aa30  ,  0xc000b130  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c000ac30_195_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc000b130
maximum memory range     [  0xc000b130  ,  0xc000b830  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc000ba30
maximum memory range     [  0xc000b830  ,  0xc000bf30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000ba30_1086_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc000c130
maximum memory range     [  0xc000bf30  ,  0xc000c630  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_11       0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000c130_1361_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_11
(possible) base address  0xc000c830
maximum memory range     [  0xc000c630  ,  0xc000cd30  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000c832_1554_8{UNINITIALIZED}>  0x2
<BV8 mem_c000c833_1555_8{UNINITIALIZED}>  0x3

****************************************************************************************************
object:                  OBJ_12
(possible) base address  0xc000cf30
maximum memory range     [  0xc000cd30  ,  0xc000d430  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000cf30_1810_8{UNINITIALIZED}>  0x0
<BV8 mem_c000cf31_1811_8{UNINITIALIZED}>  0x1
<BV8 mem_c000cf32_1812_8{UNINITIALIZED}>  0x2
<BV8 mem_c000cf33_1813_8{UNINITIALIZED}>  0x3

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                      address
------------------------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__89_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__93_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__97_64{UNINITIALIZED}>
<BV8 mem_c0008230_98_8{UNINITIALIZED}>
<BV56 mem_c0008231_99_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__100_64{UNINITIALIZED}>
<BV56 mem_c0008931_102_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__107_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__110_64{UNINITIALIZED}>
<BV56 mem_c0009031_113_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__132_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__134_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__138_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__149_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__155_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__158_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__174_64{UNINITIALIZED}>
<BV56 mem_c0009e31_179_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__182_64{UNINITIALIZED}>
<BV56 mem_c000a531_186_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__193_64{UNINITIALIZED}>
<BV56 mem_c000ac31_196_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__241_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__247_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__644_64{UNINITIALIZED}>
<BV8 mem_c000b330_673_8{UNINITIALIZED}>
<BV56 mem_c000b331_674_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1053_64{UNINITIALIZED}>
<BV56 mem_c000ba31_1087_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1229_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1312_64{UNINITIALIZED}>
<BV56 mem_c000c131_1362_56{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1406_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1509_64{UNINITIALIZED}>
<BV8 mem_c000c830_1552_8{UNINITIALIZED}>
<BV8 mem_c000c831_1553_8{UNINITIALIZED}>
<BV64 reg_cc_ndep_1556_64{UNINITIALIZED}>
<BV64 unconstrained_ret_depth_limit__1745_64{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140281361593999
Write  <BV64 0x2>  bytes to  <BV64 (mem_c000c131_1362_56{UNINITIALIZED} .. mem_c000c130_1361_8{UNINITIALIZED}) + 0x2>
with expression : <BV16 mem_c000cf33_1813_8{UNINITIALIZED} .. mem_c000cf32_1812_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f95ccb9f57e
0x7f95ccb9f57e:	push	rbp
0x7f95ccb9f57f:	mov	rbp, rsp
0x7f95ccb9f582:	sub	rsp, 0x90
0x7f95ccb9f589:	mov	qword ptr [rbp - 0x78], rdi
0x7f95ccb9f58d:	mov	dword ptr [rbp - 0x7c], esi
0x7f95ccb9f590:	mov	qword ptr [rbp - 0x88], rdx
0x7f95ccb9f597:	mov	rax, qword ptr fs:[0x28]
0x7f95ccb9f5a0:	mov	qword ptr [rbp - 8], rax
0x7f95ccb9f5a4:	xor	eax, eax
0x7f95ccb9f5a6:	mov	rax, qword ptr [rbp - 0x78]
0x7f95ccb9f5aa:	mov	rdi, rax
0x7f95ccb9f5ad:	call	0x7f95ccb99b8c
----------------------------------------------------------------------------------------------------
At  0x7f95ccb9aef8
0x7f95ccb9aef8:	push	rbp
0x7f95ccb9aef9:	mov	rbp, rsp
0x7f95ccb9aefc:	sub	rsp, 0x20
0x7f95ccb9af00:	mov	qword ptr [rbp - 0x18], rdi
0x7f95ccb9af04:	mov	dword ptr [rbp - 0xc], 0x13
0x7f95ccb9af0b:	mov	qword ptr [rbp - 8], 0x30
0x7f95ccb9af13:	mov	rax, qword ptr [rbp - 0x18]
0x7f95ccb9af17:	mov	rdi, rax
0x7f95ccb9af1a:	call	0x7f95cc1c87c4
----------------------------------------------------------------------------------------------------
At  0x7f95cc9d8058
0x7f95cc9d8058:	push	rbp
0x7f95cc9d8059:	mov	rbp, rsp
0x7f95cc9d805c:	push	r12
0x7f95cc9d805e:	push	rbx
0x7f95cc9d805f:	sub	rsp, 0x40
0x7f95cc9d8063:	mov	qword ptr [rbp - 0x38], rdi
0x7f95cc9d8067:	mov	qword ptr [rbp - 0x40], rsi
0x7f95cc9d806b:	mov	qword ptr [rbp - 0x48], rdx
0x7f95cc9d806f:	mov	dword ptr [rbp - 0x4c], ecx
0x7f95cc9d8072:	mov	rax, qword ptr fs:[0x28]
0x7f95cc9d807b:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc9d807f:	xor	eax, eax
0x7f95cc9d8081:	mov	rax, qword ptr [rbp - 0x38]
0x7f95cc9d8085:	mov	rdi, rax
0x7f95cc9d8088:	call	0x7f95ccb9aef8
----------------------------------------------------------------------------------------------------
At  0x7f95cc9d23da
0x7f95cc9d23da:	push	rbp
0x7f95cc9d23db:	mov	rbp, rsp
0x7f95cc9d23de:	push	r13
0x7f95cc9d23e0:	push	r12
0x7f95cc9d23e2:	push	rbx
0x7f95cc9d23e3:	sub	rsp, 0x1c8
0x7f95cc9d23ea:	mov	qword ptr [rbp - 0x1c8], rdi
0x7f95cc9d23f1:	mov	qword ptr [rbp - 0x1d0], rsi
0x7f95cc9d23f8:	mov	qword ptr [rbp - 0x1d8], rdx
0x7f95cc9d23ff:	mov	qword ptr [rbp - 0x1e0], rcx
0x7f95cc9d2406:	mov	rax, qword ptr fs:[0x28]
0x7f95cc9d240f:	mov	qword ptr [rbp - 0x28], rax
0x7f95cc9d2413:	xor	eax, eax
0x7f95cc9d2415:	cmp	qword ptr [rbp - 0x1e0], 0
0x7f95cc9d241d:	je	0x7f95cc9d243c
----------------------------------------------------------------------------------------------------
At  0x7f95cc7d8a2f
0x7f95cc7d8a2f:	push	rbp
0x7f95cc7d8a30:	mov	rbp, rsp
0x7f95cc7d8a33:	push	rbx
0x7f95cc7d8a34:	sub	rsp, 0xc8
0x7f95cc7d8a3b:	mov	qword ptr [rbp - 0xb8], rdi
0x7f95cc7d8a42:	mov	qword ptr [rbp - 0xc0], rsi
0x7f95cc7d8a49:	mov	qword ptr [rbp - 0xc8], rdx
0x7f95cc7d8a50:	mov	dword ptr [rbp - 0xcc], ecx
0x7f95cc7d8a56:	mov	dword ptr [rbp - 0xd0], r8d
0x7f95cc7d8a5d:	mov	rax, qword ptr fs:[0x28]
0x7f95cc7d8a66:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc7d8a6a:	xor	eax, eax
0x7f95cc7d8a6c:	lea	rax, [rbp - 0xc8]
0x7f95cc7d8a73:	mov	rdi, rax
0x7f95cc7d8a76:	call	0x7f95c6822634
----------------------------------------------------------------------------------------------------
At  0x7f95cc25d2ee
0x7f95cc25d2ee:	push	rbp
0x7f95cc25d2ef:	mov	rbp, rsp
0x7f95cc25d2f2:	sub	rsp, 0x20
0x7f95cc25d2f6:	mov	qword ptr [rbp - 8], rdi
0x7f95cc25d2fa:	mov	qword ptr [rbp - 0x10], rsi
0x7f95cc25d2fe:	mov	qword ptr [rbp - 0x18], rdx
0x7f95cc25d302:	mov	dword ptr [rbp - 0x1c], ecx
0x7f95cc25d305:	mov	dword ptr [rbp - 0x20], r8d
0x7f95cc25d309:	mov	edi, dword ptr [rbp - 0x20]
0x7f95cc25d30c:	mov	ecx, dword ptr [rbp - 0x1c]
0x7f95cc25d30f:	mov	rdx, qword ptr [rbp - 0x18]
0x7f95cc25d313:	mov	rsi, qword ptr [rbp - 0x10]
0x7f95cc25d317:	mov	rax, qword ptr [rbp - 8]
0x7f95cc25d31b:	mov	r8d, edi
0x7f95cc25d31e:	mov	rdi, rax
0x7f95cc25d321:	call	0x7f95cc7d8a2f
----------------------------------------------------------------------------------------------------
At  0x7f95cc2a612e
0x7f95cc2a612e:	push	rbp
0x7f95cc2a612f:	mov	rbp, rsp
0x7f95cc2a6132:	sub	rsp, 0x30
0x7f95cc2a6136:	mov	qword ptr [rbp - 0x18], rdi
0x7f95cc2a613a:	mov	qword ptr [rbp - 0x20], rsi
0x7f95cc2a613e:	mov	qword ptr [rbp - 0x28], rdx
0x7f95cc2a6142:	mov	dword ptr [rbp - 0x2c], ecx
0x7f95cc2a6145:	mov	rax, qword ptr [rbp - 0x20]
0x7f95cc2a6149:	mov	rdi, rax
0x7f95cc2a614c:	call	0x7f95cc26d7d7
----------------------------------------------------------------------------------------------------
At  0x7f95cc33bdbb
0x7f95cc33bdbb:	push	rbp
0x7f95cc33bdbc:	mov	rbp, rsp
0x7f95cc33bdbf:	sub	rsp, 0x30
0x7f95cc33bdc3:	mov	qword ptr [rbp - 0x18], rdi
0x7f95cc33bdc7:	mov	qword ptr [rbp - 0x20], rsi
0x7f95cc33bdcb:	mov	dword ptr [rbp - 0x24], edx
0x7f95cc33bdce:	mov	ecx, dword ptr [rbp - 0x24]
0x7f95cc33bdd1:	mov	rdx, qword ptr [rbp - 0x20]
0x7f95cc33bdd5:	mov	rax, qword ptr [rbp - 0x18]
0x7f95cc33bdd9:	lea	rsi, [rip + 0x4e6d6c0]
0x7f95cc33bde0:	mov	rdi, rax
0x7f95cc33bde3:	call	0x7f95cc2a612e
----------------------------------------------------------------------------------------------------
At  0x7f95cc2d5261
0x7f95cc2d5261:	push	rbp
0x7f95cc2d5262:	mov	rbp, rsp
0x7f95cc2d5265:	push	rbx
0x7f95cc2d5266:	sub	rsp, 0xc8
0x7f95cc2d526d:	mov	qword ptr [rbp - 0xb8], rdi
0x7f95cc2d5274:	mov	qword ptr [rbp - 0xc0], rsi
0x7f95cc2d527b:	mov	eax, ecx
0x7f95cc2d527d:	mov	byte ptr [rbp - 0xc4], dl
0x7f95cc2d5283:	mov	byte ptr [rbp - 0xc8], al
0x7f95cc2d5289:	mov	rax, qword ptr fs:[0x28]
0x7f95cc2d5292:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc2d5296:	xor	eax, eax
0x7f95cc2d5298:	lea	rdx, [rbp - 0xb8]
0x7f95cc2d529f:	lea	rax, [rbp - 0xa0]
0x7f95cc2d52a6:	mov	rsi, rdx
0x7f95cc2d52a9:	mov	rdi, rax
0x7f95cc2d52ac:	call	0x7f95cc33b992
----------------------------------------------------------------------------------------------------
At  0x7f95cc2d2642
0x7f95cc2d2642:	push	rbp
0x7f95cc2d2643:	mov	rbp, rsp
0x7f95cc2d2646:	push	rbx
0x7f95cc2d2647:	sub	rsp, 0x48
0x7f95cc2d264b:	mov	qword ptr [rbp - 0x48], rdi
0x7f95cc2d264f:	mov	rax, qword ptr fs:[0x28]
0x7f95cc2d2658:	mov	qword ptr [rbp - 0x18], rax
0x7f95cc2d265c:	xor	eax, eax
0x7f95cc2d265e:	lea	rax, [rbp - 0x40]
0x7f95cc2d2662:	mov	esi, 0
0x7f95cc2d2667:	mov	rdi, rax
0x7f95cc2d266a:	call	0x7f95c77db232
----------------------------------------------------------------------------------------------------
At  0x7f95cc2d63cc
0x7f95cc2d63cc:	push	rbp
0x7f95cc2d63cd:	mov	rbp, rsp
0x7f95cc2d63d0:	sub	rsp, 0x10
0x7f95cc2d63d4:	mov	qword ptr [rbp - 8], rdi
0x7f95cc2d63d8:	mov	rax, qword ptr [rbp - 8]
0x7f95cc2d63dc:	mov	rdi, rax
0x7f95cc2d63df:	call	0x7f95cc2d2642
----------------------------------------------------------------------------------------------------
At  0x7f95cc7070b7
0x7f95cc7070b7:	push	rbp
0x7f95cc7070b8:	mov	rbp, rsp
0x7f95cc7070bb:	sub	rsp, 0x20
0x7f95cc7070bf:	mov	qword ptr [rbp - 8], rdi
0x7f95cc7070c3:	mov	qword ptr [rbp - 0x10], rsi
0x7f95cc7070c7:	mov	qword ptr [rbp - 0x18], rdx
0x7f95cc7070cb:	call	0x7f95cc6f6da8
----------------------------------------------------------------------------------------------------
At  0x7f95c9be5dfe
0x7f95c9be5dfe:	push	rbp
0x7f95c9be5dff:	mov	rbp, rsp
0x7f95c9be5e02:	push	rbx
0x7f95c9be5e03:	sub	rsp, 0xb8
0x7f95c9be5e0a:	mov	qword ptr [rbp - 0xa8], rdi
0x7f95c9be5e11:	mov	qword ptr [rbp - 0xb0], rsi
0x7f95c9be5e18:	mov	qword ptr [rbp - 0xb8], rdx
0x7f95c9be5e1f:	mov	rax, qword ptr fs:[0x28]
0x7f95c9be5e28:	mov	qword ptr [rbp - 0x18], rax
0x7f95c9be5e2c:	xor	eax, eax
0x7f95c9be5e2e:	lea	rax, [rbp - 0x80]
0x7f95c9be5e32:	mov	rdi, rax
0x7f95c9be5e35:	call	0x7f95c9ddec62
----------------------------------------------------------------------------------------------------
At  0x7f95c9be5306
0x7f95c9be5306:	push	rbp
0x7f95c9be5307:	mov	rbp, rsp
0x7f95c9be530a:	push	rbx
0x7f95c9be530b:	sub	rsp, 0x48
0x7f95c9be530f:	mov	qword ptr [rbp - 0x38], rdi
0x7f95c9be5313:	mov	qword ptr [rbp - 0x40], rsi
0x7f95c9be5317:	mov	qword ptr [rbp - 0x48], rdx
0x7f95c9be531b:	mov	rax, qword ptr fs:[0x28]
0x7f95c9be5324:	mov	qword ptr [rbp - 0x18], rax
0x7f95c9be5328:	xor	eax, eax
0x7f95c9be532a:	cmp	qword ptr [rbp - 0x40], 0
0x7f95c9be532f:	jne	0x7f95c9be5358
----------------------------------------------------------------------------------------------------
At  0x7f95ca01e1f6
0x7f95ca01e1f6:	push	rbp
0x7f95ca01e1f7:	mov	rbp, rsp
0x7f95ca01e1fa:	sub	rsp, 0x40
0x7f95ca01e1fe:	mov	qword ptr [rbp - 0x38], rdi
0x7f95ca01e202:	mov	rax, qword ptr fs:[0x28]
0x7f95ca01e20b:	mov	qword ptr [rbp - 8], rax
0x7f95ca01e20f:	xor	eax, eax
0x7f95ca01e211:	mov	rax, qword ptr [rbp - 0x38]
0x7f95ca01e215:	add	rax, 0x30
0x7f95ca01e219:	mov	rdi, rax
0x7f95ca01e21c:	call	0x7f95c7803026
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool 0x9e3779b9 * unconstrained_ret_depth_limit__89_64{UNINITIALIZED}[31:0][31:1] == 0x0>
1  <Bool 0x18 * (0x0 .. 0xfffffffe + 0x9e3779b9 * unconstrained_ret_depth_limit__89_64{UNINITIALIZED}[31:0][31:20]) == 0x17fe8>
2  <Bool 0x9e3779b9 * unconstrained_ret_depth_limit__93_64{UNINITIALIZED}[31:0][31:1] == 0x0>
3  <Bool unconstrained_ret_depth_limit__97_64{UNINITIALIZED} == 0xc0008230>
4  <Bool unconstrained_ret_depth_limit__100_64{UNINITIALIZED} == 0xc0008930>
5  <Bool !(mem_c0008930_101_8{UNINITIALIZED} == 0) || !(mem_c0008931_102_56{UNINITIALIZED} == 0xfff90000000000)>
6  <Bool unconstrained_ret_depth_limit__107_64{UNINITIALIZED}[31:7] == 0x0>
7  <Bool unconstrained_ret_depth_limit__107_64{UNINITIALIZED}[6:0] <= 122>
8  <Bool unconstrained_ret_depth_limit__110_64{UNINITIALIZED} == 0xc0009030>
9  <Bool unconstrained_ret_depth_limit__155_64{UNINITIALIZED} == 0xc0009730>
10  <Bool unconstrained_ret_depth_limit__174_64{UNINITIALIZED} == 0xc0009e30>
11  <Bool unconstrained_ret_depth_limit__182_64{UNINITIALIZED} == 0xc000a530>
12  <Bool unconstrained_ret_depth_limit__193_64{UNINITIALIZED} == 0xc000ac30>
13  <Bool !(mem_c000ac30_195_8{UNINITIALIZED} == 0) || !(mem_c000ac31_196_56{UNINITIALIZED} == 0x0)>
14  <Bool mem_c0009030_112_8{UNINITIALIZED} == 1>
15  <Bool mem_c0009031_113_56{UNINITIALIZED}[38:0] == 0x0>
16  <Bool !(unconstrained_ret_depth_limit__247_64{UNINITIALIZED}[0:0] == 1) || !(unconstrained_ret_depth_limit__247_64{UNINITIALIZED}[7:1] == 0)>
17  <Bool unconstrained_ret_depth_limit__644_64{UNINITIALIZED} == 0xc000b330>
18  <Bool unconstrained_ret_depth_limit__1053_64{UNINITIALIZED} == 0xc000ba30>
19  <Bool !(mem_c000ba30_1086_8{UNINITIALIZED} == 0) || !(mem_c000ba31_1087_56{UNINITIALIZED} == 0x0)>
20  <Bool unconstrained_ret_depth_limit__1312_64{UNINITIALIZED} == 0xc000c130>
21  <Bool mem_c000c131_1362_56{UNINITIALIZED} == 0xc000c8>
22  <Bool mem_c000c130_1361_8{UNINITIALIZED} == 48>
23  <Bool (mem_c000c833_1555_8{UNINITIALIZED} .. mem_c000c832_1554_8{UNINITIALIZED}) <= (mem_c000c831_1553_8{UNINITIALIZED} .. mem_c000c830_1552_8{UNINITIALIZED})>
24  <Bool !(mem_c000c830_1552_8{UNINITIALIZED} == 0) || !(mem_c000c831_1553_8{UNINITIALIZED} == 0)>
25  <Bool unconstrained_ret_depth_limit__1745_64{UNINITIALIZED} == 0xc000cf30>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

****************************************************************************************************
Some control hijacks: 
-----end dump executor-----
