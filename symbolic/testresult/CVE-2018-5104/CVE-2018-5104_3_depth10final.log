-----start dump executor-----
Step:  664
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        1
control_hijack (C)         0
active (A)               100
unconstrained (U)          0
errored (E)                0
found                      0
avoided                    0
paths to write primitive:  1
paths to control hijack:  0
first primitive after:  664
total paths:  644
****************************************************************************************************
Milestones: 
address           number of active states have passed it
--------------  ----------------------------------------
0x7f95ca01d17b                                         0
0x7f95c7f10b58                                         0
0x7f95c7f10c50                                         0
address           number of active states just passed it
--------------  ----------------------------------------
0x7f95ca01d17b                                         0
0x7f95c7f10b58                                         0
0x7f95c7f10c50                                         0
****************************************************************************************************
Some errored states: 
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 depth_limited_23>  r8: <BV64 0x0>
rbx: <BV64 mem_c0004839_1308_56{UNINITIALIZED} .. mem_c0004838_1307_8{UNINITIALIZED}>  r9: <BV64 0x55637e04b2b8>
rcx: <BV64 0x0 .. depth_limited_19[31:0]>  r10: <BV64 0x7ffcc7d89ad0>
rdx: <BV64 0x20 + (mem_c0004839_1308_56{UNINITIALIZED} .. mem_c0004838_1307_8{UNINITIALIZED})>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 0x5563805b3f40>
rdi: <BV64 0x20 + (mem_c0004839_1308_56{UNINITIALIZED} .. mem_c0004838_1307_8{UNINITIALIZED})>  r13: <BV64 0x55637dc71c40>
rsp: <BV64 0x7ffcc7d898d0>  r14: <BV64 0x7f95c686eac4>
rbp: <BV64 0x7ffcc7d89920>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I32 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I32 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64

   00 | ------ IMark(0x7f95cc2a4a36, 3, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t8 = GET:I64(rdx)
   03 | STle(t0) = t8
   04 | PUT(rip) = 0x00007f95cc2a4a39
   05 | ------ IMark(0x7f95cc2a4a39, 4, 0) ------
   06 | t10 = GET:I64(rbp)
   07 | t9 = Add64(t10,0xffffffffffffffe8)
   08 | t11 = LDle:I64(t9)
   09 | PUT(rip) = 0x00007f95cc2a4a3d
   10 | ------ IMark(0x7f95cc2a4a3d, 3, 0) ------
   11 | t12 = Add64(t10,0xffffffffffffffd4)
   12 | t15 = LDle:I32(t12)
   13 | t14 = 32Uto64(t15)
   14 | PUT(rcx) = t14
   15 | PUT(rip) = 0x00007f95cc2a4a40
   16 | ------ IMark(0x7f95cc2a4a40, 3, 0) ------
   17 | t16 = Add64(t10,0xffffffffffffffd0)
   18 | t19 = LDle:I32(t16)
   19 | t18 = 32Uto64(t19)
   20 | PUT(rdx) = t18
   21 | PUT(rip) = 0x00007f95cc2a4a43
   22 | ------ IMark(0x7f95cc2a4a43, 4, 0) ------
   23 | t20 = Add64(t10,0xffffffffffffffe0)
   24 | t22 = LDle:I64(t20)
   25 | PUT(rsi) = t22
   26 | PUT(rip) = 0x00007f95cc2a4a47
   27 | ------ IMark(0x7f95cc2a4a47, 4, 0) ------
   28 | t23 = Add64(t10,0xffffffffffffffd8)
   29 | t25 = LDle:I64(t23)
   30 | PUT(rax) = t25
   31 | ------ IMark(0x7f95cc2a4a4b, 3, 0) ------
   32 | PUT(r8) = t11
   33 | ------ IMark(0x7f95cc2a4a4e, 3, 0) ------
   34 | PUT(rdi) = t25
   35 | PUT(rip) = 0x00007f95cc2a4a51
   36 | ------ IMark(0x7f95cc2a4a51, 5, 0) ------
   37 | t29 = GET:I64(rsp)
   38 | t28 = Sub64(t29,0x0000000000000008)
   39 | PUT(rsp) = t28
   40 | STle(t28) = 0x00007f95cc2a4a56
   41 | t30 = Sub64(t28,0x0000000000000080)
   42 | ====== AbiHint(0xt30, 128, 0x00007f95cc1fa65a) ======
   NEXT: PUT(rip) = 0x00007f95cc1fa65a; Ijk_Call
}
0x7f95cc2a4a36:	mov	qword ptr [rax], rdx
0x7f95cc2a4a39:	mov	rdi, qword ptr [rbp - 0x18]
0x7f95cc2a4a3d:	mov	ecx, dword ptr [rbp - 0x2c]
0x7f95cc2a4a40:	mov	edx, dword ptr [rbp - 0x30]
0x7f95cc2a4a43:	mov	rsi, qword ptr [rbp - 0x20]
0x7f95cc2a4a47:	mov	rax, qword ptr [rbp - 0x28]
0x7f95cc2a4a4b:	mov	r8, rdi
0x7f95cc2a4a4e:	mov	rdi, rax
0x7f95cc2a4a51:	call	0x7f95cc1fa65a
-----end dump state-----
---------------------------------------------------------------------------
ClaripyOperationError                     Traceback (most recent call last)
~/Firefox-Exploitation/symbolic/CVE-2018-5104.py in <module>
     18 e = executor.Executor("/nas/ug16zy2/corefiles/core5104_3", stop_when_primtive_found=1,do_nothing_instr=do_nothing, debug=False, depth_limit=10, milestones=milestones, log_interval = 50, avoids= avoids, log_file="CVE-2018-5104_3_depth10", lib_call_hook = lib_call)
     19 
---> 20 e.run(uaf_object_base=0x5563806ea640, uaf_object_size=88, context_end=0x00007f95c8d4237f)

~/Firefox-Exploitation/symbolic/executor.py in run(self, uaf_object_base, uaf_object_size, context_end, precondition)
    149         log.info('[+] finishing setting up, start explore?')
    150         import IPython; IPython.embed()
--> 151         self.explore(ss)
    152         if self.depth_limit is not None:
    153             log.warning("[+] Depth limited for callstack")

~/Firefox-Exploitation/symbolic/explore.py in explore(self, s)
     96                 self.trim_state_history()
     97 
---> 98         self.dump_executor_into_file(self.log_file+'final.log')
     99 
    100 

~/Firefox-Exploitation/symbolic/util.py in dump_executor_into_file(self, file)
    119         sys.stdout = open(file, 'w')
    120         # print
--> 121         self.debug_executor(color=False)
    122         # end
    123         sys.stdout = stdout

~/Firefox-Exploitation/symbolic/util.py in debug_executor(self, nPrimitive, color)
    100             print("Write primitive ", str(i))
    101             print('*' * 100)
--> 102             self.dump_state_result(s, interact=False, color=color)
    103             i += 1
    104 

~/Firefox-Exploitation/symbolic/util.py in dump_state_result(self, state, interact, color)
     53     def dump_state_result(self, state, interact = True, color=True):
     54         self.dump_state(state)
---> 55         d = DumpInfo(self.ap, state, self.uaf_object_base, self.uaf_object_size, color=color)
     56         if interact:
     57             import IPython; IPython.embed()

~/Firefox-Exploitation/symbolic/visualization/dumpInfo.py in __init__(self, proj, state, uaf_object_base, uaf_object_size, color)
     30         self.vars = list(self.state.solver.all_variables)
     31 
---> 32         analyse = StateAnalyse(self.state, self.uaf_object_base, self.uaf_object_size)
     33 
     34         # result to be analysed

~/Firefox-Exploitation/symbolic/analyse/stateAnalyse.py in __init__(self, state, uaf_object_base, uaf_object_size)
     26         self.constraints = self.state.solver.constraints.copy()
     27         self.constraints.sort(key=lambda c: str(c))
---> 28         self.analyse()
     29 
     30     def analyse(self):

~/Firefox-Exploitation/symbolic/analyse/stateAnalyse.py in analyse(self)
     41         # other info
     42         for i in range(len(self.obj_mem)):
---> 43             self.obj_start.append(self.__possible_start(i))
     44             if self.obj_mem[i][0] == self.uaf_object_base:
     45                 self.name[i] = "UAF_OBJ"

~/Firefox-Exploitation/symbolic/analyse/stateAnalyse.py in __possible_start(self, index)
    140 
    141         for (v, idx) in self.symbolic_return_point:
--> 142             if idx == index and v < start:
    143                 start = v.long
    144                 found = True

~/.virtualenvs/angr-ex/lib/python3.6/site-packages/claripy-8.20.1.7-py3.6.egg/claripy/ast/base.py in __bool__(self)
    647         constraint solve. This caused tons of issues.
    648         """
--> 649         raise ClaripyOperationError('testing Expressions for truthiness does not do what you want, as these expressions can be symbolic')
    650 
    651     def structurally_match(self, o):

ClaripyOperationError: testing Expressions for truthiness does not do what you want, as these expressions can be symbolic
