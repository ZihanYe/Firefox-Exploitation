-----start dump executor-----
Step:  1040
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        6
control_hijack (C)         5
active (A)               100
unconstrained (U)          0
errored (E)               46
found                      0
avoided                    0
paths to write primitive:  8
paths to control hijack:  68
first primitive after:  976
total paths:  1094
****************************************************************************************************
Some errored states: 
<State errored with "IR decoding error at 0xc4e5217d020. You can hook this instruction with a python replacement using project.hook(0xc4e5217d020, your_function, length=length_of_instruction).">
<State errored with "IR decoding error at 0xc4e5217d020. You can hook this instruction with a python replacement using project.hook(0xc4e5217d020, your_function, length=length_of_instruction).">
<State errored with "IR decoding error at 0xc4e5217d020. You can hook this instruction with a python replacement using project.hook(0xc4e5217d020, your_function, length=length_of_instruction).">
<State errored with "IR decoding error at 0xc4e5217d020. You can hook this instruction with a python replacement using project.hook(0xc4e5217d020, your_function, length=length_of_instruction).">
<State errored with "no implementation found for operation CmpLE">
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x0 .. ~mem_c0002507_1410_32{UNINITIALIZED}[5:0] .. 0>  r8: <BV64 0x4>
rbx: <BV64 0x0>  r9: <BV64 mem_8b480000001aea2e_1408_64{UNINITIALIZED}>
rcx: <BV64 (0x0 .. ~mem_c0002507_1410_32{UNINITIALIZED}[5:0] .. 0) + mem_138b48000000161e_1409_64{UNINITIALIZED}>  r10: <BV64 mem_138b47ffffff9cee_1351_64{UNINITIALIZED}>
rdx: <BV64 mem_c0003516_1442_64{UNINITIALIZED}>  r11: <BV64 0x0 .. ~mem_c0002507_1410_32{UNINITIALIZED}[5:0]>
rsi: <BV64 0x8b480000001ae9ff>  r12: <BV64 0x7ffce791d230>
rdi: <BV64 0x1800000000>  r13: <BV64 mem_138b48000000161e_1409_64{UNINITIALIZED}>
rsp: <BV64 0x7ffce791d1a0>  r14: <BV64 0x0 .. mem_c0002507_1410_32{UNINITIALIZED}>
rbp: <BV64 0x7ffce791d1f0>  r15: <BV64 0x0 .. mem_8b480000001aea0e_1389_32{UNINITIALIZED}[19:10]>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I32 t3:Ity_I32 t4:Ity_I32 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I32 t18:Ity_I64 t19:Ity_I32 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I1 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64

   00 | ------ IMark(0x55a64c97fc52, 5, 0) ------
   01 | t9 = GET:I64(rax)
   02 | t8 = Shl64(t9,0x00)
   03 | t10 = GET:I64(r13)
   04 | t7 = Add64(t10,t8)
   05 | t6 = Add64(t7,0x0000000000000008)
   06 | t0 = t6
   07 | t11 = GET:I64(r10)
   08 | STle(t0) = t11
   09 | PUT(rip) = 0x000055a64c97fc57
   10 | ------ IMark(0x55a64c97fc57, 8, 0) ------
   11 | t15 = GET:I64(r11)
   12 | t14 = Shl64(t15,0x02)
   13 | t16 = GET:I64(r13)
   14 | t13 = Add64(t16,t14)
   15 | t12 = Add64(t13,0x0000000000000400)
   16 | t1 = t12
   17 | t18 = GET:I64(rbx)
   18 | t17 = 64to32(t18)
   19 | STle(t1) = t17
   20 | PUT(rip) = 0x000055a64c97fc5f
   21 | ------ IMark(0x55a64c97fc5f, 3, 0) ------
   22 | t20 = GET:I64(rbx)
   23 | t19 = 64to32(t20)
   24 | t4 = t19
   25 | t3 = 0xffffffff
   26 | t2 = Sub32(t4,t3)
   27 | PUT(cc_op) = 0x0000000000000007
   28 | t21 = 32Uto64(t4)
   29 | PUT(cc_dep1) = t21
   30 | t22 = 32Uto64(t3)
   31 | PUT(cc_dep2) = t22
   32 | PUT(rip) = 0x000055a64c97fc62
   33 | ------ IMark(0x55a64c97fc62, 4, 0) ------
   34 | t24 = GET:I64(rbp)
   35 | t23 = Add64(t24,0xffffffffffffffb8)
   36 | t5 = t23
   37 | t25 = LDle:I64(t5)
   38 | PUT(rdx) = t25
   39 | PUT(rip) = 0x000055a64c97fc66
   40 | ------ IMark(0x55a64c97fc66, 2, 0) ------
   41 | t27 = GET:I64(cc_op)
   42 | t28 = GET:I64(cc_dep1)
   43 | t29 = GET:I64(cc_dep2)
   44 | t30 = GET:I64(cc_ndep)
   45 | t31 = amd64g_calculate_condition(0x0000000000000004,t27,t28,t29,t30):Ity_I64
   46 | t26 = 64to1(t31)
   47 | if (t26) { PUT(rip) = 0x55a64c97fc9f; Ijk_Boring }
   48 | PUT(rip) = 0x000055a64c97fc68
   49 | t32 = GET:I64(rip)
   NEXT: PUT(rip) = t32; Ijk_Boring
}
0x55a64c97fc52:	mov	qword ptr [r13 + rax + 8], r10
0x55a64c97fc57:	mov	dword ptr [r13 + r11*4 + 0x400], ebx
0x55a64c97fc5f:	cmp	ebx, -1
0x55a64c97fc62:	mov	rdx, qword ptr [rbp - 0x48]
0x55a64c97fc66:	je	0x55a64c97fc9f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc00003f0
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV32 mem_c00003f8_51_32{UNINITIALIZED}>  0x8
<BV64 mem_c00003f0_52_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV64 mem_c0000900_53_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                offsets
--------------------------------------  ---------
<BV8 mem_c0001038_54_8{UNINITIALIZED}>  0x38

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001c00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0x100000000c00024ff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_6        0x1ff
0x138b47ff3fff77ee  OBJ_6        0x0
0x138b47ff3ffff11e  OBJ_6        0x50f
0x8b47ffff401ac52e  OBJ_6        0xfff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc00024ff
maximum memory range     [  0x100000000c00024ff  ,  0x100000000c0002bff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c00024ff_1352_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00024ff_1353_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000270a_1354_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000270a_1355_16{UNINITIALIZED}>           0x20b
<BV8 mem_c000250b_1357_8{UNINITIALIZED}>             0xc
<BV32 mem_c0002507_1410_32{UNINITIALIZED}>           0x8

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0002dff
maximum memory range     [  0x100000000c0002bff  ,  0x100000000c00032ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0002dff_1411_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0002dff_1412_64{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0003516
maximum memory range     [  0x100000000c00032ff  ,  0x100000000c00039ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0003516_1441_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0003516_1442_64{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f0>   0xc00003f0
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f8>   0xc00018f8
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f8>  0xc0001ff8
<BV64 mem_138b47ffffff9cee_1351_64{UNINITIALIZED} + 0xffffffffffffffff>     0xc00024ff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED}>
<BV32 mem_55a649ceae44_559_32{UNINITIALIZED}>                       0x55a649ceae44
<BV32 mem_55a649ceadb8_567_32{UNINITIALIZED}>                       0x55a649ceadb8
<BV32 mem_55a649cf2708_1015_32{UNINITIALIZED}>                      0x55a649cf2708
<BV32 mem_55a649cead10_1103_32{UNINITIALIZED}>                      0x55a649cead10
<BV32 mem_55a649cea634_1161_32{UNINITIALIZED}>                      0x55a649cea634
<BV32 mem_55a649cf43c8_1197_32{UNINITIALIZED}>                      0x55a649cf43c8
<BV32 mem_55a649cf0448_1217_32{UNINITIALIZED}>                      0x55a649cf0448
<BV32 mem_55a649cf5698_1252_32{UNINITIALIZED}>                      0x55a649cf5698
<BV16 mem_8b480000001aea0a_1347_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV64 mem_138b47ffffff9cee_1351_64{UNINITIALIZED}>                  0x138b47ffffff9cee
<BV32 mem_8b480000001aea0e_1389_32{UNINITIALIZED}>                  0x8b480000001aea0e
<BV64 mem_8b480000001aea2e_1408_64{UNINITIALIZED}>                  0x8b480000001aea2e
<BV64 mem_138b48000000161e_1409_64{UNINITIALIZED}>                  0x138b48000000161e

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  94172737961042
Write  <BV64 0x8>  bytes to  <BV64 mem_138b48000000161e_1409_64{UNINITIALIZED} + (0x0 .. ~mem_c0002507_1410_32{UNINITIALIZED}[5:0] .. 0) + 0x8>
with expression : <BV64 mem_138b47ffffff9cee_1351_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c97f960
0x55a64c97f960:	push	rbp
0x55a64c97f961:	mov	rbp, rsp
0x55a64c97f964:	push	r15
0x55a64c97f966:	push	r14
0x55a64c97f968:	push	r13
0x55a64c97f96a:	push	r12
0x55a64c97f96c:	push	rbx
0x55a64c97f96d:	sub	rsp, 0x28
0x55a64c97f971:	mov	r8d, 4
0x55a64c97f977:	cmp	dword ptr [rdi + 0xc], 2
0x55a64c97f97b:	je	0x55a64c97fcd9
----------------------------------------------------------------------------------------------------
At  0x55a64c97cda0
0x55a64c97cda0:	push	rbp
0x55a64c97cda1:	mov	rbp, rsp
0x55a64c97cda4:	push	r15
0x55a64c97cda6:	push	r14
0x55a64c97cda8:	push	rbx
0x55a64c97cda9:	push	rax
0x55a64c97cdaa:	mov	rbx, rdi
0x55a64c97cdad:	mov	byte ptr [rdi + 8], 0
0x55a64c97cdb1:	mov	dword ptr [rdi + 4], 4
0x55a64c97cdb8:	mov	rax, qword ptr [rdi + 0x40]
0x55a64c97cdbc:	mov	qword ptr [rdi + 0x38], rax
0x55a64c97cdc0:	mov	r14, qword ptr [rax]
0x55a64c97cdc3:	mov	r15, qword ptr [r14 - 1]
0x55a64c97cdc7:	movzx	eax, word ptr [r15 + 0xb]
0x55a64c97cdcc:	mov	rsi, r15
0x55a64c97cdcf:	mov	rdx, r14
0x55a64c97cdd2:	cmp	eax, 0x410
0x55a64c97cdd7:	ja	0x55a64c97cdf1
----------------------------------------------------------------------------------------------------
At  0x55a64c998a80
0x55a64c998a80:	push	rbp
0x55a64c998a81:	mov	rbp, rsp
0x55a64c998a84:	push	r15
0x55a64c998a86:	push	r14
0x55a64c998a88:	push	r12
0x55a64c998a8a:	push	rbx
0x55a64c998a8b:	sub	rsp, 0x50
0x55a64c998a8f:	mov	r15, rsi
0x55a64c998a92:	mov	r14, rdi
0x55a64c998a95:	mov	rax, -0x80000
0x55a64c998a9c:	and	rax, qword ptr [rdi]
0x55a64c998a9f:	mov	r12, -0x7ad0
0x55a64c998aa6:	add	r12, qword ptr [rax + 0x48]
0x55a64c998aaa:	mov	rax, qword ptr [rsi]
0x55a64c998aad:	mov	rcx, qword ptr [rax - 1]
0x55a64c998ab1:	movzx	edx, word ptr [rcx + 0xb]
0x55a64c998ab5:	mov	ecx, 3
0x55a64c998aba:	cmp	edx, 0x80
0x55a64c998ac0:	jne	0x55a64c998ace
----------------------------------------------------------------------------------------------------
At  0x55a64c994960
0x55a64c994960:	push	rbp
0x55a64c994961:	mov	rbp, rsp
0x55a64c994964:	push	r15
0x55a64c994966:	push	r14
0x55a64c994968:	push	r12
0x55a64c99496a:	push	rbx
0x55a64c99496b:	sub	rsp, 0x10
0x55a64c99496f:	mov	r14d, esi
0x55a64c994972:	mov	r12, rdi
0x55a64c994975:	mov	rax, -0x80000
0x55a64c99497c:	and	rax, qword ptr [rdi]
0x55a64c99497f:	mov	r15, qword ptr [rax + 0x48]
0x55a64c994983:	lea	rsi, [r15 - 0x6b98]
0x55a64c99498a:	call	0x55a64c998a80
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0xc0000200>
1  <Bool mem_c00003f8_51_32{UNINITIALIZED} == 0x0>
2  <Bool mem_c00003f0_52_64{UNINITIALIZED} == 0xc0000900>
3  <Bool mem_c0000900_53_64{UNINITIALIZED} == 0xc0001000>
4  <Bool !(mem_c0001038_54_8{UNINITIALIZED} == 0)>
5  <Bool unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED} == 0x0>
6  <Bool unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} == 0xc0001700>
7  <Bool unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED} == 0x0>
8  <Bool unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} == 0xc0001e00>
9  <Bool 0x410 <= mem_8b480000001aea0a_1347_16{UNINITIALIZED}>
10  <Bool !(mem_8b480000001aea0a_1347_16{UNINITIALIZED} == 0x410)>
11  <Bool mem_138b47ffffff9cee_1351_64{UNINITIALIZED} == 0xc0002500>
12  <Bool mem_c0003516_1442_64{UNINITIALIZED} == 0xc0002500>
13  <Bool mem_c00024ff_1353_64{UNINITIALIZED} == 0xc00026ff>
14  <Bool mem_c000270a_1355_16{UNINITIALIZED} == 0x80>
15  <Bool mem_8b480000001aea0e_1389_32{UNINITIALIZED}[20:20] == 0>
16  <Bool !(mem_8b480000001aea0e_1389_32{UNINITIALIZED}[19:10] == 0x0)>
17  <Bool !(0x8 <= mem_8b480000001aea0e_1389_32{UNINITIALIZED}[19:10]) || mem_8b480000001aea0e_1389_32{UNINITIALIZED}[19:10] == 0x8>
18  <Bool mem_138b48000000161e_1409_64{UNINITIALIZED} == 0xc0002dff + 0xffffffffffffffff * (0x0 .. ~mem_c0002507_1410_32{UNINITIALIZED}[5:0] .. 0)>
19  <Bool !(mem_c0002dff_1412_64{UNINITIALIZED} == 0x8b480000001ae9ff)>
20  <Bool mem_8b480000001aea2e_1408_64{UNINITIALIZED} == 0xc00034ff>
21  <Bool (0x0 .. ~mem_c0002507_1410_32{UNINITIALIZED}[5:0] .. 0) + mem_138b48000000161e_1409_64{UNINITIALIZED} == 0xc0002dff>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x8 + mem_138b480000001626_2568_64{UNINITIALIZED}>  r8: <BV64 0x2ee163800659>
rbx: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x0 .. mem_c000200a_2412_16{UNINITIALIZED}[15:7] .. 0 .. mem_c000200a_2412_16{UNINITIALIZED}[2:0]>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x0>  r11: <BV64 0x1569800000000>
rsi: <BV64 mem_138b480000001626_2568_64{UNINITIALIZED}>  r12: <BV64 0x138b47ffffff8db6>
rdi: <BV64 mem_138b48000000163e_2548_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d1b0>  r14: <BV64 0x138b47ffffff8db6>
rbp: <BV64 0x7ffce791d1c0>  r15: <BV64 0x138b47ffffff8db6>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I32 t4:Ity_I32 t5:Ity_I32 t6:Ity_I16 t7:Ity_I16 t8:Ity_I16 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I32 t17:Ity_I16 t18:Ity_I32 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I1 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64

   00 | ------ IMark(0x55a64c584fd5, 3, 0) ------
   01 | t0 = GET:I64(rsi)
   02 | t9 = GET:I64(rbx)
   03 | STle(t0) = t9
   04 | PUT(rip) = 0x000055a64c584fd8
   05 | ------ IMark(0x55a64c584fd8, 4, 0) ------
   06 | t11 = GET:I64(rbx)
   07 | t10 = Add64(t11,0xffffffffffffffff)
   08 | t1 = t10
   09 | t12 = LDle:I64(t1)
   10 | PUT(rax) = t12
   11 | PUT(rip) = 0x000055a64c584fdc
   12 | ------ IMark(0x55a64c584fdc, 4, 0) ------
   13 | t14 = GET:I64(rax)
   14 | t13 = Add64(t14,0x000000000000000b)
   15 | t2 = t13
   16 | t17 = LDle:I16(t2)
   17 | t16 = 16Uto32(t17)
   18 | t15 = 32Uto64(t16)
   19 | PUT(rax) = t15
   20 | PUT(rip) = 0x000055a64c584fe0
   21 | ------ IMark(0x55a64c584fe0, 3, 0) ------
   22 | t19 = GET:I64(rax)
   23 | t18 = 64to32(t19)
   24 | t5 = t18
   25 | t4 = 0xffffff87
   26 | t3 = And32(t5,t4)
   27 | PUT(cc_op) = 0x0000000000000013
   28 | t20 = 32Uto64(t3)
   29 | PUT(cc_dep1) = t20
   30 | PUT(cc_dep2) = 0x0000000000000000
   31 | t21 = 32Uto64(t3)
   32 | PUT(rax) = t21
   33 | PUT(rip) = 0x000055a64c584fe3
   34 | ------ IMark(0x55a64c584fe3, 4, 0) ------
   35 | t8 = GET:I16(ax)
   36 | t7 = 0x0005
   37 | t6 = Sub16(t8,t7)
   38 | PUT(cc_op) = 0x0000000000000006
   39 | t22 = 16Uto64(t8)
   40 | PUT(cc_dep1) = t22
   41 | t23 = 16Uto64(t7)
   42 | PUT(cc_dep2) = t23
   43 | PUT(rip) = 0x000055a64c584fe7
   44 | ------ IMark(0x55a64c584fe7, 2, 0) ------
   45 | t25 = GET:I64(cc_op)
   46 | t26 = GET:I64(cc_dep1)
   47 | t27 = GET:I64(cc_dep2)
   48 | t28 = GET:I64(cc_ndep)
   49 | t29 = amd64g_calculate_condition(0x0000000000000004,t25,t26,t27,t28):Ity_I64
   50 | t24 = 64to1(t29)
   51 | if (t24) { PUT(rip) = 0x55a64c584fe9; Ijk_Boring }
   52 | PUT(rip) = 0x000055a64c58502e
   53 | t30 = GET:I64(rip)
   NEXT: PUT(rip) = t30; Ijk_Boring
}
0x55a64c584fd5:	mov	qword ptr [rsi], rbx
0x55a64c584fd8:	mov	rax, qword ptr [rbx - 1]
0x55a64c584fdc:	movzx	eax, word ptr [rax + 0xb]
0x55a64c584fe0:	and	eax, 0xffffff87
0x55a64c584fe3:	cmp	ax, 5
0x55a64c584fe7:	jne	0x55a64c58502e
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000000
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000700
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000e00
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0x100000000c0001dff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_5        0x1ff
0x138b47ff3fff7eee  OBJ_5        0x0
0x17                OBJ_5        0x8ff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0001dff
maximum memory range     [  0x100000000c0001dff  ,  0x100000000c00024ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0001dff_2409_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0001dff_2410_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000200a_2411_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000200a_2412_16{UNINITIALIZED}>           0x20b
<BV64 mem_c0001e17_2523_64{UNINITIALIZED}>           0x18
<BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc000270a
maximum memory range     [  0x100000000c00024ff  ,  0x100000000c0002bff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000270a_2524_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c000270a_2525_32{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f0>   0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f8>   0xc0000af8
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f0>  0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f8>  0xc00011f8
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f8>  0xc00018f8
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED} + 0xffffffffffffffff>     0xc0001dff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED}>
<BV32 mem_55a649ceae44_643_32{UNINITIALIZED}>                       0x55a649ceae44
<BV32 mem_55a649ceadb8_683_32{UNINITIALIZED}>                       0x55a649ceadb8
<BV32 mem_55a649cf2708_1098_32{UNINITIALIZED}>                      0x55a649cf2708
<BV32 mem_55a649cead10_1127_32{UNINITIALIZED}>                      0x55a649cead10
<BV32 mem_55a649cea634_1205_32{UNINITIALIZED}>                      0x55a649cea634
<BV32 mem_55a649cf43c8_1257_32{UNINITIALIZED}>                      0x55a649cf43c8
<BV32 mem_55a649cf0448_1267_32{UNINITIALIZED}>                      0x55a649cf0448
<BV32 mem_55a649cf5698_1282_32{UNINITIALIZED}>                      0x55a649cf5698
<BV16 mem_8b480000001aea0a_2297_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED}>                  0x138b47ffffff9cee
<BV64 mem_138b48000000163e_2548_64{UNINITIALIZED}>                  0x138b48000000163e
<BV64 mem_138b480000001626_2568_64{UNINITIALIZED}>                  0x138b480000001626
<BV64 mem_138b48000000162e_2569_64{UNINITIALIZED}>                  0x138b48000000162e

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  94172733788117
Write  <BV64 0x8>  bytes to  <BV64 mem_138b480000001626_2568_64{UNINITIALIZED}>
with expression : <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c584f50
0x55a64c584f50:	push	rbp
0x55a64c584f51:	mov	rbp, rsp
0x55a64c584f54:	push	r14
0x55a64c584f56:	push	rbx
0x55a64c584f57:	mov	r14, rdi
0x55a64c584f5a:	mov	rbx, qword ptr [rsi]
0x55a64c584f5d:	mov	rax, qword ptr [rbx - 1]
0x55a64c584f61:	movzx	eax, word ptr [rax + 0xb]
0x55a64c584f65:	mov	ecx, eax
0x55a64c584f67:	and	ecx, 0xffffff87
0x55a64c584f6a:	cmp	cx, 1
0x55a64c584f6e:	jne	0x55a64c584fd8
----------------------------------------------------------------------------------------------------
At  0x55a64c9cd180
0x55a64c9cd180:	push	rbp
0x55a64c9cd181:	mov	rbp, rsp
0x55a64c9cd184:	push	r15
0x55a64c9cd186:	push	r14
0x55a64c9cd188:	push	r13
0x55a64c9cd18a:	push	r12
0x55a64c9cd18c:	push	rbx
0x55a64c9cd18d:	sub	rsp, 0x28
0x55a64c9cd191:	mov	r15, rdi
0x55a64c9cd194:	xor	edx, edx
0x55a64c9cd196:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c998a80
0x55a64c998a80:	push	rbp
0x55a64c998a81:	mov	rbp, rsp
0x55a64c998a84:	push	r15
0x55a64c998a86:	push	r14
0x55a64c998a88:	push	r12
0x55a64c998a8a:	push	rbx
0x55a64c998a8b:	sub	rsp, 0x50
0x55a64c998a8f:	mov	r15, rsi
0x55a64c998a92:	mov	r14, rdi
0x55a64c998a95:	mov	rax, -0x80000
0x55a64c998a9c:	and	rax, qword ptr [rdi]
0x55a64c998a9f:	mov	r12, -0x7ad0
0x55a64c998aa6:	add	r12, qword ptr [rax + 0x48]
0x55a64c998aaa:	mov	rax, qword ptr [rsi]
0x55a64c998aad:	mov	rcx, qword ptr [rax - 1]
0x55a64c998ab1:	movzx	edx, word ptr [rcx + 0xb]
0x55a64c998ab5:	mov	ecx, 3
0x55a64c998aba:	cmp	edx, 0x80
0x55a64c998ac0:	jne	0x55a64c998ace
----------------------------------------------------------------------------------------------------
At  0x55a64c994960
0x55a64c994960:	push	rbp
0x55a64c994961:	mov	rbp, rsp
0x55a64c994964:	push	r15
0x55a64c994966:	push	r14
0x55a64c994968:	push	r12
0x55a64c99496a:	push	rbx
0x55a64c99496b:	sub	rsp, 0x10
0x55a64c99496f:	mov	r14d, esi
0x55a64c994972:	mov	r12, rdi
0x55a64c994975:	mov	rax, -0x80000
0x55a64c99497c:	and	rax, qword ptr [rdi]
0x55a64c99497f:	mov	r15, qword ptr [rax + 0x48]
0x55a64c994983:	lea	rsi, [r15 - 0x6b98]
0x55a64c99498a:	call	0x55a64c998a80
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0x0>
1  <Bool unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} == 0xc0000200>
2  <Bool unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED} == 0x0>
3  <Bool unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} == 0xc0000900>
4  <Bool unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED} == 0x0>
5  <Bool unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} == 0xc0001000>
6  <Bool unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED} == 0x0>
7  <Bool unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} == 0xc0001700>
8  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x81)>
9  <Bool 0x7f <= mem_8b480000001aea0a_2297_16{UNINITIALIZED}>
10  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x83)>
11  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x80)>
12  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x82)>
13  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x7f)>
14  <Bool mem_138b47ffffff9cee_2408_64{UNINITIALIZED} == 0xc0001e00>
15  <Bool mem_c0001dff_2410_64{UNINITIALIZED} == 0xc0001fff>
16  <Bool mem_c000200a_2412_16{UNINITIALIZED}[15:6] == 0x1>
17  <Bool mem_c000200a_2412_16{UNINITIALIZED}[2:0] == 1>
18  <Bool mem_c0001e17_2523_64{UNINITIALIZED} == 0xc00026ff>
19  <Bool mem_c000270a_2525_32{UNINITIALIZED} == 0x0>
20  <Bool mem_138b48000000163e_2548_64{UNINITIALIZED} == 0x0>
21  <Bool mem_138b480000001626_2568_64{UNINITIALIZED} - mem_138b48000000162e_2569_64{UNINITIALIZED} != 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c000bd6f_2628_64{UNINITIALIZED}>  r8: <BV64 0x2ee163800659>
rbx: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x8 + mem_c000bd6f_2628_64{UNINITIALIZED}>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x0>  r11: <BV64 0x1569800000000>
rsi: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>  r12: <BV64 0x138b47ffffff8db6>
rdi: <BV64 mem_138b48000000163e_2548_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d180>  r14: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>
rbp: <BV64 0x7ffce791d1a0>  r15: <BV64 mem_c0002dff_2596_64{UNINITIALIZED}>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64

   00 | ------ IMark(0x55a64c86dc50, 7, 0) ------
   01 | t3 = GET:I64(r15)
   02 | t2 = Add64(t3,0x0000000000008870)
   03 | t0 = t2
   04 | t4 = GET:I64(rcx)
   05 | STle(t0) = t4
   06 | PUT(rip) = 0x000055a64c86dc57
   07 | ------ IMark(0x55a64c86dc57, 3, 0) ------
   08 | t1 = GET:I64(rax)
   09 | t5 = GET:I64(r14)
   10 | STle(t1) = t5
   11 | PUT(rip) = 0x000055a64c86dc5a
   12 | ------ IMark(0x55a64c86dc5a, 2, 0) ------
   13 | PUT(rip) = 0x000055a64c86dc9f
   14 | t6 = GET:I64(rip)
   NEXT: PUT(rip) = t6; Ijk_Boring
}
0x55a64c86dc50:	mov	qword ptr [r15 + 0x8870], rcx
0x55a64c86dc57:	mov	qword ptr [rax], r14
0x55a64c86dc5a:	jmp	0x55a64c86dc9f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000000
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000700
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000e00
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0x100000000c0001dff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_5        0x1ff
0x138b47ff3fff7eee  OBJ_5        0x0
0x17                OBJ_5        0x8ff
0x138b47ff3ffff83e  OBJ_5        0xfff
0xfff               OBJ_5        0x16ff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0001dff
maximum memory range     [  0x100000000c0001dff  ,  0x100000000c00024ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0001dff_2409_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0001dff_2410_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000200a_2411_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000200a_2412_16{UNINITIALIZED}>           0x20b
<BV64 mem_c0001e17_2523_64{UNINITIALIZED}>           0x18
<BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc000270a
maximum memory range     [  0x100000000c00024ff  ,  0x100000000c0002bff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000270a_2524_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c000270a_2525_32{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0002dff
maximum memory range     [  0x100000000c0002bff  ,  0x100000000c00032ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0002dff_2595_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0002dff_2596_64{UNINITIALIZED}>           0x0
<BV32 mem_c0002e57_2599_32{UNINITIALIZED}>           0x58

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc000bd6f
maximum memory range     [  0x100000000c00032ff  ,  0x100000000c000bd7f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                    offsets
------------------------------------------  ---------
<BV64 mem_c000bd6f_2628_64{UNINITIALIZED}>  0x0
<BV64 mem_c000bd77_2629_64{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f0>   0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f8>   0xc0000af8
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f0>  0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f8>  0xc00011f8
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f8>  0xc00018f8
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED} + 0xffffffffffffffff>     0xc0001dff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  -------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED}>
<BV32 mem_55a649ceae44_643_32{UNINITIALIZED}>                       0x55a649ceae44
<BV32 mem_55a649ceadb8_683_32{UNINITIALIZED}>                       0x55a649ceadb8
<BV32 mem_55a649cf2708_1098_32{UNINITIALIZED}>                      0x55a649cf2708
<BV32 mem_55a649cead10_1127_32{UNINITIALIZED}>                      0x55a649cead10
<BV32 mem_55a649cea634_1205_32{UNINITIALIZED}>                      0x55a649cea634
<BV32 mem_55a649cf43c8_1257_32{UNINITIALIZED}>                      0x55a649cf43c8
<BV32 mem_55a649cf0448_1267_32{UNINITIALIZED}>                      0x55a649cf0448
<BV32 mem_55a649cf5698_1282_32{UNINITIALIZED}>                      0x55a649cf5698
<BV16 mem_8b480000001aea0a_2297_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED}>                  0x138b47ffffff9cee
<BV64 mem_138b48000000163e_2548_64{UNINITIALIZED}>                  0x138b48000000163e
<BV32 mem_100000000c000bd7f_2597_32{UNINITIALIZED}>                 0x100000000c000bd7f
<BV32 mem_c000bd7f_2598_32{UNINITIALIZED}>                          0xc000bd7f

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  94172736838736
Write  <BV64 0x8>  bytes to  <BV64 mem_c0002dff_2596_64{UNINITIALIZED} + 0x8870>
with expression : <BV64 0x8 + mem_c000bd6f_2628_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c86dba0
0x55a64c86dba0:	push	rbp
0x55a64c86dba1:	mov	rbp, rsp
0x55a64c86dba4:	push	r15
0x55a64c86dba6:	push	r14
0x55a64c86dba8:	push	rbx
0x55a64c86dba9:	push	rax
0x55a64c86dbaa:	mov	r14, rsi
0x55a64c86dbad:	mov	r15, qword ptr [rdi]
0x55a64c86dbb0:	mov	eax, dword ptr [r15 + 0x8880]
0x55a64c86dbb7:	cmp	eax, dword ptr [rdi + 0x58]
0x55a64c86dbba:	jne	0x55a64c86dc34
----------------------------------------------------------------------------------------------------
At  0x55a64c584f50
0x55a64c584f50:	push	rbp
0x55a64c584f51:	mov	rbp, rsp
0x55a64c584f54:	push	r14
0x55a64c584f56:	push	rbx
0x55a64c584f57:	mov	r14, rdi
0x55a64c584f5a:	mov	rbx, qword ptr [rsi]
0x55a64c584f5d:	mov	rax, qword ptr [rbx - 1]
0x55a64c584f61:	movzx	eax, word ptr [rax + 0xb]
0x55a64c584f65:	mov	ecx, eax
0x55a64c584f67:	and	ecx, 0xffffff87
0x55a64c584f6a:	cmp	cx, 1
0x55a64c584f6e:	jne	0x55a64c584fd8
----------------------------------------------------------------------------------------------------
At  0x55a64c9cd180
0x55a64c9cd180:	push	rbp
0x55a64c9cd181:	mov	rbp, rsp
0x55a64c9cd184:	push	r15
0x55a64c9cd186:	push	r14
0x55a64c9cd188:	push	r13
0x55a64c9cd18a:	push	r12
0x55a64c9cd18c:	push	rbx
0x55a64c9cd18d:	sub	rsp, 0x28
0x55a64c9cd191:	mov	r15, rdi
0x55a64c9cd194:	xor	edx, edx
0x55a64c9cd196:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c998a80
0x55a64c998a80:	push	rbp
0x55a64c998a81:	mov	rbp, rsp
0x55a64c998a84:	push	r15
0x55a64c998a86:	push	r14
0x55a64c998a88:	push	r12
0x55a64c998a8a:	push	rbx
0x55a64c998a8b:	sub	rsp, 0x50
0x55a64c998a8f:	mov	r15, rsi
0x55a64c998a92:	mov	r14, rdi
0x55a64c998a95:	mov	rax, -0x80000
0x55a64c998a9c:	and	rax, qword ptr [rdi]
0x55a64c998a9f:	mov	r12, -0x7ad0
0x55a64c998aa6:	add	r12, qword ptr [rax + 0x48]
0x55a64c998aaa:	mov	rax, qword ptr [rsi]
0x55a64c998aad:	mov	rcx, qword ptr [rax - 1]
0x55a64c998ab1:	movzx	edx, word ptr [rcx + 0xb]
0x55a64c998ab5:	mov	ecx, 3
0x55a64c998aba:	cmp	edx, 0x80
0x55a64c998ac0:	jne	0x55a64c998ace
----------------------------------------------------------------------------------------------------
At  0x55a64c994960
0x55a64c994960:	push	rbp
0x55a64c994961:	mov	rbp, rsp
0x55a64c994964:	push	r15
0x55a64c994966:	push	r14
0x55a64c994968:	push	r12
0x55a64c99496a:	push	rbx
0x55a64c99496b:	sub	rsp, 0x10
0x55a64c99496f:	mov	r14d, esi
0x55a64c994972:	mov	r12, rdi
0x55a64c994975:	mov	rax, -0x80000
0x55a64c99497c:	and	rax, qword ptr [rdi]
0x55a64c99497f:	mov	r15, qword ptr [rax + 0x48]
0x55a64c994983:	lea	rsi, [r15 - 0x6b98]
0x55a64c99498a:	call	0x55a64c998a80
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0x0>
1  <Bool unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} == 0xc0000200>
2  <Bool unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED} == 0x0>
3  <Bool unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} == 0xc0000900>
4  <Bool unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED} == 0x0>
5  <Bool unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} == 0xc0001000>
6  <Bool unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED} == 0x0>
7  <Bool unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} == 0xc0001700>
8  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x81)>
9  <Bool 0x7f <= mem_8b480000001aea0a_2297_16{UNINITIALIZED}>
10  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x83)>
11  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x80)>
12  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x82)>
13  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x7f)>
14  <Bool mem_138b47ffffff9cee_2408_64{UNINITIALIZED} == 0xc0001e00>
15  <Bool mem_c0001dff_2410_64{UNINITIALIZED} == 0xc0001fff>
16  <Bool mem_c000200a_2412_16{UNINITIALIZED}[15:6] == 0x1>
17  <Bool mem_c000200a_2412_16{UNINITIALIZED}[2:0] == 1>
18  <Bool mem_c0001e17_2523_64{UNINITIALIZED} == 0xc00026ff>
19  <Bool mem_c000270a_2525_32{UNINITIALIZED} == 0x0>
20  <Bool mem_138b48000000163e_2548_64{UNINITIALIZED} == 0xc0002dff>
21  <Bool mem_c0002dff_2596_64{UNINITIALIZED} == 0xc00034ff>
22  <Bool !(mem_c000bd7f_2598_32{UNINITIALIZED} == mem_c0002e57_2599_32{UNINITIALIZED})>
23  <Bool mem_c000bd6f_2628_64{UNINITIALIZED} - mem_c000bd77_2629_64{UNINITIALIZED} != 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c000bd6f_2628_64{UNINITIALIZED}>  r8: <BV64 0x2ee163800659>
rbx: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x8 + mem_c000bd6f_2628_64{UNINITIALIZED}>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x0>  r11: <BV64 0x1569800000000>
rsi: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>  r12: <BV64 0x138b47ffffff8db6>
rdi: <BV64 mem_138b48000000163e_2548_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d180>  r14: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>
rbp: <BV64 0x7ffce791d1a0>  r15: <BV64 mem_c0002dff_2596_64{UNINITIALIZED}>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64

   00 | ------ IMark(0x55a64c86dc57, 3, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t1 = GET:I64(r14)
   03 | STle(t0) = t1
   04 | PUT(rip) = 0x000055a64c86dc5a
   05 | ------ IMark(0x55a64c86dc5a, 2, 0) ------
   06 | PUT(rip) = 0x000055a64c86dc9f
   07 | t2 = GET:I64(rip)
   NEXT: PUT(rip) = t2; Ijk_Boring
}
0x55a64c86dc57:	mov	qword ptr [rax], r14
0x55a64c86dc5a:	jmp	0x55a64c86dc9f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000000
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000700
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000e00
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0x100000000c0001dff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_5        0x1ff
0x138b47ff3fff7eee  OBJ_5        0x0
0x17                OBJ_5        0x8ff
0x138b47ff3ffff83e  OBJ_5        0xfff
0xfff               OBJ_5        0x16ff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0001dff
maximum memory range     [  0x100000000c0001dff  ,  0x100000000c00024ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0001dff_2409_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0001dff_2410_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000200a_2411_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000200a_2412_16{UNINITIALIZED}>           0x20b
<BV64 mem_c0001e17_2523_64{UNINITIALIZED}>           0x18
<BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc000270a
maximum memory range     [  0x100000000c00024ff  ,  0x100000000c0002bff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000270a_2524_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c000270a_2525_32{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0002dff
maximum memory range     [  0x100000000c0002bff  ,  0x100000000c00032ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0002dff_2595_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0002dff_2596_64{UNINITIALIZED}>           0x0
<BV32 mem_c0002e57_2599_32{UNINITIALIZED}>           0x58

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc000bd6f
maximum memory range     [  0x100000000c00032ff  ,  0x100000000c000bd7f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                    offsets
------------------------------------------  ---------
<BV64 mem_c000bd6f_2628_64{UNINITIALIZED}>  0x0
<BV64 mem_c000bd77_2629_64{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f0>   0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f8>   0xc0000af8
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f0>  0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f8>  0xc00011f8
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f8>  0xc00018f8
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED} + 0xffffffffffffffff>     0xc0001dff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  -------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED}>
<BV32 mem_55a649ceae44_643_32{UNINITIALIZED}>                       0x55a649ceae44
<BV32 mem_55a649ceadb8_683_32{UNINITIALIZED}>                       0x55a649ceadb8
<BV32 mem_55a649cf2708_1098_32{UNINITIALIZED}>                      0x55a649cf2708
<BV32 mem_55a649cead10_1127_32{UNINITIALIZED}>                      0x55a649cead10
<BV32 mem_55a649cea634_1205_32{UNINITIALIZED}>                      0x55a649cea634
<BV32 mem_55a649cf43c8_1257_32{UNINITIALIZED}>                      0x55a649cf43c8
<BV32 mem_55a649cf0448_1267_32{UNINITIALIZED}>                      0x55a649cf0448
<BV32 mem_55a649cf5698_1282_32{UNINITIALIZED}>                      0x55a649cf5698
<BV16 mem_8b480000001aea0a_2297_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED}>                  0x138b47ffffff9cee
<BV64 mem_138b48000000163e_2548_64{UNINITIALIZED}>                  0x138b48000000163e
<BV32 mem_100000000c000bd7f_2597_32{UNINITIALIZED}>                 0x100000000c000bd7f
<BV32 mem_c000bd7f_2598_32{UNINITIALIZED}>                          0xc000bd7f

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  94172736838743
Write  <BV64 0x8>  bytes to  <BV64 mem_c000bd6f_2628_64{UNINITIALIZED}>
with expression : <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c86dba0
0x55a64c86dba0:	push	rbp
0x55a64c86dba1:	mov	rbp, rsp
0x55a64c86dba4:	push	r15
0x55a64c86dba6:	push	r14
0x55a64c86dba8:	push	rbx
0x55a64c86dba9:	push	rax
0x55a64c86dbaa:	mov	r14, rsi
0x55a64c86dbad:	mov	r15, qword ptr [rdi]
0x55a64c86dbb0:	mov	eax, dword ptr [r15 + 0x8880]
0x55a64c86dbb7:	cmp	eax, dword ptr [rdi + 0x58]
0x55a64c86dbba:	jne	0x55a64c86dc34
----------------------------------------------------------------------------------------------------
At  0x55a64c584f50
0x55a64c584f50:	push	rbp
0x55a64c584f51:	mov	rbp, rsp
0x55a64c584f54:	push	r14
0x55a64c584f56:	push	rbx
0x55a64c584f57:	mov	r14, rdi
0x55a64c584f5a:	mov	rbx, qword ptr [rsi]
0x55a64c584f5d:	mov	rax, qword ptr [rbx - 1]
0x55a64c584f61:	movzx	eax, word ptr [rax + 0xb]
0x55a64c584f65:	mov	ecx, eax
0x55a64c584f67:	and	ecx, 0xffffff87
0x55a64c584f6a:	cmp	cx, 1
0x55a64c584f6e:	jne	0x55a64c584fd8
----------------------------------------------------------------------------------------------------
At  0x55a64c9cd180
0x55a64c9cd180:	push	rbp
0x55a64c9cd181:	mov	rbp, rsp
0x55a64c9cd184:	push	r15
0x55a64c9cd186:	push	r14
0x55a64c9cd188:	push	r13
0x55a64c9cd18a:	push	r12
0x55a64c9cd18c:	push	rbx
0x55a64c9cd18d:	sub	rsp, 0x28
0x55a64c9cd191:	mov	r15, rdi
0x55a64c9cd194:	xor	edx, edx
0x55a64c9cd196:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c998a80
0x55a64c998a80:	push	rbp
0x55a64c998a81:	mov	rbp, rsp
0x55a64c998a84:	push	r15
0x55a64c998a86:	push	r14
0x55a64c998a88:	push	r12
0x55a64c998a8a:	push	rbx
0x55a64c998a8b:	sub	rsp, 0x50
0x55a64c998a8f:	mov	r15, rsi
0x55a64c998a92:	mov	r14, rdi
0x55a64c998a95:	mov	rax, -0x80000
0x55a64c998a9c:	and	rax, qword ptr [rdi]
0x55a64c998a9f:	mov	r12, -0x7ad0
0x55a64c998aa6:	add	r12, qword ptr [rax + 0x48]
0x55a64c998aaa:	mov	rax, qword ptr [rsi]
0x55a64c998aad:	mov	rcx, qword ptr [rax - 1]
0x55a64c998ab1:	movzx	edx, word ptr [rcx + 0xb]
0x55a64c998ab5:	mov	ecx, 3
0x55a64c998aba:	cmp	edx, 0x80
0x55a64c998ac0:	jne	0x55a64c998ace
----------------------------------------------------------------------------------------------------
At  0x55a64c994960
0x55a64c994960:	push	rbp
0x55a64c994961:	mov	rbp, rsp
0x55a64c994964:	push	r15
0x55a64c994966:	push	r14
0x55a64c994968:	push	r12
0x55a64c99496a:	push	rbx
0x55a64c99496b:	sub	rsp, 0x10
0x55a64c99496f:	mov	r14d, esi
0x55a64c994972:	mov	r12, rdi
0x55a64c994975:	mov	rax, -0x80000
0x55a64c99497c:	and	rax, qword ptr [rdi]
0x55a64c99497f:	mov	r15, qword ptr [rax + 0x48]
0x55a64c994983:	lea	rsi, [r15 - 0x6b98]
0x55a64c99498a:	call	0x55a64c998a80
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0x0>
1  <Bool unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} == 0xc0000200>
2  <Bool unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED} == 0x0>
3  <Bool unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} == 0xc0000900>
4  <Bool unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED} == 0x0>
5  <Bool unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} == 0xc0001000>
6  <Bool unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED} == 0x0>
7  <Bool unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} == 0xc0001700>
8  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x81)>
9  <Bool 0x7f <= mem_8b480000001aea0a_2297_16{UNINITIALIZED}>
10  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x83)>
11  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x80)>
12  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x82)>
13  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x7f)>
14  <Bool mem_138b47ffffff9cee_2408_64{UNINITIALIZED} == 0xc0001e00>
15  <Bool mem_c0001dff_2410_64{UNINITIALIZED} == 0xc0001fff>
16  <Bool mem_c000200a_2412_16{UNINITIALIZED}[15:6] == 0x1>
17  <Bool mem_c000200a_2412_16{UNINITIALIZED}[2:0] == 1>
18  <Bool mem_c0001e17_2523_64{UNINITIALIZED} == 0xc00026ff>
19  <Bool mem_c000270a_2525_32{UNINITIALIZED} == 0x0>
20  <Bool mem_138b48000000163e_2548_64{UNINITIALIZED} == 0xc0002dff>
21  <Bool mem_c0002dff_2596_64{UNINITIALIZED} == 0xc00034ff>
22  <Bool !(mem_c000bd7f_2598_32{UNINITIALIZED} == mem_c0002e57_2599_32{UNINITIALIZED})>
23  <Bool !(mem_c000bd6f_2628_64{UNINITIALIZED} == mem_c000bd77_2629_64{UNINITIALIZED})>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x8 + mem_138b480000001626_2688_64{UNINITIALIZED}>  r8: <BV64 0x2ee163800659>
rbx: <BV64 mem_c0001e17_2523_64{UNINITIALIZED}>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x0 .. mem_c000200a_2412_16{UNINITIALIZED}[15:7] .. 0 .. mem_c000200a_2412_16{UNINITIALIZED}[2:0]>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x0>  r11: <BV64 0x1569800000000>
rsi: <BV64 mem_138b480000001626_2688_64{UNINITIALIZED}>  r12: <BV64 0x138b47ffffff8db6>
rdi: <BV64 mem_138b48000000163e_2633_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d180>  r14: <BV64 0x138b47ffffff8db6>
rbp: <BV64 0x7ffce791d1c0>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I32 t2:Ity_I32 t3:Ity_I32 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I64 t21:Ity_I32 t22:Ity_I64 t23:Ity_I32 t24:Ity_I64 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64 t33:Ity_I64 t34:Ity_I64

   00 | ------ IMark(0x55a64c9a099c, 3, 0) ------
   01 | t0 = GET:I64(rsi)
   02 | t19 = GET:I64(rbx)
   03 | STle(t0) = t19
   04 | PUT(rip) = 0x000055a64c9a099f
   05 | ------ IMark(0x55a64c9a099f, 2, 0) ------
   06 | t20 = 32Uto64(0x00000000)
   07 | PUT(rdx) = t20
   08 | t22 = GET:I64(rdx)
   09 | t21 = 64to32(t22)
   10 | t3 = t21
   11 | t24 = GET:I64(rdx)
   12 | t23 = 64to32(t24)
   13 | t2 = t23
   14 | t1 = Xor32(t3,t2)
   15 | PUT(cc_op) = 0x0000000000000013
   16 | t25 = 32Uto64(t1)
   17 | PUT(cc_dep1) = t25
   18 | PUT(cc_dep2) = 0x0000000000000000
   19 | t26 = 32Uto64(t1)
   20 | PUT(rdx) = t26
   21 | PUT(rip) = 0x000055a64c9a09a1
   22 | ------ IMark(0x55a64c9a09a1, 3, 0) ------
   23 | t27 = GET:I64(r14)
   24 | PUT(rdi) = t27
   25 | PUT(rip) = 0x000055a64c9a09a4
   26 | ------ IMark(0x55a64c9a09a4, 4, 0) ------
   27 | t6 = GET:I64(rsp)
   28 | t5 = 0x0000000000000018
   29 | t4 = Add64(t6,t5)
   30 | PUT(cc_op) = 0x0000000000000004
   31 | PUT(cc_dep1) = t6
   32 | PUT(cc_dep2) = t5
   33 | PUT(rsp) = t4
   34 | PUT(rip) = 0x000055a64c9a09a8
   35 | ------ IMark(0x55a64c9a09a8, 1, 0) ------
   36 | t8 = GET:I64(rsp)
   37 | t7 = LDle:I64(t8)
   38 | t28 = Add64(t8,0x0000000000000008)
   39 | PUT(rsp) = t28
   40 | PUT(rbx) = t7
   41 | PUT(rip) = 0x000055a64c9a09a9
   42 | ------ IMark(0x55a64c9a09a9, 2, 0) ------
   43 | t10 = GET:I64(rsp)
   44 | t9 = LDle:I64(t10)
   45 | t29 = Add64(t10,0x0000000000000008)
   46 | PUT(rsp) = t29
   47 | PUT(r12) = t9
   48 | PUT(rip) = 0x000055a64c9a09ab
   49 | ------ IMark(0x55a64c9a09ab, 2, 0) ------
   50 | t12 = GET:I64(rsp)
   51 | t11 = LDle:I64(t12)
   52 | t30 = Add64(t12,0x0000000000000008)
   53 | PUT(rsp) = t30
   54 | PUT(r13) = t11
   55 | PUT(rip) = 0x000055a64c9a09ad
   56 | ------ IMark(0x55a64c9a09ad, 2, 0) ------
   57 | t14 = GET:I64(rsp)
   58 | t13 = LDle:I64(t14)
   59 | t31 = Add64(t14,0x0000000000000008)
   60 | PUT(rsp) = t31
   61 | PUT(r14) = t13
   62 | PUT(rip) = 0x000055a64c9a09af
   63 | ------ IMark(0x55a64c9a09af, 2, 0) ------
   64 | t16 = GET:I64(rsp)
   65 | t15 = LDle:I64(t16)
   66 | t32 = Add64(t16,0x0000000000000008)
   67 | PUT(rsp) = t32
   68 | PUT(r15) = t15
   69 | PUT(rip) = 0x000055a64c9a09b1
   70 | ------ IMark(0x55a64c9a09b1, 1, 0) ------
   71 | t18 = GET:I64(rsp)
   72 | t17 = LDle:I64(t18)
   73 | t33 = Add64(t18,0x0000000000000008)
   74 | PUT(rsp) = t33
   75 | PUT(rbp) = t17
   76 | PUT(rip) = 0x000055a64c9a09b2
   77 | ------ IMark(0x55a64c9a09b2, 5, 0) ------
   78 | PUT(rip) = 0x000055a64c584f50
   79 | t34 = GET:I64(rip)
   NEXT: PUT(rip) = t34; Ijk_Boring
}
0x55a64c9a099c:	mov	qword ptr [rsi], rbx
0x55a64c9a099f:	xor	edx, edx
0x55a64c9a09a1:	mov	rdi, r14
0x55a64c9a09a4:	add	rsp, 0x18
0x55a64c9a09a8:	pop	rbx
0x55a64c9a09a9:	pop	r12
0x55a64c9a09ab:	pop	r13
0x55a64c9a09ad:	pop	r14
0x55a64c9a09af:	pop	r15
0x55a64c9a09b1:	pop	rbp
0x55a64c9a09b2:	jmp	0x55a64c584f50
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000000
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000700
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000e00
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0x100000000c0001dff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_5        0x1ff
0x138b47ff3fff7eee  OBJ_5        0x0
0x17                OBJ_5        0x8ff
0xf                 OBJ_5        0xfff
0x8fe               OBJ_5        0x16ff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0001dff
maximum memory range     [  0x100000000c0001dff  ,  0x100000000c00024ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0001dff_2409_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0001dff_2410_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000200a_2411_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000200a_2412_16{UNINITIALIZED}>           0x20b
<BV64 mem_c0001e17_2523_64{UNINITIALIZED}>           0x18
<BV64 mem_c0001e0f_2570_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc00026fe
maximum memory range     [  0x100000000c00024ff  ,  0x100000000c0002bff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000270a_2524_32{UNINITIALIZED}>  0x1000000000000000c
<BV32 mem_c000270a_2525_32{UNINITIALIZED}>           0xc
<BV64 mem_c00026fe_2600_64{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0002e0a
maximum memory range     [  0x100000000c0002bff  ,  0x100000000c00032ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c0002e0a_2571_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c0002e0a_2572_32{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc000350a
maximum memory range     [  0x100000000c00032ff  ,  0x100000000c00039ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV16 mem_100000000c000350a_2601_16{UNINITIALIZED}>  0x10000000000000000
<BV16 mem_c000350a_2602_16{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f0>   0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f8>   0xc0000af8
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f0>  0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f8>  0xc00011f8
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f8>  0xc00018f8
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED} + 0xffffffffffffffff>     0xc0001dff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED}>
<BV32 mem_55a649ceae44_643_32{UNINITIALIZED}>                       0x55a649ceae44
<BV32 mem_55a649ceadb8_683_32{UNINITIALIZED}>                       0x55a649ceadb8
<BV32 mem_55a649cf2708_1098_32{UNINITIALIZED}>                      0x55a649cf2708
<BV32 mem_55a649cead10_1127_32{UNINITIALIZED}>                      0x55a649cead10
<BV32 mem_55a649cea634_1205_32{UNINITIALIZED}>                      0x55a649cea634
<BV32 mem_55a649cf43c8_1257_32{UNINITIALIZED}>                      0x55a649cf43c8
<BV32 mem_55a649cf0448_1267_32{UNINITIALIZED}>                      0x55a649cf0448
<BV32 mem_55a649cf5698_1282_32{UNINITIALIZED}>                      0x55a649cf5698
<BV16 mem_8b480000001aea0a_2297_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED}>                  0x138b47ffffff9cee
<BV64 mem_138b48000000163e_2633_64{UNINITIALIZED}>                  0x138b48000000163e
<BV64 mem_138b480000001626_2688_64{UNINITIALIZED}>                  0x138b480000001626
<BV64 mem_138b48000000162e_2689_64{UNINITIALIZED}>                  0x138b48000000162e

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  94172738095516
Write  <BV64 0x8>  bytes to  <BV64 mem_138b480000001626_2688_64{UNINITIALIZED}>
with expression : <BV64 mem_c0001e17_2523_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c584f50
0x55a64c584f50:	push	rbp
0x55a64c584f51:	mov	rbp, rsp
0x55a64c584f54:	push	r14
0x55a64c584f56:	push	rbx
0x55a64c584f57:	mov	r14, rdi
0x55a64c584f5a:	mov	rbx, qword ptr [rsi]
0x55a64c584f5d:	mov	rax, qword ptr [rbx - 1]
0x55a64c584f61:	movzx	eax, word ptr [rax + 0xb]
0x55a64c584f65:	mov	ecx, eax
0x55a64c584f67:	and	ecx, 0xffffff87
0x55a64c584f6a:	cmp	cx, 1
0x55a64c584f6e:	jne	0x55a64c584fd8
----------------------------------------------------------------------------------------------------
At  0x55a64c9cd180
0x55a64c9cd180:	push	rbp
0x55a64c9cd181:	mov	rbp, rsp
0x55a64c9cd184:	push	r15
0x55a64c9cd186:	push	r14
0x55a64c9cd188:	push	r13
0x55a64c9cd18a:	push	r12
0x55a64c9cd18c:	push	rbx
0x55a64c9cd18d:	sub	rsp, 0x28
0x55a64c9cd191:	mov	r15, rdi
0x55a64c9cd194:	xor	edx, edx
0x55a64c9cd196:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c998a80
0x55a64c998a80:	push	rbp
0x55a64c998a81:	mov	rbp, rsp
0x55a64c998a84:	push	r15
0x55a64c998a86:	push	r14
0x55a64c998a88:	push	r12
0x55a64c998a8a:	push	rbx
0x55a64c998a8b:	sub	rsp, 0x50
0x55a64c998a8f:	mov	r15, rsi
0x55a64c998a92:	mov	r14, rdi
0x55a64c998a95:	mov	rax, -0x80000
0x55a64c998a9c:	and	rax, qword ptr [rdi]
0x55a64c998a9f:	mov	r12, -0x7ad0
0x55a64c998aa6:	add	r12, qword ptr [rax + 0x48]
0x55a64c998aaa:	mov	rax, qword ptr [rsi]
0x55a64c998aad:	mov	rcx, qword ptr [rax - 1]
0x55a64c998ab1:	movzx	edx, word ptr [rcx + 0xb]
0x55a64c998ab5:	mov	ecx, 3
0x55a64c998aba:	cmp	edx, 0x80
0x55a64c998ac0:	jne	0x55a64c998ace
----------------------------------------------------------------------------------------------------
At  0x55a64c994960
0x55a64c994960:	push	rbp
0x55a64c994961:	mov	rbp, rsp
0x55a64c994964:	push	r15
0x55a64c994966:	push	r14
0x55a64c994968:	push	r12
0x55a64c99496a:	push	rbx
0x55a64c99496b:	sub	rsp, 0x10
0x55a64c99496f:	mov	r14d, esi
0x55a64c994972:	mov	r12, rdi
0x55a64c994975:	mov	rax, -0x80000
0x55a64c99497c:	and	rax, qword ptr [rdi]
0x55a64c99497f:	mov	r15, qword ptr [rax + 0x48]
0x55a64c994983:	lea	rsi, [r15 - 0x6b98]
0x55a64c99498a:	call	0x55a64c998a80
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0x0>
1  <Bool unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} == 0xc0000200>
2  <Bool unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED} == 0x0>
3  <Bool unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} == 0xc0000900>
4  <Bool unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED} == 0x0>
5  <Bool unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} == 0xc0001000>
6  <Bool unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED} == 0x0>
7  <Bool unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} == 0xc0001700>
8  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x81)>
9  <Bool 0x7f <= mem_8b480000001aea0a_2297_16{UNINITIALIZED}>
10  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x83)>
11  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x80)>
12  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x82)>
13  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x7f)>
14  <Bool mem_138b47ffffff9cee_2408_64{UNINITIALIZED} == 0xc0001e00>
15  <Bool mem_c0001dff_2410_64{UNINITIALIZED} == 0xc0001fff>
16  <Bool mem_c000200a_2412_16{UNINITIALIZED}[15:6] == 0x1>
17  <Bool mem_c000200a_2412_16{UNINITIALIZED}[2:0] == 1>
18  <Bool mem_c0001e17_2523_64{UNINITIALIZED} == 0xc00026ff>
19  <Bool !(mem_c000270a_2525_32{UNINITIALIZED} == 0x0)>
20  <Bool mem_c0001e0f_2570_64{UNINITIALIZED} == 0xc0002dff>
21  <Bool mem_c0002e0a_2572_32{UNINITIALIZED} == 0x0>
22  <Bool mem_c00026fe_2600_64{UNINITIALIZED} == 0xc00034ff>
23  <Bool (mem_c000350a_2602_16{UNINITIALIZED}[15:7] .. 0 .. mem_c000350a_2602_16{UNINITIALIZED}[2:0]) - 0x1 != 0x0>
24  <Bool mem_138b48000000163e_2633_64{UNINITIALIZED} == 0x0>
25  <Bool mem_138b480000001626_2688_64{UNINITIALIZED} - mem_138b48000000162e_2689_64{UNINITIALIZED} != 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  5
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c000bf7f_2834_64{UNINITIALIZED}>  r8: <BV64 0x2ee163800659>
rbx: <BV64 mem_c0002e4f_2685_64{UNINITIALIZED}>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x0 .. mem_c000c7e3_2837_32{UNINITIALIZED}>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x0>  r11: <BV64 0x1569800000000>
rsi: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>  r12: <BV64 0x138b47ffffff8db6>
rdi: <BV64 mem_c0002e4f_2685_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d160>  r14: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>
rbp: <BV64 0x7ffce791d170>  r15: <BV64 mem_c0002dff_2596_64{UNINITIALIZED}>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I32 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I32 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64

   00 | ------ IMark(0x55a64c91b5fc, 3, 0) ------
   01 | t6 = GET:I64(rbx)
   02 | t5 = Add64(t6,0x0000000000000018)
   03 | t0 = t5
   04 | t8 = GET:I64(rcx)
   05 | t7 = 64to32(t8)
   06 | STle(t0) = t7
   07 | PUT(rip) = 0x000055a64c91b5ff
   08 | ------ IMark(0x55a64c91b5ff, 5, 0) ------
   09 | t9 = 32Uto64(0x00000004)
   10 | PUT(rsi) = t9
   11 | PUT(rip) = 0x000055a64c91b604
   12 | ------ IMark(0x55a64c91b604, 3, 0) ------
   13 | t10 = GET:I64(rbx)
   14 | PUT(rdi) = t10
   15 | PUT(rip) = 0x000055a64c91b607
   16 | ------ IMark(0x55a64c91b607, 3, 0) ------
   17 | t12 = GET:I64(rax)
   18 | t11 = Add64(t12,0x0000000000000010)
   19 | t2 = t11
   20 | t3 = LDle:I64(t2)
   21 | t14 = GET:I64(rsp)
   22 | t13 = Sub64(t14,0x0000000000000008)
   23 | t4 = t13
   24 | PUT(rsp) = t4
   25 | STle(t4) = 0x000055a64c91b60a
   26 | t15 = Sub64(t4,0x0000000000000080)
   27 | ====== AbiHint(0xt15, 128, t3) ======
   28 | PUT(rip) = t3
   29 | t16 = GET:I64(rip)
   NEXT: PUT(rip) = t16; Ijk_Call
}
0x55a64c91b5fc:	mov	dword ptr [rbx + 0x18], ecx
0x55a64c91b5ff:	mov	esi, 4
0x55a64c91b604:	mov	rdi, rbx
0x55a64c91b607:	call	qword ptr [rax + 0x10]
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000000
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000700
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000e00
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0x100000000c0001dff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_5        0x1ff
0x138b47ff3fff7eee  OBJ_5        0x0
0x17                OBJ_5        0x8ff
0x138b47ff3ffff83e  OBJ_5        0xfff
0xfff               OBJ_5        0x16ff
0x104f              OBJ_5        0xa17f
0xa18f              OBJ_5        0xa87f
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0001dff
maximum memory range     [  0x100000000c0001dff  ,  0x100000000c00024ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0001dff_2409_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0001dff_2410_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000200a_2411_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000200a_2412_16{UNINITIALIZED}>           0x20b
<BV64 mem_c0001e17_2523_64{UNINITIALIZED}>           0x18
<BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc000270a
maximum memory range     [  0x100000000c00024ff  ,  0x100000000c0002bff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000270a_2524_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c000270a_2525_32{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0002dff
maximum memory range     [  0x100000000c0002bff  ,  0x100000000c00032ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0002dff_2595_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0002dff_2596_64{UNINITIALIZED}>           0x0
<BV32 mem_c0002e57_2599_32{UNINITIALIZED}>           0x58
<BV64 mem_c0002e4f_2685_64{UNINITIALIZED}>           0x50

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0x100000000c00032ff
maximum memory range     [  0x100000000c00032ff  ,  0x100000000c000bd7f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc000bd7f
maximum memory range     [  0x100000000c000bd7f  ,  0x100000000c000c47f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000bd7f_2597_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c000bd7f_2598_32{UNINITIALIZED}>           0x0
<BV8 mem_100000000c000bfb7_2740_8{UNINITIALIZED}>    0x10000000000000238
<BV8 mem_c000bfb7_2741_8{UNINITIALIZED}>             0x238
<BV32 mem_c000bf9f_2796_32{UNINITIALIZED}>           0x220
<BV64 mem_c000bf7f_2834_64{UNINITIALIZED}>           0x200
<BV64 mem_c000bf8f_2835_64{UNINITIALIZED}>           0x210

****************************************************************************************************
object:                  OBJ_11
(possible) base address  0xc000c7e3
maximum memory range     [  0x100000000c000c47f  ,  0x100000000c000cb7f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000c7e3_2836_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c000c7e3_2837_32{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f0>   0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f8>   0xc0000af8
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f0>  0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f8>  0xc00011f8
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f8>  0xc00018f8
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED} + 0xffffffffffffffff>     0xc0001dff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED}>
<BV32 mem_55a649ceae44_643_32{UNINITIALIZED}>                       0x55a649ceae44
<BV32 mem_55a649ceadb8_683_32{UNINITIALIZED}>                       0x55a649ceadb8
<BV32 mem_55a649cf2708_1098_32{UNINITIALIZED}>                      0x55a649cf2708
<BV32 mem_55a649cead10_1127_32{UNINITIALIZED}>                      0x55a649cead10
<BV32 mem_55a649cea634_1205_32{UNINITIALIZED}>                      0x55a649cea634
<BV32 mem_55a649cf43c8_1257_32{UNINITIALIZED}>                      0x55a649cf43c8
<BV32 mem_55a649cf0448_1267_32{UNINITIALIZED}>                      0x55a649cf0448
<BV32 mem_55a649cf5698_1282_32{UNINITIALIZED}>                      0x55a649cf5698
<BV16 mem_8b480000001aea0a_2297_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED}>                  0x138b47ffffff9cee
<BV64 mem_138b48000000163e_2548_64{UNINITIALIZED}>                  0x138b48000000163e

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  94172737549820
Write  <BV64 0x4>  bytes to  <BV64 mem_c0002e4f_2685_64{UNINITIALIZED} + 0x18>
with expression : <BV32 mem_c000c7e3_2837_32{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c91b5c0
0x55a64c91b5c0:	push	rbp
0x55a64c91b5c1:	mov	rbp, rsp
0x55a64c91b5c4:	push	r14
0x55a64c91b5c6:	push	rbx
0x55a64c91b5c7:	cmp	byte ptr [rdi + 0x38], 0
0x55a64c91b5cb:	jne	0x55a64c91b696
----------------------------------------------------------------------------------------------------
At  0x55a64c86dba0
0x55a64c86dba0:	push	rbp
0x55a64c86dba1:	mov	rbp, rsp
0x55a64c86dba4:	push	r15
0x55a64c86dba6:	push	r14
0x55a64c86dba8:	push	rbx
0x55a64c86dba9:	push	rax
0x55a64c86dbaa:	mov	r14, rsi
0x55a64c86dbad:	mov	r15, qword ptr [rdi]
0x55a64c86dbb0:	mov	eax, dword ptr [r15 + 0x8880]
0x55a64c86dbb7:	cmp	eax, dword ptr [rdi + 0x58]
0x55a64c86dbba:	jne	0x55a64c86dc34
----------------------------------------------------------------------------------------------------
At  0x55a64c584f50
0x55a64c584f50:	push	rbp
0x55a64c584f51:	mov	rbp, rsp
0x55a64c584f54:	push	r14
0x55a64c584f56:	push	rbx
0x55a64c584f57:	mov	r14, rdi
0x55a64c584f5a:	mov	rbx, qword ptr [rsi]
0x55a64c584f5d:	mov	rax, qword ptr [rbx - 1]
0x55a64c584f61:	movzx	eax, word ptr [rax + 0xb]
0x55a64c584f65:	mov	ecx, eax
0x55a64c584f67:	and	ecx, 0xffffff87
0x55a64c584f6a:	cmp	cx, 1
0x55a64c584f6e:	jne	0x55a64c584fd8
----------------------------------------------------------------------------------------------------
At  0x55a64c9cd180
0x55a64c9cd180:	push	rbp
0x55a64c9cd181:	mov	rbp, rsp
0x55a64c9cd184:	push	r15
0x55a64c9cd186:	push	r14
0x55a64c9cd188:	push	r13
0x55a64c9cd18a:	push	r12
0x55a64c9cd18c:	push	rbx
0x55a64c9cd18d:	sub	rsp, 0x28
0x55a64c9cd191:	mov	r15, rdi
0x55a64c9cd194:	xor	edx, edx
0x55a64c9cd196:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c998a80
0x55a64c998a80:	push	rbp
0x55a64c998a81:	mov	rbp, rsp
0x55a64c998a84:	push	r15
0x55a64c998a86:	push	r14
0x55a64c998a88:	push	r12
0x55a64c998a8a:	push	rbx
0x55a64c998a8b:	sub	rsp, 0x50
0x55a64c998a8f:	mov	r15, rsi
0x55a64c998a92:	mov	r14, rdi
0x55a64c998a95:	mov	rax, -0x80000
0x55a64c998a9c:	and	rax, qword ptr [rdi]
0x55a64c998a9f:	mov	r12, -0x7ad0
0x55a64c998aa6:	add	r12, qword ptr [rax + 0x48]
0x55a64c998aaa:	mov	rax, qword ptr [rsi]
0x55a64c998aad:	mov	rcx, qword ptr [rax - 1]
0x55a64c998ab1:	movzx	edx, word ptr [rcx + 0xb]
0x55a64c998ab5:	mov	ecx, 3
0x55a64c998aba:	cmp	edx, 0x80
0x55a64c998ac0:	jne	0x55a64c998ace
----------------------------------------------------------------------------------------------------
At  0x55a64c994960
0x55a64c994960:	push	rbp
0x55a64c994961:	mov	rbp, rsp
0x55a64c994964:	push	r15
0x55a64c994966:	push	r14
0x55a64c994968:	push	r12
0x55a64c99496a:	push	rbx
0x55a64c99496b:	sub	rsp, 0x10
0x55a64c99496f:	mov	r14d, esi
0x55a64c994972:	mov	r12, rdi
0x55a64c994975:	mov	rax, -0x80000
0x55a64c99497c:	and	rax, qword ptr [rdi]
0x55a64c99497f:	mov	r15, qword ptr [rax + 0x48]
0x55a64c994983:	lea	rsi, [r15 - 0x6b98]
0x55a64c99498a:	call	0x55a64c998a80
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0x0>
1  <Bool unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} == 0xc0000200>
2  <Bool unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED} == 0x0>
3  <Bool unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} == 0xc0000900>
4  <Bool unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED} == 0x0>
5  <Bool unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} == 0xc0001000>
6  <Bool unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED} == 0x0>
7  <Bool unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} == 0xc0001700>
8  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x81)>
9  <Bool 0x7f <= mem_8b480000001aea0a_2297_16{UNINITIALIZED}>
10  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x83)>
11  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x80)>
12  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x82)>
13  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x7f)>
14  <Bool mem_138b47ffffff9cee_2408_64{UNINITIALIZED} == 0xc0001e00>
15  <Bool mem_c0001dff_2410_64{UNINITIALIZED} == 0xc0001fff>
16  <Bool mem_c000200a_2412_16{UNINITIALIZED}[15:6] == 0x1>
17  <Bool mem_c000200a_2412_16{UNINITIALIZED}[2:0] == 1>
18  <Bool mem_c0001e17_2523_64{UNINITIALIZED} == 0xc00026ff>
19  <Bool mem_c000270a_2525_32{UNINITIALIZED} == 0x0>
20  <Bool mem_138b48000000163e_2548_64{UNINITIALIZED} == 0xc0002dff>
21  <Bool mem_c0002dff_2596_64{UNINITIALIZED} == 0xc00034ff>
22  <Bool mem_c000bd7f_2598_32{UNINITIALIZED} == mem_c0002e57_2599_32{UNINITIALIZED}>
23  <Bool !(mem_c0001e0f_2547_64{UNINITIALIZED}[1:0] == 1)>
24  <Bool mem_c0002e4f_2685_64{UNINITIALIZED} == 0xc000bf7f>
25  <Bool mem_c000bfb7_2741_8{UNINITIALIZED} == 0>
26  <Bool mem_c000bf9f_2796_32{UNINITIALIZED} == 0x0>
27  <Bool mem_c000bf8f_2835_64{UNINITIALIZED} == 0xc000c67f>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x55a649cf8e9c>  r8: <BV64 0x2ee163800659>
rbx: <BV64 0x1b8e075ff50d845>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x55a649cf8e9c + (symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[31:24])>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x7ffce791d240>  r11: <BV64 0x1569800000000>
rsi: <BV64 0x0>  r12: <BV64 0x0>
rdi: <BV64 0x7ffce791d148>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d140>  r14: <BV64 mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}>
rbp: <BV64 0x7ffce791d2a0>  r15: <BV64 0x7ffce791d2bc>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc00003f0
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV32 mem_c00003f8_51_32{UNINITIALIZED}>  0x8
<BV64 mem_c00003f0_52_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV64 mem_c0000900_53_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                offsets
--------------------------------------  ---------
<BV8 mem_c0001038_54_8{UNINITIALIZED}>  0x38

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001c00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250b
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                    offsets
------------------------------------------  ---------
<BV16 mem_c000250b_1684_16{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0x55a649cea634
maximum memory range     [  0xc0002a00  ,  0x55a709cfba9c  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                        offsets
----------------------------------------------  ---------
<BV32 mem_55a649ceae44_559_32{UNINITIALIZED}>   0x810
<BV32 mem_55a649ceadb8_567_32{UNINITIALIZED}>   0x784
<BV32 mem_55a649cf2708_1015_32{UNINITIALIZED}>  0x80d4
<BV32 mem_55a649cead10_1103_32{UNINITIALIZED}>  0x6dc
<BV32 mem_55a649cea634_1161_32{UNINITIALIZED}>  0x0
<BV32 mem_55a649cf43c8_1197_32{UNINITIALIZED}>  0x9d94
<BV32 mem_55a649cf0448_1217_32{UNINITIALIZED}>  0x5e14
<BV32 mem_55a649cf5698_1252_32{UNINITIALIZED}>  0xb064

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address            points to
-----------------  -----------
0x1b8e075ff50d844  0xc0002500
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f0>   0xc00003f0
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f8>   0xc00018f8
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f8>  0xc0001ff8
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED}>
<BV16 mem_8b480000001aea0a_1347_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV32 mem_1b8e075ff50d84c_1364_32{UNINITIALIZED}>                   0x1b8e075ff50d84c
<BV32 mem_1b8e075ff50d850_1370_32{UNINITIALIZED}>                   0x1b8e075ff50d850
<BV64 mem_1b8e075ff50d844_1683_64{UNINITIALIZED}>                   0x1b8e075ff50d844
<BV32 mem_55a709cfba9c_1709_32{UNINITIALIZED}>                      0x55a709cfba9c
<BV32 symbolic_read_unconstrained_1710_32{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are jumping to a controlled address
It happens at:  94172738230207
Jumping to  <BV64 0x55a649cf8e9c + (symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_1710_32{UNINITIALIZED}[31:24])>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c9c1720
0x55a64c9c1720:	push	rbp
0x55a64c9c1721:	mov	rbp, rsp
0x55a64c9c1724:	push	r15
0x55a64c9c1726:	push	r14
0x55a64c9c1728:	push	r12
0x55a64c9c172a:	push	rbx
0x55a64c9c172b:	sub	rsp, 0x140
0x55a64c9c1732:	mov	rax, qword ptr fs:[0x28]
0x55a64c9c173b:	mov	qword ptr [rbp - 0x28], rax
0x55a64c9c173f:	mov	rbx, qword ptr [rdi]
0x55a64c9c1742:	mov	ecx, dword ptr [rbx + 0xb]
0x55a64c9c1745:	xor	eax, eax
0x55a64c9c1747:	test	ecx, ecx
0x55a64c9c1749:	je	0x55a64c9c18c9
----------------------------------------------------------------------------------------------------
At  0x55a64c994660
0x55a64c994660:	push	rbp
0x55a64c994661:	mov	rbp, rsp
0x55a64c994664:	push	r15
0x55a64c994666:	push	r14
0x55a64c994668:	push	r12
0x55a64c99466a:	push	rbx
0x55a64c99466b:	sub	rsp, 0x10
0x55a64c99466f:	mov	r15, rdi
0x55a64c994672:	xor	edx, edx
0x55a64c994674:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0xc0000200>
1  <Bool mem_c00003f8_51_32{UNINITIALIZED} == 0x0>
2  <Bool mem_c00003f0_52_64{UNINITIALIZED} == 0xc0000900>
3  <Bool mem_c0000900_53_64{UNINITIALIZED} == 0xc0001000>
4  <Bool !(mem_c0001038_54_8{UNINITIALIZED} == 0)>
5  <Bool unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED} == 0x0>
6  <Bool unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} == 0xc0001700>
7  <Bool unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED} == 0x0>
8  <Bool unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} == 0xc0001e00>
9  <Bool mem_8b480000001aea0a_1347_16{UNINITIALIZED}[2:0] == 5>
10  <Bool mem_8b480000001aea0a_1347_16{UNINITIALIZED}[15:7] == 0>
11  <Bool !(mem_1b8e075ff50d84c_1364_32{UNINITIALIZED}[1:0] == 2)>
12  <Bool !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED} == 0x7)>
13  <Bool mem_1b8e075ff50d850_1370_32{UNINITIALIZED} == 0xa || !(!(!(0xfffffff6 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || (mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 0 || !(!(0xfffffff6 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xfffffff6 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)))) || !(0xfffffff6 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 0 || !(!(0xfffffff6 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xfffffff6 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)))))>
14  <Bool !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || (mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 0 || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)))) || !(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 0 || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1))))>
15  <Bool mem_1b8e075ff50d844_1683_64{UNINITIALIZED} == 0xc0002500>
16  <Bool False>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x55a649cf8f0c>  r8: <BV64 0x2ee163800659>
rbx: <BV64 0x0>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x55a649cf8f0c + (symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[31:24])>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x0>  r11: <BV64 0x1569800000000>
rsi: <BV64 0x1b8e075ff50d845>  r12: <BV64 0x0>
rdi: <BV64 0x7ffce791d288>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d250>  r14: <BV64 0x7ffce791d288>
rbp: <BV64 0x7ffce791d270>  r15: <BV64 0x0 .. mem_1b8e075ff50d850_1370_32{UNINITIALIZED}>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc00003f0
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV32 mem_c00003f8_51_32{UNINITIALIZED}>  0x8
<BV64 mem_c00003f0_52_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV64 mem_c0000900_53_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                offsets
--------------------------------------  ---------
<BV8 mem_c0001038_54_8{UNINITIALIZED}>  0x38

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001c00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002300
maximum memory range     [  0xc0002300  ,  0x100000000bfffaf60  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xbfffaf60
maximum memory range     [  0x100000000bfffaf60  ,  0x100000000bfffb660  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000bfffaf60_1379_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_bfffaf60_1380_64{UNINITIALIZED}>           0x0
<BV64 mem_100000000bfffb16f_1381_64{UNINITIALIZED}>  0x1000000000000020f
<BV64 mem_bfffb16f_1382_64{UNINITIALIZED}>           0x20f

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xbfffb86b
maximum memory range     [  0x100000000bfffb660  ,  0x100000000bfffbd60  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV16 mem_100000000bfffb86b_1417_16{UNINITIALIZED}>  0x10000000000000000
<BV16 mem_bfffb86b_1418_16{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0x55a649cea634
maximum memory range     [  0x100000000bfffbd60  ,  0x1000055a709cf4e6c  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                        offsets
----------------------------------------------  ---------
<BV32 mem_55a649ceae44_559_32{UNINITIALIZED}>   0x810
<BV32 mem_55a649ceadb8_567_32{UNINITIALIZED}>   0x784
<BV32 mem_55a649cf2708_1015_32{UNINITIALIZED}>  0x80d4
<BV32 mem_55a649cead10_1103_32{UNINITIALIZED}>  0x6dc
<BV32 mem_55a649cea634_1161_32{UNINITIALIZED}>  0x0
<BV32 mem_55a649cf43c8_1197_32{UNINITIALIZED}>  0x9d94
<BV32 mem_55a649cf0448_1217_32{UNINITIALIZED}>  0x5e14
<BV32 mem_55a649cf5698_1252_32{UNINITIALIZED}>  0xb064

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address            points to
-----------------  -----------
0xbfffaf60         0xbfffb160
0x1b8e075ff50d844  0xbfffb860
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f0>   0xc00003f0
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f8>   0xc00018f8
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f8>  0xc0001ff8
<BV64 mem_1b8e075ff500048_1378_64{UNINITIALIZED} + 0xffffffffffff8a60>      0xbfffaf60
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  -------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED}>
<BV16 mem_8b480000001aea0a_1347_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV32 mem_1b8e075ff50d84c_1364_32{UNINITIALIZED}>                   0x1b8e075ff50d84c
<BV32 mem_1b8e075ff50d850_1370_32{UNINITIALIZED}>                   0x1b8e075ff50d850
<BV64 mem_1b8e075ff500048_1378_64{UNINITIALIZED}>                   0x1b8e075ff500048
<BV64 mem_1b8e075ff50d844_1416_64{UNINITIALIZED}>                   0x1b8e075ff50d844
<BV32 mem_1000055a709cf4e6c_1429_32{UNINITIALIZED}>                 0x1000055a709cf4e6c
<BV32 symbolic_read_unconstrained_1430_32{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are jumping to a controlled address
It happens at:  94172738233775
Jumping to  <BV64 0x55a649cf8f0c + (symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_1430_32{UNINITIALIZED}[31:24])>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c9c2570
0x55a64c9c2570:	push	rbp
0x55a64c9c2571:	mov	rbp, rsp
0x55a64c9c2574:	push	r15
0x55a64c9c2576:	push	r14
0x55a64c9c2578:	push	r12
0x55a64c9c257a:	push	rbx
0x55a64c9c257b:	mov	r12d, edx
0x55a64c9c257e:	mov	r14, rdi
0x55a64c9c2581:	mov	r15d, dword ptr [rsi + 0xb]
0x55a64c9c2585:	lea	rax, [rip - 0x2cc9680]
0x55a64c9c258c:	mov	ebx, edx
0x55a64c9c258e:	jmp	0x55a64c9c2594
----------------------------------------------------------------------------------------------------
At  0x55a64c9c1680
0x55a64c9c1680:	push	rbp
0x55a64c9c1681:	mov	rbp, rsp
0x55a64c9c1684:	push	rbx
0x55a64c9c1685:	sub	rsp, 0x18
0x55a64c9c1689:	mov	eax, dword ptr [rdi + 0xb]
0x55a64c9c168c:	mov	dword ptr [rbp - 0x18], eax
0x55a64c9c168f:	mov	dword ptr [rbp - 0x14], esi
0x55a64c9c1692:	mov	dword ptr [rbp - 0x10], 0
0x55a64c9c1699:	lea	edx, [rax - 1]
0x55a64c9c169c:	cmp	edx, 0xa
0x55a64c9c169f:	setb	byte ptr [rbp - 0xc]
0x55a64c9c16a3:	mov	ebx, 2
0x55a64c9c16a8:	cmp	eax, 0x3fff
0x55a64c9c16ad:	jg	0x55a64c9c1713
----------------------------------------------------------------------------------------------------
At  0x55a64c994660
0x55a64c994660:	push	rbp
0x55a64c994661:	mov	rbp, rsp
0x55a64c994664:	push	r15
0x55a64c994666:	push	r14
0x55a64c994668:	push	r12
0x55a64c99466a:	push	rbx
0x55a64c99466b:	sub	rsp, 0x10
0x55a64c99466f:	mov	r15, rdi
0x55a64c994672:	xor	edx, edx
0x55a64c994674:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0xc0000200>
1  <Bool mem_c00003f8_51_32{UNINITIALIZED} == 0x0>
2  <Bool mem_c00003f0_52_64{UNINITIALIZED} == 0xc0000900>
3  <Bool mem_c0000900_53_64{UNINITIALIZED} == 0xc0001000>
4  <Bool !(mem_c0001038_54_8{UNINITIALIZED} == 0)>
5  <Bool unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED} == 0x0>
6  <Bool unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} == 0xc0001700>
7  <Bool unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED} == 0x0>
8  <Bool unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} == 0xc0001e00>
9  <Bool mem_8b480000001aea0a_1347_16{UNINITIALIZED}[2:0] == 5>
10  <Bool mem_8b480000001aea0a_1347_16{UNINITIALIZED}[15:7] == 0>
11  <Bool !(mem_1b8e075ff50d84c_1364_32{UNINITIALIZED}[0:0] == 0)>
12  <Bool mem_1b8e075ff50d850_1370_32{UNINITIALIZED} == 0x7 || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 0 || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)))) || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || (mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 0 || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xfffffff9 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)))))>
13  <Bool mem_1b8e075ff50d850_1370_32{UNINITIALIZED} == 0x3fff || !(!(!(0xffffc001 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || (mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 0 || !(!(0xffffc001 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xffffc001 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)))) || !(0xffffc001 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 0 || !(!(0xffffc001 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xffffc001 + mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_1370_32{UNINITIALIZED}[31:31] == 1)))))>
14  <Bool mem_1b8e075ff500048_1378_64{UNINITIALIZED} == 0xc0002500>
15  <Bool mem_bfffaf60_1380_64{UNINITIALIZED} == 0xbfffb160>
16  <Bool mem_1b8e075ff50d844_1416_64{UNINITIALIZED} == 0xbfffb860>
17  <Bool False>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c00034ff_1507_64{UNINITIALIZED}>  r8: <BV64 0x2ee163800659>
rbx: <BV64 0x8b495f78>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x0 .. mem_c0002e0a_1437_16{UNINITIALIZED}>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x0 .. mem_c000250b_1420_16{UNINITIALIZED}[2:0]>  r11: <BV64 0x1569800000000>
rsi: <BV64 0x7ffce791d3f8>  r12: <BV64 0x7ffce791d3f8>
rdi: <BV64 mem_c0002c0f_1505_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d258>  r14: <BV64 0xfffffffffff6b66c>
rbp: <BV64 0x7ffce791d270>  r15: <BV64 0xc4e5217d000>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc00003f0
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV32 mem_c00003f8_51_32{UNINITIALIZED}>  0x8
<BV64 mem_c00003f0_52_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV64 mem_c0000900_53_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                offsets
--------------------------------------  ---------
<BV8 mem_c0001038_54_8{UNINITIALIZED}>  0x38

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001c00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                    offsets
------------------------------------------  ---------
<BV16 mem_c000250b_1420_16{UNINITIALIZED}>  0xb

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c00
maximum memory range     [  0xc0002a00  ,  0x100000000c0002bff  ]
 
contains pointers:      
offset             points to    offset in target
-----------------  -----------  ------------------
0x1b8e0753f50ac44  OBJ_6        0x0
-0x1               OBJ_7        0x1ff
0x1b8e0753f50ac54  OBJ_7        0x0
0xf                OBJ_7        0x8ff
0x8ff              OBJ_7        0xfff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0002bff
maximum memory range     [  0x100000000c0002bff  ,  0x100000000c00032ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0002bff_1434_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0002bff_1435_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c0002e0a_1436_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c0002e0a_1437_16{UNINITIALIZED}>           0x20b
<BV64 mem_c0002c0f_1505_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc00034ff
maximum memory range     [  0x100000000c00032ff  ,  0x100000000c00039ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c00034ff_1506_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00034ff_1507_64{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc0003c37
maximum memory range     [  0x100000000c00039ff  ,  0x100000000c00040ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0003c37_1508_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0003c37_1509_64{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f0>   0xc00003f0
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f8>   0xc00018f8
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f8>  0xc0001ff8
<BV64 mem_1b8e075ff50d854_1433_64{UNINITIALIZED} + 0xffffffffffffffff>      0xc0002bff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED}>
<BV32 mem_55a649ceae44_559_32{UNINITIALIZED}>                       0x55a649ceae44
<BV32 mem_55a649ceadb8_567_32{UNINITIALIZED}>                       0x55a649ceadb8
<BV32 mem_55a649cf2708_1015_32{UNINITIALIZED}>                      0x55a649cf2708
<BV32 mem_55a649cead10_1103_32{UNINITIALIZED}>                      0x55a649cead10
<BV32 mem_55a649cea634_1161_32{UNINITIALIZED}>                      0x55a649cea634
<BV32 mem_55a649cf43c8_1197_32{UNINITIALIZED}>                      0x55a649cf43c8
<BV32 mem_55a649cf0448_1217_32{UNINITIALIZED}>                      0x55a649cf0448
<BV32 mem_55a649cf5698_1252_32{UNINITIALIZED}>                      0x55a649cf5698
<BV16 mem_8b480000001aea0a_1347_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV64 mem_1b8e075ff50d844_1419_64{UNINITIALIZED}>                   0x1b8e075ff50d844
<BV64 mem_1b8e075ff50d854_1433_64{UNINITIALIZED}>                   0x1b8e075ff50d854

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  94172738215442
Calling  <BV64 mem_c0003c37_1509_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c9bdda0
0x55a64c9bdda0:	push	rbp
0x55a64c9bdda1:	mov	rbp, rsp
0x55a64c9bdda4:	push	r14
0x55a64c9bdda6:	push	rbx
0x55a64c9bdda7:	mov	rax, qword ptr [rdi]
0x55a64c9bddaa:	mov	ebx, dword ptr [rax + 0xb]
0x55a64c9bddad:	mov	rcx, qword ptr [rax - 1]
0x55a64c9bddb1:	movzx	ecx, word ptr [rcx + 0xb]
0x55a64c9bddb5:	mov	edx, ecx
0x55a64c9bddb7:	and	edx, 7
0x55a64c9bddba:	cmp	edx, 3
0x55a64c9bddbd:	je	0x55a64c9bde51
----------------------------------------------------------------------------------------------------
At  0x55a64c7ec630
0x55a64c7ec630:	push	rbp
0x55a64c7ec631:	mov	rbp, rsp
0x55a64c7ec634:	push	rbx
0x55a64c7ec635:	sub	rsp, 0x18
0x55a64c7ec639:	movsd	qword ptr [rbp - 0x10], xmm0
0x55a64c7ec63e:	mov	ebx, edx
0x55a64c7ec640:	xor	edx, edx
0x55a64c7ec642:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c994660
0x55a64c994660:	push	rbp
0x55a64c994661:	mov	rbp, rsp
0x55a64c994664:	push	r15
0x55a64c994666:	push	r14
0x55a64c994668:	push	r12
0x55a64c99466a:	push	rbx
0x55a64c99466b:	sub	rsp, 0x10
0x55a64c99466f:	mov	r15, rdi
0x55a64c994672:	xor	edx, edx
0x55a64c994674:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0xc0000200>
1  <Bool mem_c00003f8_51_32{UNINITIALIZED} == 0x0>
2  <Bool mem_c00003f0_52_64{UNINITIALIZED} == 0xc0000900>
3  <Bool mem_c0000900_53_64{UNINITIALIZED} == 0xc0001000>
4  <Bool !(mem_c0001038_54_8{UNINITIALIZED} == 0)>
5  <Bool unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED} == 0x0>
6  <Bool unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} == 0xc0001700>
7  <Bool unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED} == 0x0>
8  <Bool unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} == 0xc0001e00>
9  <Bool !(0x7f <= mem_8b480000001aea0a_1347_16{UNINITIALIZED}) || mem_8b480000001aea0a_1347_16{UNINITIALIZED} == 0x7f>
10  <Bool mem_8b480000001aea0a_1347_16{UNINITIALIZED}[2:0] == 3>
11  <Bool mem_1b8e075ff50d844_1419_64{UNINITIALIZED} == 0xc0002500>
12  <Bool mem_c000250b_1420_16{UNINITIALIZED}[2:0] == 5>
13  <Bool mem_1b8e075ff50d854_1433_64{UNINITIALIZED} == 0xc0002c00>
14  <Bool mem_c0002bff_1435_64{UNINITIALIZED} == 0xc0002dff>
15  <Bool mem_c0002e0a_1437_16{UNINITIALIZED}[3:3] == 0>
16  <Bool !(mem_c0002e0a_1437_16{UNINITIALIZED}[2:0] == 0)>
17  <Bool mem_c0002c0f_1505_64{UNINITIALIZED} == 0xc00034ff>
18  <Bool mem_c00034ff_1507_64{UNINITIALIZED} == 0xc0003bff>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c00034ff_1512_64{UNINITIALIZED}>  r8: <BV64 0x2ee163800659>
rbx: <BV64 0x8b495f78>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x0 .. mem_c0002e0a_1437_16{UNINITIALIZED}>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x0 .. mem_c000250b_1420_16{UNINITIALIZED}[2:0]>  r11: <BV64 0x1569800000000>
rsi: <BV64 0x7ffce791d3f8>  r12: <BV64 0x7ffce791d3f8>
rdi: <BV64 mem_c0002c0f_1510_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d258>  r14: <BV64 0xfffffffffff6b66c>
rbp: <BV64 0x7ffce791d270>  r15: <BV64 0xc4e5217d000>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc00003f0
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV32 mem_c00003f8_51_32{UNINITIALIZED}>  0x8
<BV64 mem_c00003f0_52_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV64 mem_c0000900_53_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                offsets
--------------------------------------  ---------
<BV8 mem_c0001038_54_8{UNINITIALIZED}>  0x38

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001c00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                    offsets
------------------------------------------  ---------
<BV16 mem_c000250b_1420_16{UNINITIALIZED}>  0xb

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c00
maximum memory range     [  0xc0002a00  ,  0x100000000c0002bff  ]
 
contains pointers:      
offset             points to    offset in target
-----------------  -----------  ------------------
0x1b8e0753f50ac44  OBJ_6        0x0
-0x1               OBJ_7        0x1ff
0x1b8e0753f50ac54  OBJ_7        0x0
0xf                OBJ_7        0x8ff
0x8ff              OBJ_7        0xfff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0002bff
maximum memory range     [  0x100000000c0002bff  ,  0x100000000c00032ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0002bff_1434_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0002bff_1435_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c0002e0a_1436_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c0002e0a_1437_16{UNINITIALIZED}>           0x20b
<BV64 mem_c0002c0f_1510_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc00034ff
maximum memory range     [  0x100000000c00032ff  ,  0x100000000c00039ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c00034ff_1511_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00034ff_1512_64{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc0003c37
maximum memory range     [  0x100000000c00039ff  ,  0x100000000c00040ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0003c37_1513_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0003c37_1514_64{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} + 0x1f0>   0xc00003f0
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} + 0x1f8>   0xc00018f8
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} + 0x1f8>  0xc0001ff8
<BV64 mem_1b8e075ff50d854_1433_64{UNINITIALIZED} + 0xffffffffffffffff>      0xc0002bff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED}>
<BV32 mem_55a649ceae44_559_32{UNINITIALIZED}>                       0x55a649ceae44
<BV32 mem_55a649ceadb8_567_32{UNINITIALIZED}>                       0x55a649ceadb8
<BV32 mem_55a649cf2708_1015_32{UNINITIALIZED}>                      0x55a649cf2708
<BV32 mem_55a649cead10_1103_32{UNINITIALIZED}>                      0x55a649cead10
<BV32 mem_55a649cea634_1161_32{UNINITIALIZED}>                      0x55a649cea634
<BV32 mem_55a649cf43c8_1197_32{UNINITIALIZED}>                      0x55a649cf43c8
<BV32 mem_55a649cf0448_1217_32{UNINITIALIZED}>                      0x55a649cf0448
<BV32 mem_55a649cf5698_1252_32{UNINITIALIZED}>                      0x55a649cf5698
<BV16 mem_8b480000001aea0a_1347_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV64 mem_1b8e075ff50d844_1419_64{UNINITIALIZED}>                   0x1b8e075ff50d844
<BV64 mem_1b8e075ff50d854_1433_64{UNINITIALIZED}>                   0x1b8e075ff50d854

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  94172738215472
Calling  <BV64 mem_c0003c37_1514_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c9bdda0
0x55a64c9bdda0:	push	rbp
0x55a64c9bdda1:	mov	rbp, rsp
0x55a64c9bdda4:	push	r14
0x55a64c9bdda6:	push	rbx
0x55a64c9bdda7:	mov	rax, qword ptr [rdi]
0x55a64c9bddaa:	mov	ebx, dword ptr [rax + 0xb]
0x55a64c9bddad:	mov	rcx, qword ptr [rax - 1]
0x55a64c9bddb1:	movzx	ecx, word ptr [rcx + 0xb]
0x55a64c9bddb5:	mov	edx, ecx
0x55a64c9bddb7:	and	edx, 7
0x55a64c9bddba:	cmp	edx, 3
0x55a64c9bddbd:	je	0x55a64c9bde51
----------------------------------------------------------------------------------------------------
At  0x55a64c7ec630
0x55a64c7ec630:	push	rbp
0x55a64c7ec631:	mov	rbp, rsp
0x55a64c7ec634:	push	rbx
0x55a64c7ec635:	sub	rsp, 0x18
0x55a64c7ec639:	movsd	qword ptr [rbp - 0x10], xmm0
0x55a64c7ec63e:	mov	ebx, edx
0x55a64c7ec640:	xor	edx, edx
0x55a64c7ec642:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c994660
0x55a64c994660:	push	rbp
0x55a64c994661:	mov	rbp, rsp
0x55a64c994664:	push	r15
0x55a64c994666:	push	r14
0x55a64c994668:	push	r12
0x55a64c99466a:	push	rbx
0x55a64c99466b:	sub	rsp, 0x10
0x55a64c99466f:	mov	r15, rdi
0x55a64c994672:	xor	edx, edx
0x55a64c994674:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0xc0000200>
1  <Bool mem_c00003f8_51_32{UNINITIALIZED} == 0x0>
2  <Bool mem_c00003f0_52_64{UNINITIALIZED} == 0xc0000900>
3  <Bool mem_c0000900_53_64{UNINITIALIZED} == 0xc0001000>
4  <Bool !(mem_c0001038_54_8{UNINITIALIZED} == 0)>
5  <Bool unconstrained_ret_ReturnUnconstrained_61_64{UNINITIALIZED} == 0x0>
6  <Bool unconstrained_ret_ReturnUnconstrained_84_64{UNINITIALIZED} == 0xc0001700>
7  <Bool unconstrained_ret_ReturnUnconstrained_183_64{UNINITIALIZED} == 0x0>
8  <Bool unconstrained_ret_ReturnUnconstrained_253_64{UNINITIALIZED} == 0xc0001e00>
9  <Bool !(0x7f <= mem_8b480000001aea0a_1347_16{UNINITIALIZED}) || mem_8b480000001aea0a_1347_16{UNINITIALIZED} == 0x7f>
10  <Bool mem_8b480000001aea0a_1347_16{UNINITIALIZED}[2:0] == 3>
11  <Bool mem_1b8e075ff50d844_1419_64{UNINITIALIZED} == 0xc0002500>
12  <Bool mem_c000250b_1420_16{UNINITIALIZED}[2:0] == 5>
13  <Bool mem_1b8e075ff50d854_1433_64{UNINITIALIZED} == 0xc0002c00>
14  <Bool mem_c0002bff_1435_64{UNINITIALIZED} == 0xc0002dff>
15  <Bool !(mem_c0002e0a_1437_16{UNINITIALIZED}[3:3] == 0)>
16  <Bool !(mem_c0002e0a_1437_16{UNINITIALIZED}[2:0] == 0)>
17  <Bool mem_c0002c0f_1510_64{UNINITIALIZED} == 0xc00034ff>
18  <Bool mem_c00034ff_1512_64{UNINITIALIZED} == 0xc0003bff>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c000bf7f_2834_64{UNINITIALIZED}>  r8: <BV64 0x2ee163800659>
rbx: <BV64 mem_c0002e4f_2685_64{UNINITIALIZED}>  r9: <BV64 0x235159314b41>
rcx: <BV64 0x0 .. mem_c000c7e3_2837_32{UNINITIALIZED}>  r10: <BV64 0xc4e52185818>
rdx: <BV64 0x0>  r11: <BV64 0x1569800000000>
rsi: <BV64 0x4>  r12: <BV64 0x138b47ffffff8db6>
rdi: <BV64 mem_c0002e4f_2685_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffce791d158>  r14: <BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>
rbp: <BV64 0x7ffce791d170>  r15: <BV64 mem_c0002dff_2596_64{UNINITIALIZED}>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1831eb9782e8
maximum memory range     [  0x1831eb9782e8  ,  0x1831eb978318  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000000
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000700
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000e00
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001500
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0x100000000c0001dff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_5        0x1ff
0x138b47ff3fff7eee  OBJ_5        0x0
0x17                OBJ_5        0x8ff
0x138b47ff3ffff83e  OBJ_5        0xfff
0xfff               OBJ_5        0x16ff
0x104f              OBJ_5        0xa17f
0xa18f              OBJ_5        0xa87f
0xa17f              OBJ_5        0xaf7f
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0001dff
maximum memory range     [  0x100000000c0001dff  ,  0x100000000c00024ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0001dff_2409_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0001dff_2410_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000200a_2411_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000200a_2412_16{UNINITIALIZED}>           0x20b
<BV64 mem_c0001e17_2523_64{UNINITIALIZED}>           0x18
<BV64 mem_c0001e0f_2547_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc000270a
maximum memory range     [  0x100000000c00024ff  ,  0x100000000c0002bff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000270a_2524_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c000270a_2525_32{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0002dff
maximum memory range     [  0x100000000c0002bff  ,  0x100000000c00032ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c0002dff_2595_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0002dff_2596_64{UNINITIALIZED}>           0x0
<BV32 mem_c0002e57_2599_32{UNINITIALIZED}>           0x58
<BV64 mem_c0002e4f_2685_64{UNINITIALIZED}>           0x50

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0x100000000c00032ff
maximum memory range     [  0x100000000c00032ff  ,  0x100000000c000bd7f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc000bd7f
maximum memory range     [  0x100000000c000bd7f  ,  0x100000000c000c47f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000bd7f_2597_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c000bd7f_2598_32{UNINITIALIZED}>           0x0
<BV8 mem_100000000c000bfb7_2740_8{UNINITIALIZED}>    0x10000000000000238
<BV8 mem_c000bfb7_2741_8{UNINITIALIZED}>             0x238
<BV32 mem_c000bf9f_2796_32{UNINITIALIZED}>           0x220
<BV64 mem_c000bf7f_2834_64{UNINITIALIZED}>           0x200
<BV64 mem_c000bf8f_2835_64{UNINITIALIZED}>           0x210

****************************************************************************************************
object:                  OBJ_11
(possible) base address  0xc000c7e3
maximum memory range     [  0x100000000c000c47f  ,  0x100000000c000cb7f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV32 mem_100000000c000c7e3_2836_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c000c7e3_2837_32{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_12
(possible) base address  0xc000cd8f
maximum memory range     [  0x100000000c000cb7f  ,  0x100000000c000d27f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                             offsets
---------------------------------------------------  -------------------
<BV64 mem_100000000c000cd8f_2838_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c000cd8f_2839_64{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                      points to
--------------------------------------------------------------------------  -----------
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f0>   0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} + 0x1f8>   0xc00003f8
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f0>   0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} + 0x1f8>   0xc0000af8
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f0>  0x1ef
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} + 0x1f8>  0xc00011f8
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f0>  0x1f1
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} + 0x1f8>  0xc00018f8
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED} + 0xffffffffffffffff>     0xc0001dff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_49_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED}>
<BV64 unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED}>
<BV32 mem_55a649ceae44_643_32{UNINITIALIZED}>                       0x55a649ceae44
<BV32 mem_55a649ceadb8_683_32{UNINITIALIZED}>                       0x55a649ceadb8
<BV32 mem_55a649cf2708_1098_32{UNINITIALIZED}>                      0x55a649cf2708
<BV32 mem_55a649cead10_1127_32{UNINITIALIZED}>                      0x55a649cead10
<BV32 mem_55a649cea634_1205_32{UNINITIALIZED}>                      0x55a649cea634
<BV32 mem_55a649cf43c8_1257_32{UNINITIALIZED}>                      0x55a649cf43c8
<BV32 mem_55a649cf0448_1267_32{UNINITIALIZED}>                      0x55a649cf0448
<BV32 mem_55a649cf5698_1282_32{UNINITIALIZED}>                      0x55a649cf5698
<BV16 mem_8b480000001aea0a_2297_16{UNINITIALIZED}>                  0x8b480000001aea0a
<BV64 mem_138b47ffffff9cee_2408_64{UNINITIALIZED}>                  0x138b47ffffff9cee
<BV64 mem_138b48000000163e_2548_64{UNINITIALIZED}>                  0x138b48000000163e

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  94172737549831
Calling  <BV64 mem_c000cd8f_2839_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x55a64c91b5c0
0x55a64c91b5c0:	push	rbp
0x55a64c91b5c1:	mov	rbp, rsp
0x55a64c91b5c4:	push	r14
0x55a64c91b5c6:	push	rbx
0x55a64c91b5c7:	cmp	byte ptr [rdi + 0x38], 0
0x55a64c91b5cb:	jne	0x55a64c91b696
----------------------------------------------------------------------------------------------------
At  0x55a64c86dba0
0x55a64c86dba0:	push	rbp
0x55a64c86dba1:	mov	rbp, rsp
0x55a64c86dba4:	push	r15
0x55a64c86dba6:	push	r14
0x55a64c86dba8:	push	rbx
0x55a64c86dba9:	push	rax
0x55a64c86dbaa:	mov	r14, rsi
0x55a64c86dbad:	mov	r15, qword ptr [rdi]
0x55a64c86dbb0:	mov	eax, dword ptr [r15 + 0x8880]
0x55a64c86dbb7:	cmp	eax, dword ptr [rdi + 0x58]
0x55a64c86dbba:	jne	0x55a64c86dc34
----------------------------------------------------------------------------------------------------
At  0x55a64c584f50
0x55a64c584f50:	push	rbp
0x55a64c584f51:	mov	rbp, rsp
0x55a64c584f54:	push	r14
0x55a64c584f56:	push	rbx
0x55a64c584f57:	mov	r14, rdi
0x55a64c584f5a:	mov	rbx, qword ptr [rsi]
0x55a64c584f5d:	mov	rax, qword ptr [rbx - 1]
0x55a64c584f61:	movzx	eax, word ptr [rax + 0xb]
0x55a64c584f65:	mov	ecx, eax
0x55a64c584f67:	and	ecx, 0xffffff87
0x55a64c584f6a:	cmp	cx, 1
0x55a64c584f6e:	jne	0x55a64c584fd8
----------------------------------------------------------------------------------------------------
At  0x55a64c9cd180
0x55a64c9cd180:	push	rbp
0x55a64c9cd181:	mov	rbp, rsp
0x55a64c9cd184:	push	r15
0x55a64c9cd186:	push	r14
0x55a64c9cd188:	push	r13
0x55a64c9cd18a:	push	r12
0x55a64c9cd18c:	push	rbx
0x55a64c9cd18d:	sub	rsp, 0x28
0x55a64c9cd191:	mov	r15, rdi
0x55a64c9cd194:	xor	edx, edx
0x55a64c9cd196:	call	0x55a64c584f50
----------------------------------------------------------------------------------------------------
At  0x55a64c998a80
0x55a64c998a80:	push	rbp
0x55a64c998a81:	mov	rbp, rsp
0x55a64c998a84:	push	r15
0x55a64c998a86:	push	r14
0x55a64c998a88:	push	r12
0x55a64c998a8a:	push	rbx
0x55a64c998a8b:	sub	rsp, 0x50
0x55a64c998a8f:	mov	r15, rsi
0x55a64c998a92:	mov	r14, rdi
0x55a64c998a95:	mov	rax, -0x80000
0x55a64c998a9c:	and	rax, qword ptr [rdi]
0x55a64c998a9f:	mov	r12, -0x7ad0
0x55a64c998aa6:	add	r12, qword ptr [rax + 0x48]
0x55a64c998aaa:	mov	rax, qword ptr [rsi]
0x55a64c998aad:	mov	rcx, qword ptr [rax - 1]
0x55a64c998ab1:	movzx	edx, word ptr [rcx + 0xb]
0x55a64c998ab5:	mov	ecx, 3
0x55a64c998aba:	cmp	edx, 0x80
0x55a64c998ac0:	jne	0x55a64c998ace
----------------------------------------------------------------------------------------------------
At  0x55a64c994960
0x55a64c994960:	push	rbp
0x55a64c994961:	mov	rbp, rsp
0x55a64c994964:	push	r15
0x55a64c994966:	push	r14
0x55a64c994968:	push	r12
0x55a64c99496a:	push	rbx
0x55a64c99496b:	sub	rsp, 0x10
0x55a64c99496f:	mov	r14d, esi
0x55a64c994972:	mov	r12, rdi
0x55a64c994975:	mov	rax, -0x80000
0x55a64c99497c:	and	rax, qword ptr [rdi]
0x55a64c99497f:	mov	r15, qword ptr [rax + 0x48]
0x55a64c994983:	lea	rsi, [r15 - 0x6b98]
0x55a64c99498a:	call	0x55a64c998a80
----------------------------------------------------------------------------------------------------
At  0x55a64c994530
0x55a64c994530:	push	rbp
0x55a64c994531:	mov	rbp, rsp
0x55a64c994534:	push	r15
0x55a64c994536:	push	r14
0x55a64c994538:	push	rbx
0x55a64c994539:	push	rax
0x55a64c99453a:	mov	r15d, edx
0x55a64c99453d:	mov	rbx, rsi
0x55a64c994540:	mov	r14, rdi
0x55a64c994543:	nop	word ptr cs:[rax + rax]
0x55a64c99454d:	nop	dword ptr [rax]
0x55a64c994550:	mov	rax, qword ptr [rbx]
0x55a64c994553:	test	al, 1
0x55a64c994555:	je	0x55a64c99464f
----------------------------------------------------------------------------------------------------
At  0x55a64c994a40
0x55a64c994a40:	push	rbp
0x55a64c994a41:	mov	rbp, rsp
0x55a64c994a44:	push	r14
0x55a64c994a46:	push	rbx
0x55a64c994a47:	sub	rsp, 0x20
0x55a64c994a4b:	mov	r14, rdi
0x55a64c994a4e:	xor	ebx, ebx
0x55a64c994a50:	xor	edx, edx
0x55a64c994a52:	call	0x55a64c994530
----------------------------------------------------------------------------------------------------
At  0x55a64c5f2760
0x55a64c5f2760:	mov	rax, qword ptr [rip + 0x55c9bf9]
0x55a64c5f2767:	cmp	dword ptr [rax], 0
0x55a64c5f276a:	jne	0x55a64c5f2774
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca1420
0x55a64cca1420:	test	dil, 1
0x55a64cca1424:	je	0x55a64cca1471
----------------------------------------------------------------------------------------------------
At  0x55a64cd34b40
0x55a64cd34b40:	push	rbp
0x55a64cd34b41:	mov	rbp, rsp
0x55a64cd34b44:	push	0x18
0x55a64cd34b46:	sub	rsp, 0x40
0x55a64cd34b4a:	mov	r8, rdx
0x55a64cd34b4d:	mov	rdx, rcx
0x55a64cd34b50:	shr	rdx, 0x20
0x55a64cd34b54:	mov	r9, rbx
0x55a64cd34b57:	shr	r9, 0x20
0x55a64cd34b5b:	mov	qword ptr [rbp - 0x10], rax
0x55a64cd34b5f:	mov	qword ptr [rbp - 0x18], rbx
0x55a64cd34b63:	mov	r11, r9
0x55a64cd34b66:	imul	r11d, edx
0x55a64cd34b6a:	jo	0x55a64cd3509e
----------------------------------------------------------------------------------------------------
At  0x55a64cd35a80
0x55a64cd35a80:	push	rbp
0x55a64cd35a81:	mov	rbp, rsp
0x55a64cd35a84:	push	0x18
0x55a64cd35a86:	sub	rsp, 0x40
0x55a64cd35a8a:	mov	r8, qword ptr [rbx - 1]
0x55a64cd35a8e:	mov	qword ptr [rbp - 0x10], rsi
0x55a64cd35a92:	mov	qword ptr [rbp - 0x20], rcx
0x55a64cd35a96:	mov	qword ptr [rbp - 0x28], rdx
0x55a64cd35a9a:	mov	qword ptr [rbp - 0x30], rdi
0x55a64cd35a9e:	cmp	word ptr [r8 + 0xb], 0x452
0x55a64cd35aa5:	jne	0x55a64cd35c91
----------------------------------------------------------------------------------------------------
At  0x55a64cc9ffe0
0x55a64cc9ffe0:	cmp	rbx, 0xffff
0x55a64cc9ffe7:	je	0x55a64cca00ba
----------------------------------------------------------------------------------------------------
At  0x55a64cca6aa0
0x55a64cca6aa0:	mov	r10, qword ptr [r13 + 0x1208]
0x55a64cca6aa7:	mov	r8, rsp
0x55a64cca6aaa:	sub	r8, r10
0x55a64cca6aad:	sar	r8, 3
0x55a64cca6ab1:	cmp	r8, rax
0x55a64cca6ab4:	jle	0x55a64cca6ae2
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool unconstrained_ret_ReturnUnconstrained_50_64{UNINITIALIZED} == 0x0>
1  <Bool unconstrained_ret_ReturnUnconstrained_60_64{UNINITIALIZED} == 0xc0000200>
2  <Bool unconstrained_ret_ReturnUnconstrained_70_64{UNINITIALIZED} == 0x0>
3  <Bool unconstrained_ret_ReturnUnconstrained_96_64{UNINITIALIZED} == 0xc0000900>
4  <Bool unconstrained_ret_ReturnUnconstrained_163_64{UNINITIALIZED} == 0x0>
5  <Bool unconstrained_ret_ReturnUnconstrained_224_64{UNINITIALIZED} == 0xc0001000>
6  <Bool unconstrained_ret_ReturnUnconstrained_409_64{UNINITIALIZED} == 0x0>
7  <Bool unconstrained_ret_ReturnUnconstrained_472_64{UNINITIALIZED} == 0xc0001700>
8  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x81)>
9  <Bool 0x7f <= mem_8b480000001aea0a_2297_16{UNINITIALIZED}>
10  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x83)>
11  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x80)>
12  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x82)>
13  <Bool !(mem_8b480000001aea0a_2297_16{UNINITIALIZED} == 0x7f)>
14  <Bool mem_138b47ffffff9cee_2408_64{UNINITIALIZED} == 0xc0001e00>
15  <Bool mem_c0001dff_2410_64{UNINITIALIZED} == 0xc0001fff>
16  <Bool mem_c000200a_2412_16{UNINITIALIZED}[15:6] == 0x1>
17  <Bool mem_c000200a_2412_16{UNINITIALIZED}[2:0] == 1>
18  <Bool mem_c0001e17_2523_64{UNINITIALIZED} == 0xc00026ff>
19  <Bool mem_c000270a_2525_32{UNINITIALIZED} == 0x0>
20  <Bool mem_138b48000000163e_2548_64{UNINITIALIZED} == 0xc0002dff>
21  <Bool mem_c0002dff_2596_64{UNINITIALIZED} == 0xc00034ff>
22  <Bool mem_c000bd7f_2598_32{UNINITIALIZED} == mem_c0002e57_2599_32{UNINITIALIZED}>
23  <Bool !(mem_c0001e0f_2547_64{UNINITIALIZED}[1:0] == 1)>
24  <Bool mem_c0002e4f_2685_64{UNINITIALIZED} == 0xc000bf7f>
25  <Bool mem_c000bfb7_2741_8{UNINITIALIZED} == 0>
26  <Bool mem_c000bf9f_2796_32{UNINITIALIZED} == 0x0>
27  <Bool mem_c000bf8f_2835_64{UNINITIALIZED} == 0xc000c67f>
28  <Bool mem_c000bf7f_2834_64{UNINITIALIZED} == 0xc000cd7f>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

-----end dump executor-----
