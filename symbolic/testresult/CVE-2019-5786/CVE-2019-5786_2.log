-----start dump executor-----
Step:  860
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        5
control_hijack (C)         4
active (A)               100
unconstrained (U)          0
errored (E)                1
found                      2
avoided                    0
paths to write primitive:  12
paths to control hijack:  24
first primitive after:  847
total paths:  311
****************************************************************************************************
Some errored states: 
<State errored with "no implementation found for operation CmpLE">
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x8 + mem_8e0fc63b48400d9f_117_64{UNINITIALIZED}>  r8: <BV64 0x23454e180659>
rbx: <BV64 mem_c000020f_103_64{UNINITIALIZED}>  r9: <BV64 0x3bd522c14c81>
rcx: <BV64 0x0 .. mem_c000040a_68_16{UNINITIALIZED}[15:7] .. 0 .. mem_c000040a_68_16{UNINITIALIZED}[2:0]>  r10: <BV64 0x1c7577e1e818>
rdx: <BV64 0x0>  r11: <BV64 0x155a400000000>
rsi: <BV64 mem_8e0fc63b48400d9f_117_64{UNINITIALIZED}>  r12: <BV64 0x8e0fc63b483f852f>
rdi: <BV64 mem_8e0fc63b48400db7_104_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffcbfa6e050>  r14: <BV64 0x8e0fc63b483f852f>
rbp: <BV64 0x7ffcbfa6e060>  r15: <BV64 0x8e0fc63b483f852f>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64

   00 | ------ IMark(0x5569388da7db, 3, 0) ------
   01 | t0 = GET:I64(rsi)
   02 | t10 = GET:I64(rbx)
   03 | STle(t0) = t10
   04 | PUT(rip) = 0x00005569388da7de
   05 | ------ IMark(0x5569388da7de, 3, 0) ------
   06 | t11 = GET:I64(rsi)
   07 | PUT(rax) = t11
   08 | PUT(rip) = 0x00005569388da7e1
   09 | ------ IMark(0x5569388da7e1, 1, 0) ------
   10 | t2 = GET:I64(rsp)
   11 | t1 = LDle:I64(t2)
   12 | t12 = Add64(t2,0x0000000000000008)
   13 | PUT(rsp) = t12
   14 | PUT(rbx) = t1
   15 | PUT(rip) = 0x00005569388da7e2
   16 | ------ IMark(0x5569388da7e2, 2, 0) ------
   17 | t4 = GET:I64(rsp)
   18 | t3 = LDle:I64(t4)
   19 | t13 = Add64(t4,0x0000000000000008)
   20 | PUT(rsp) = t13
   21 | PUT(r14) = t3
   22 | PUT(rip) = 0x00005569388da7e4
   23 | ------ IMark(0x5569388da7e4, 1, 0) ------
   24 | t6 = GET:I64(rsp)
   25 | t5 = LDle:I64(t6)
   26 | t14 = Add64(t6,0x0000000000000008)
   27 | PUT(rsp) = t14
   28 | PUT(rbp) = t5
   29 | PUT(rip) = 0x00005569388da7e5
   30 | ------ IMark(0x5569388da7e5, 1, 0) ------
   31 | t7 = GET:I64(rsp)
   32 | t8 = LDle:I64(t7)
   33 | t9 = Add64(t7,0x0000000000000008)
   34 | PUT(rsp) = t9
   35 | t15 = Sub64(t9,0x0000000000000080)
   36 | ====== AbiHint(0xt15, 128, t8) ======
   37 | PUT(rip) = t8
   38 | t16 = GET:I64(rip)
   NEXT: PUT(rip) = t16; Ijk_Ret
}
0x5569388da7db:	mov	qword ptr [rsi], rbx
0x5569388da7de:	mov	rax, rsi
0x5569388da7e1:	pop	rbx
0x5569388da7e2:	pop	r14
0x5569388da7e4:	pop	rbp
0x5569388da7e5:	ret	
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1aa61867cb40
maximum memory range     [  0x1aa61867cb40  ,  0x1aa61867cb70  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0x100000000c00001ff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_1        0x1ff
0x8e0fc63a883f9267  OBJ_1        0x0
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc00001ff
maximum memory range     [  0x100000000c00001ff  ,  0x100000000c00008ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                           offsets
-------------------------------------------------  -------------------
<BV64 mem_100000000c00001ff_65_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00001ff_66_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000040a_67_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000040a_68_16{UNINITIALIZED}>           0x20b
<BV64 mem_c000020f_103_64{UNINITIALIZED}>          0x10

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                 points to
---------------------------------------------------------------------  -----------
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED} + 0xffffffffffffffff>  0xc00001ff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                           address
-------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_ymm0_49_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_50_64{UNINITIALIZED}>
<BV32 mem_556937131784_51_32{UNINITIALIZED}>       0x556937131784
<BV128 reg_ymm1_52_128{UNINITIALIZED}>
<BV32 mem_5569370cc0f0_53_32{UNINITIALIZED}>       0x5569370cc0f0
<BV32 mem_556937135c08_54_32{UNINITIALIZED}>       0x556937135c08
<BV96 reg_292_55_96{UNINITIALIZED}>
<BV32 mem_556936de5614_56_32{UNINITIALIZED}>       0x556936de5614
<BV32 mem_556937168cf0_57_32{UNINITIALIZED}>       0x556937168cf0
<BV32 mem_556937168cc0_58_32{UNINITIALIZED}>       0x556937168cc0
<BV32 mem_556937168ca8_59_32{UNINITIALIZED}>       0x556937168ca8
<BV32 mem_556937168c9c_60_32{UNINITIALIZED}>       0x556937168c9c
<BV32 mem_556937168c94_61_32{UNINITIALIZED}>       0x556937168c94
<BV16 mem_8b480000001aea0a_62_16{UNINITIALIZED}>   0x8b480000001aea0a
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED}>   0x8e0fc63b483f9467
<BV64 mem_8e0fc63b48400db7_104_64{UNINITIALIZED}>  0x8e0fc63b48400db7
<BV64 mem_8e0fc63b48400d9f_117_64{UNINITIALIZED}>  0x8e0fc63b48400d9f
<BV64 mem_8e0fc63b48400da7_118_64{UNINITIALIZED}>  0x8e0fc63b48400da7

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  93910408734683
Write  <BV64 0x8>  bytes to  <BV64 mem_8e0fc63b48400d9f_117_64{UNINITIALIZED}>
with expression : <BV64 mem_c000020f_103_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x5569388da700
0x5569388da700:	push	rbp
0x5569388da701:	mov	rbp, rsp
0x5569388da704:	push	r14
0x5569388da706:	push	rbx
0x5569388da707:	mov	r14, rdi
0x5569388da70a:	mov	rbx, qword ptr [rsi]
0x5569388da70d:	mov	rax, qword ptr [rbx - 1]
0x5569388da711:	movzx	eax, word ptr [rax + 0xb]
0x5569388da715:	mov	ecx, eax
0x5569388da717:	and	ecx, 0xffffff87
0x5569388da71a:	cmp	cx, 1
0x5569388da71e:	jne	0x5569388da788
----------------------------------------------------------------------------------------------------
At  0x556938d22320
0x556938d22320:	push	rbp
0x556938d22321:	mov	rbp, rsp
0x556938d22324:	push	r15
0x556938d22326:	push	r14
0x556938d22328:	push	r13
0x556938d2232a:	push	r12
0x556938d2232c:	push	rbx
0x556938d2232d:	sub	rsp, 0x28
0x556938d22331:	mov	r15, rdi
0x556938d22334:	xor	edx, edx
0x556938d22336:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938cedc10
0x556938cedc10:	push	rbp
0x556938cedc11:	mov	rbp, rsp
0x556938cedc14:	push	r15
0x556938cedc16:	push	r14
0x556938cedc18:	push	r12
0x556938cedc1a:	push	rbx
0x556938cedc1b:	sub	rsp, 0x50
0x556938cedc1f:	mov	r15, rsi
0x556938cedc22:	mov	r14, rdi
0x556938cedc25:	mov	rax, -0x80000
0x556938cedc2c:	and	rax, qword ptr [rdi]
0x556938cedc2f:	mov	r12, -0x7ad0
0x556938cedc36:	add	r12, qword ptr [rax + 0x48]
0x556938cedc3a:	mov	rax, qword ptr [rsi]
0x556938cedc3d:	mov	rcx, qword ptr [rax - 1]
0x556938cedc41:	movzx	edx, word ptr [rcx + 0xb]
0x556938cedc45:	mov	ecx, 3
0x556938cedc4a:	cmp	edx, 0x80
0x556938cedc50:	jne	0x556938cedc5e
----------------------------------------------------------------------------------------------------
At  0x556938ce9af0
0x556938ce9af0:	push	rbp
0x556938ce9af1:	mov	rbp, rsp
0x556938ce9af4:	push	r15
0x556938ce9af6:	push	r14
0x556938ce9af8:	push	r12
0x556938ce9afa:	push	rbx
0x556938ce9afb:	sub	rsp, 0x10
0x556938ce9aff:	mov	r14d, esi
0x556938ce9b02:	mov	r12, rdi
0x556938ce9b05:	mov	rax, -0x80000
0x556938ce9b0c:	and	rax, qword ptr [rdi]
0x556938ce9b0f:	mov	r15, qword ptr [rax + 0x48]
0x556938ce9b13:	lea	rsi, [r15 - 0x6b98]
0x556938ce9b1a:	call	0x556938cedc10
----------------------------------------------------------------------------------------------------
At  0x556938ce96c0
0x556938ce96c0:	push	rbp
0x556938ce96c1:	mov	rbp, rsp
0x556938ce96c4:	push	r15
0x556938ce96c6:	push	r14
0x556938ce96c8:	push	rbx
0x556938ce96c9:	push	rax
0x556938ce96ca:	mov	r15d, edx
0x556938ce96cd:	mov	rbx, rsi
0x556938ce96d0:	mov	r14, rdi
0x556938ce96d3:	nop	word ptr cs:[rax + rax]
0x556938ce96dd:	nop	dword ptr [rax]
0x556938ce96e0:	mov	rax, qword ptr [rbx]
0x556938ce96e3:	test	al, 1
0x556938ce96e5:	je	0x556938ce97df
----------------------------------------------------------------------------------------------------
At  0x556938ce9bd0
0x556938ce9bd0:	push	rbp
0x556938ce9bd1:	mov	rbp, rsp
0x556938ce9bd4:	push	r14
0x556938ce9bd6:	push	rbx
0x556938ce9bd7:	sub	rsp, 0x20
0x556938ce9bdb:	mov	r14, rdi
0x556938ce9bde:	xor	ebx, ebx
0x556938ce9be0:	xor	edx, edx
0x556938ce9be2:	call	0x556938ce96c0
----------------------------------------------------------------------------------------------------
At  0x556938947530
0x556938947530:	mov	rax, qword ptr [rip + 0x43e3401]
0x556938947537:	cmp	dword ptr [rax], 0
0x55693894753a:	jne	0x556938947544
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ff6c80
0x556938ff6c80:	test	dil, 1
0x556938ff6c84:	je	0x556938ff6cd1
----------------------------------------------------------------------------------------------------
At  0x55693908a3a0
0x55693908a3a0:	push	rbp
0x55693908a3a1:	mov	rbp, rsp
0x55693908a3a4:	push	0x18
0x55693908a3a6:	sub	rsp, 0x40
0x55693908a3aa:	mov	r8, rdx
0x55693908a3ad:	mov	rdx, rcx
0x55693908a3b0:	shr	rdx, 0x20
0x55693908a3b4:	mov	r9, rbx
0x55693908a3b7:	shr	r9, 0x20
0x55693908a3bb:	mov	qword ptr [rbp - 0x10], rax
0x55693908a3bf:	mov	qword ptr [rbp - 0x18], rbx
0x55693908a3c3:	mov	r11, r9
0x55693908a3c6:	imul	r11d, edx
0x55693908a3ca:	jo	0x55693908a8fe
----------------------------------------------------------------------------------------------------
At  0x55693908b2e0
0x55693908b2e0:	push	rbp
0x55693908b2e1:	mov	rbp, rsp
0x55693908b2e4:	push	0x18
0x55693908b2e6:	sub	rsp, 0x40
0x55693908b2ea:	mov	r8, qword ptr [rbx - 1]
0x55693908b2ee:	mov	qword ptr [rbp - 0x10], rsi
0x55693908b2f2:	mov	qword ptr [rbp - 0x20], rcx
0x55693908b2f6:	mov	qword ptr [rbp - 0x28], rdx
0x55693908b2fa:	mov	qword ptr [rbp - 0x30], rdi
0x55693908b2fe:	cmp	word ptr [r8 + 0xb], 0x452
0x55693908b305:	jne	0x55693908b4f1
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ffc300
0x556938ffc300:	mov	r10, qword ptr [r13 + 0x1208]
0x556938ffc307:	mov	r8, rsp
0x556938ffc30a:	sub	r8, r10
0x556938ffc30d:	sar	r8, 3
0x556938ffc311:	cmp	r8, rax
0x556938ffc314:	jle	0x556938ffc342
----------------------------------------------------------------------------------------------------
At  0x5569390d6f60
0x5569390d6f60:	mov	rax, rbp
0x5569390d6f63:	mov	rbx, qword ptr [rax - 0x10]
0x5569390d6f67:	mov	rbx, qword ptr [rbx + 0x27]
0x5569390d6f6b:	movzx	edx, byte ptr [r14 + r9 + 2]
0x5569390d6f71:	mov	rbx, qword ptr [rbx + 7]
0x5569390d6f75:	mov	rcx, qword ptr [rbx + rdx*8 + 0x27]
0x5569390d6f7a:	test	cl, 1
0x5569390d6f7d:	je	0x5569390d6fdc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x81)>
1  <Bool 0x7f <= mem_8b480000001aea0a_62_16{UNINITIALIZED}>
2  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x83)>
3  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x80)>
4  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x82)>
5  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x7f)>
6  <Bool mem_8e0fc63b483f9467_64_64{UNINITIALIZED} == 0xc0000200>
7  <Bool mem_c00001ff_66_64{UNINITIALIZED} == 0xc00003ff>
8  <Bool mem_c000040a_68_16{UNINITIALIZED}[15:6] == 0x1>
9  <Bool mem_c000040a_68_16{UNINITIALIZED}[2:0] == 5>
10  <Bool mem_8e0fc63b48400db7_104_64{UNINITIALIZED} == 0x0>
11  <Bool mem_8e0fc63b48400d9f_117_64{UNINITIALIZED} - mem_8e0fc63b48400da7_118_64{UNINITIALIZED} != 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x0 .. ~mem_c0000207_131_32{UNINITIALIZED}[5:0] .. 0>  r8: <BV64 0x4>
rbx: <BV64 0x0>  r9: <BV64 mem_8b480000001aea2e_129_64{UNINITIALIZED}>
rcx: <BV64 (0x0 .. ~mem_c0000207_131_32{UNINITIALIZED}[5:0] .. 0) + mem_8e0fc63b48400d97_130_64{UNINITIALIZED}>  r10: <BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED}>
rdx: <BV64 mem_c0001216_208_64{UNINITIALIZED}>  r11: <BV64 0x0 .. ~mem_c0000207_131_32{UNINITIALIZED}[5:0]>
rsi: <BV64 0x8b480000001ae9ff>  r12: <BV64 0x7ffcbfa6e0d0>
rdi: <BV64 0x1800000000>  r13: <BV64 mem_8e0fc63b48400d97_130_64{UNINITIALIZED}>
rsp: <BV64 0x7ffcbfa6e040>  r14: <BV64 0x0 .. mem_c0000207_131_32{UNINITIALIZED}>
rbp: <BV64 0x7ffcbfa6e090>  r15: <BV64 0x0 .. mem_8b480000001aea0e_99_32{UNINITIALIZED}[19:10]>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I32 t3:Ity_I32 t4:Ity_I32 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I32 t18:Ity_I64 t19:Ity_I32 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I1 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64

   00 | ------ IMark(0x556938cd4dd2, 5, 0) ------
   01 | t9 = GET:I64(rax)
   02 | t8 = Shl64(t9,0x00)
   03 | t10 = GET:I64(r13)
   04 | t7 = Add64(t10,t8)
   05 | t6 = Add64(t7,0x0000000000000008)
   06 | t0 = t6
   07 | t11 = GET:I64(r10)
   08 | STle(t0) = t11
   09 | PUT(rip) = 0x0000556938cd4dd7
   10 | ------ IMark(0x556938cd4dd7, 8, 0) ------
   11 | t15 = GET:I64(r11)
   12 | t14 = Shl64(t15,0x02)
   13 | t16 = GET:I64(r13)
   14 | t13 = Add64(t16,t14)
   15 | t12 = Add64(t13,0x0000000000000400)
   16 | t1 = t12
   17 | t18 = GET:I64(rbx)
   18 | t17 = 64to32(t18)
   19 | STle(t1) = t17
   20 | PUT(rip) = 0x0000556938cd4ddf
   21 | ------ IMark(0x556938cd4ddf, 3, 0) ------
   22 | t20 = GET:I64(rbx)
   23 | t19 = 64to32(t20)
   24 | t4 = t19
   25 | t3 = 0xffffffff
   26 | t2 = Sub32(t4,t3)
   27 | PUT(cc_op) = 0x0000000000000007
   28 | t21 = 32Uto64(t4)
   29 | PUT(cc_dep1) = t21
   30 | t22 = 32Uto64(t3)
   31 | PUT(cc_dep2) = t22
   32 | PUT(rip) = 0x0000556938cd4de2
   33 | ------ IMark(0x556938cd4de2, 4, 0) ------
   34 | t24 = GET:I64(rbp)
   35 | t23 = Add64(t24,0xffffffffffffffb8)
   36 | t5 = t23
   37 | t25 = LDle:I64(t5)
   38 | PUT(rdx) = t25
   39 | PUT(rip) = 0x0000556938cd4de6
   40 | ------ IMark(0x556938cd4de6, 2, 0) ------
   41 | t27 = GET:I64(cc_op)
   42 | t28 = GET:I64(cc_dep1)
   43 | t29 = GET:I64(cc_dep2)
   44 | t30 = GET:I64(cc_ndep)
   45 | t31 = amd64g_calculate_condition(0x0000000000000004,t27,t28,t29,t30):Ity_I64
   46 | t26 = 64to1(t31)
   47 | if (t26) { PUT(rip) = 0x556938cd4e1f; Ijk_Boring }
   48 | PUT(rip) = 0x0000556938cd4de8
   49 | t32 = GET:I64(rip)
   NEXT: PUT(rip) = t32; Ijk_Boring
}
0x556938cd4dd2:	mov	qword ptr [r13 + rax + 8], r10
0x556938cd4dd7:	mov	dword ptr [r13 + r11*4 + 0x400], ebx
0x556938cd4ddf:	cmp	ebx, -1
0x556938cd4de2:	mov	rdx, qword ptr [rbp - 0x48]
0x556938cd4de6:	je	0x556938cd4e1f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1aa61867cb40
maximum memory range     [  0x1aa61867cb40  ,  0x1aa61867cb70  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0x100000000c00001ff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_1        0x1ff
0x8e0fc63a883f9267  OBJ_1        0x0
0x8e0fc63a88400b97  OBJ_1        0x50f
0x8b47ffff401ae82e  OBJ_1        0xfff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc00001ff
maximum memory range     [  0x100000000c00001ff  ,  0x100000000c00008ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                           offsets
-------------------------------------------------  -------------------
<BV64 mem_100000000c00001ff_65_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00001ff_66_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000040a_67_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000040a_68_16{UNINITIALIZED}>           0x20b
<BV8 mem_c000020b_70_8{UNINITIALIZED}>             0xc
<BV32 mem_c0000207_131_32{UNINITIALIZED}>          0x8

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000aff
maximum memory range     [  0x100000000c00008ff  ,  0x100000000c0000fff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c0000aff_132_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0000aff_133_64{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001216
maximum memory range     [  0x100000000c0000fff  ,  0x100000000c00016ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c0001216_207_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0001216_208_64{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                 points to
---------------------------------------------------------------------  -----------
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED} + 0xffffffffffffffff>  0xc00001ff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                           address
-------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_ymm0_49_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_50_64{UNINITIALIZED}>
<BV32 mem_556937131784_51_32{UNINITIALIZED}>       0x556937131784
<BV128 reg_ymm1_52_128{UNINITIALIZED}>
<BV32 mem_5569370cc0f0_53_32{UNINITIALIZED}>       0x5569370cc0f0
<BV32 mem_556937135c08_54_32{UNINITIALIZED}>       0x556937135c08
<BV96 reg_292_55_96{UNINITIALIZED}>
<BV32 mem_556936de5614_56_32{UNINITIALIZED}>       0x556936de5614
<BV32 mem_556937168cf0_57_32{UNINITIALIZED}>       0x556937168cf0
<BV32 mem_556937168cc0_58_32{UNINITIALIZED}>       0x556937168cc0
<BV32 mem_556937168ca8_59_32{UNINITIALIZED}>       0x556937168ca8
<BV32 mem_556937168c9c_60_32{UNINITIALIZED}>       0x556937168c9c
<BV32 mem_556937168c94_61_32{UNINITIALIZED}>       0x556937168c94
<BV16 mem_8b480000001aea0a_62_16{UNINITIALIZED}>   0x8b480000001aea0a
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED}>   0x8e0fc63b483f9467
<BV32 mem_8b480000001aea0e_99_32{UNINITIALIZED}>   0x8b480000001aea0e
<BV64 mem_8b480000001aea2e_129_64{UNINITIALIZED}>  0x8b480000001aea2e
<BV64 mem_8e0fc63b48400d97_130_64{UNINITIALIZED}>  0x8e0fc63b48400d97

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  93910412905938
Write  <BV64 0x8>  bytes to  <BV64 mem_8e0fc63b48400d97_130_64{UNINITIALIZED} + (0x0 .. ~mem_c0000207_131_32{UNINITIALIZED}[5:0] .. 0) + 0x8>
with expression : <BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x556938cd4ae0
0x556938cd4ae0:	push	rbp
0x556938cd4ae1:	mov	rbp, rsp
0x556938cd4ae4:	push	r15
0x556938cd4ae6:	push	r14
0x556938cd4ae8:	push	r13
0x556938cd4aea:	push	r12
0x556938cd4aec:	push	rbx
0x556938cd4aed:	sub	rsp, 0x28
0x556938cd4af1:	mov	r8d, 4
0x556938cd4af7:	cmp	dword ptr [rdi + 0xc], 2
0x556938cd4afb:	je	0x556938cd4e59
----------------------------------------------------------------------------------------------------
At  0x556938cd1f20
0x556938cd1f20:	push	rbp
0x556938cd1f21:	mov	rbp, rsp
0x556938cd1f24:	push	r15
0x556938cd1f26:	push	r14
0x556938cd1f28:	push	rbx
0x556938cd1f29:	push	rax
0x556938cd1f2a:	mov	rbx, rdi
0x556938cd1f2d:	mov	byte ptr [rdi + 8], 0
0x556938cd1f31:	mov	dword ptr [rdi + 4], 4
0x556938cd1f38:	mov	rax, qword ptr [rdi + 0x40]
0x556938cd1f3c:	mov	qword ptr [rdi + 0x38], rax
0x556938cd1f40:	mov	r14, qword ptr [rax]
0x556938cd1f43:	mov	r15, qword ptr [r14 - 1]
0x556938cd1f47:	movzx	eax, word ptr [r15 + 0xb]
0x556938cd1f4c:	mov	rsi, r15
0x556938cd1f4f:	mov	rdx, r14
0x556938cd1f52:	cmp	eax, 0x410
0x556938cd1f57:	ja	0x556938cd1f71
----------------------------------------------------------------------------------------------------
At  0x556938cedc10
0x556938cedc10:	push	rbp
0x556938cedc11:	mov	rbp, rsp
0x556938cedc14:	push	r15
0x556938cedc16:	push	r14
0x556938cedc18:	push	r12
0x556938cedc1a:	push	rbx
0x556938cedc1b:	sub	rsp, 0x50
0x556938cedc1f:	mov	r15, rsi
0x556938cedc22:	mov	r14, rdi
0x556938cedc25:	mov	rax, -0x80000
0x556938cedc2c:	and	rax, qword ptr [rdi]
0x556938cedc2f:	mov	r12, -0x7ad0
0x556938cedc36:	add	r12, qword ptr [rax + 0x48]
0x556938cedc3a:	mov	rax, qword ptr [rsi]
0x556938cedc3d:	mov	rcx, qword ptr [rax - 1]
0x556938cedc41:	movzx	edx, word ptr [rcx + 0xb]
0x556938cedc45:	mov	ecx, 3
0x556938cedc4a:	cmp	edx, 0x80
0x556938cedc50:	jne	0x556938cedc5e
----------------------------------------------------------------------------------------------------
At  0x556938ce9af0
0x556938ce9af0:	push	rbp
0x556938ce9af1:	mov	rbp, rsp
0x556938ce9af4:	push	r15
0x556938ce9af6:	push	r14
0x556938ce9af8:	push	r12
0x556938ce9afa:	push	rbx
0x556938ce9afb:	sub	rsp, 0x10
0x556938ce9aff:	mov	r14d, esi
0x556938ce9b02:	mov	r12, rdi
0x556938ce9b05:	mov	rax, -0x80000
0x556938ce9b0c:	and	rax, qword ptr [rdi]
0x556938ce9b0f:	mov	r15, qword ptr [rax + 0x48]
0x556938ce9b13:	lea	rsi, [r15 - 0x6b98]
0x556938ce9b1a:	call	0x556938cedc10
----------------------------------------------------------------------------------------------------
At  0x556938ce96c0
0x556938ce96c0:	push	rbp
0x556938ce96c1:	mov	rbp, rsp
0x556938ce96c4:	push	r15
0x556938ce96c6:	push	r14
0x556938ce96c8:	push	rbx
0x556938ce96c9:	push	rax
0x556938ce96ca:	mov	r15d, edx
0x556938ce96cd:	mov	rbx, rsi
0x556938ce96d0:	mov	r14, rdi
0x556938ce96d3:	nop	word ptr cs:[rax + rax]
0x556938ce96dd:	nop	dword ptr [rax]
0x556938ce96e0:	mov	rax, qword ptr [rbx]
0x556938ce96e3:	test	al, 1
0x556938ce96e5:	je	0x556938ce97df
----------------------------------------------------------------------------------------------------
At  0x556938ce9bd0
0x556938ce9bd0:	push	rbp
0x556938ce9bd1:	mov	rbp, rsp
0x556938ce9bd4:	push	r14
0x556938ce9bd6:	push	rbx
0x556938ce9bd7:	sub	rsp, 0x20
0x556938ce9bdb:	mov	r14, rdi
0x556938ce9bde:	xor	ebx, ebx
0x556938ce9be0:	xor	edx, edx
0x556938ce9be2:	call	0x556938ce96c0
----------------------------------------------------------------------------------------------------
At  0x556938947530
0x556938947530:	mov	rax, qword ptr [rip + 0x43e3401]
0x556938947537:	cmp	dword ptr [rax], 0
0x55693894753a:	jne	0x556938947544
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ff6c80
0x556938ff6c80:	test	dil, 1
0x556938ff6c84:	je	0x556938ff6cd1
----------------------------------------------------------------------------------------------------
At  0x55693908a3a0
0x55693908a3a0:	push	rbp
0x55693908a3a1:	mov	rbp, rsp
0x55693908a3a4:	push	0x18
0x55693908a3a6:	sub	rsp, 0x40
0x55693908a3aa:	mov	r8, rdx
0x55693908a3ad:	mov	rdx, rcx
0x55693908a3b0:	shr	rdx, 0x20
0x55693908a3b4:	mov	r9, rbx
0x55693908a3b7:	shr	r9, 0x20
0x55693908a3bb:	mov	qword ptr [rbp - 0x10], rax
0x55693908a3bf:	mov	qword ptr [rbp - 0x18], rbx
0x55693908a3c3:	mov	r11, r9
0x55693908a3c6:	imul	r11d, edx
0x55693908a3ca:	jo	0x55693908a8fe
----------------------------------------------------------------------------------------------------
At  0x55693908b2e0
0x55693908b2e0:	push	rbp
0x55693908b2e1:	mov	rbp, rsp
0x55693908b2e4:	push	0x18
0x55693908b2e6:	sub	rsp, 0x40
0x55693908b2ea:	mov	r8, qword ptr [rbx - 1]
0x55693908b2ee:	mov	qword ptr [rbp - 0x10], rsi
0x55693908b2f2:	mov	qword ptr [rbp - 0x20], rcx
0x55693908b2f6:	mov	qword ptr [rbp - 0x28], rdx
0x55693908b2fa:	mov	qword ptr [rbp - 0x30], rdi
0x55693908b2fe:	cmp	word ptr [r8 + 0xb], 0x452
0x55693908b305:	jne	0x55693908b4f1
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ffc300
0x556938ffc300:	mov	r10, qword ptr [r13 + 0x1208]
0x556938ffc307:	mov	r8, rsp
0x556938ffc30a:	sub	r8, r10
0x556938ffc30d:	sar	r8, 3
0x556938ffc311:	cmp	r8, rax
0x556938ffc314:	jle	0x556938ffc342
----------------------------------------------------------------------------------------------------
At  0x5569390d6f60
0x5569390d6f60:	mov	rax, rbp
0x5569390d6f63:	mov	rbx, qword ptr [rax - 0x10]
0x5569390d6f67:	mov	rbx, qword ptr [rbx + 0x27]
0x5569390d6f6b:	movzx	edx, byte ptr [r14 + r9 + 2]
0x5569390d6f71:	mov	rbx, qword ptr [rbx + 7]
0x5569390d6f75:	mov	rcx, qword ptr [rbx + rdx*8 + 0x27]
0x5569390d6f7a:	test	cl, 1
0x5569390d6f7d:	je	0x5569390d6fdc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool 0x410 <= mem_8b480000001aea0a_62_16{UNINITIALIZED}>
1  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x410)>
2  <Bool mem_8e0fc63b483f9467_64_64{UNINITIALIZED} == 0xc0000200>
3  <Bool mem_c0001216_208_64{UNINITIALIZED} == 0xc0000200>
4  <Bool mem_c00001ff_66_64{UNINITIALIZED} == 0xc00003ff>
5  <Bool mem_c000040a_68_16{UNINITIALIZED} == 0x80>
6  <Bool mem_8b480000001aea0e_99_32{UNINITIALIZED}[20:20] == 0>
7  <Bool !(mem_8b480000001aea0e_99_32{UNINITIALIZED}[19:10] == 0x0)>
8  <Bool !(0x8 <= mem_8b480000001aea0e_99_32{UNINITIALIZED}[19:10]) || mem_8b480000001aea0e_99_32{UNINITIALIZED}[19:10] == 0x8>
9  <Bool mem_8e0fc63b48400d97_130_64{UNINITIALIZED} == 0xc0000aff + 0xffffffffffffffff * (0x0 .. ~mem_c0000207_131_32{UNINITIALIZED}[5:0] .. 0)>
10  <Bool !(mem_c0000aff_133_64{UNINITIALIZED} == 0x8b480000001ae9ff)>
11  <Bool mem_8b480000001aea2e_129_64{UNINITIALIZED} == 0xc00011ff>
12  <Bool (0x0 .. ~mem_c0000207_131_32{UNINITIALIZED}[5:0] .. 0) + mem_8e0fc63b48400d97_130_64{UNINITIALIZED} == 0xc0000aff>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x8 + mem_8e0fc63b48400d9f_136_64{UNINITIALIZED}>  r8: <BV64 0x23454e180659>
rbx: <BV64 mem_c000020f_115_64{UNINITIALIZED}>  r9: <BV64 0x3bd522c14c81>
rcx: <BV64 0x0 .. mem_c000040a_68_16{UNINITIALIZED}[15:7] .. 0 .. mem_c000040a_68_16{UNINITIALIZED}[2:0]>  r10: <BV64 0x1c7577e1e818>
rdx: <BV64 0x0>  r11: <BV64 0x155a400000000>
rsi: <BV64 mem_8e0fc63b48400d9f_136_64{UNINITIALIZED}>  r12: <BV64 0x8e0fc63b483f852f>
rdi: <BV64 mem_8e0fc63b48400db7_116_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffcbfa6e050>  r14: <BV64 0x8e0fc63b483f852f>
rbp: <BV64 0x7ffcbfa6e060>  r15: <BV64 0x8e0fc63b483f852f>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I32 t4:Ity_I32 t5:Ity_I32 t6:Ity_I16 t7:Ity_I16 t8:Ity_I16 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I32 t17:Ity_I16 t18:Ity_I32 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I1 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64

   00 | ------ IMark(0x5569388da785, 3, 0) ------
   01 | t0 = GET:I64(rsi)
   02 | t9 = GET:I64(rbx)
   03 | STle(t0) = t9
   04 | PUT(rip) = 0x00005569388da788
   05 | ------ IMark(0x5569388da788, 4, 0) ------
   06 | t11 = GET:I64(rbx)
   07 | t10 = Add64(t11,0xffffffffffffffff)
   08 | t1 = t10
   09 | t12 = LDle:I64(t1)
   10 | PUT(rax) = t12
   11 | PUT(rip) = 0x00005569388da78c
   12 | ------ IMark(0x5569388da78c, 4, 0) ------
   13 | t14 = GET:I64(rax)
   14 | t13 = Add64(t14,0x000000000000000b)
   15 | t2 = t13
   16 | t17 = LDle:I16(t2)
   17 | t16 = 16Uto32(t17)
   18 | t15 = 32Uto64(t16)
   19 | PUT(rax) = t15
   20 | PUT(rip) = 0x00005569388da790
   21 | ------ IMark(0x5569388da790, 3, 0) ------
   22 | t19 = GET:I64(rax)
   23 | t18 = 64to32(t19)
   24 | t5 = t18
   25 | t4 = 0xffffff87
   26 | t3 = And32(t5,t4)
   27 | PUT(cc_op) = 0x0000000000000013
   28 | t20 = 32Uto64(t3)
   29 | PUT(cc_dep1) = t20
   30 | PUT(cc_dep2) = 0x0000000000000000
   31 | t21 = 32Uto64(t3)
   32 | PUT(rax) = t21
   33 | PUT(rip) = 0x00005569388da793
   34 | ------ IMark(0x5569388da793, 4, 0) ------
   35 | t8 = GET:I16(ax)
   36 | t7 = 0x0005
   37 | t6 = Sub16(t8,t7)
   38 | PUT(cc_op) = 0x0000000000000006
   39 | t22 = 16Uto64(t8)
   40 | PUT(cc_dep1) = t22
   41 | t23 = 16Uto64(t7)
   42 | PUT(cc_dep2) = t23
   43 | PUT(rip) = 0x00005569388da797
   44 | ------ IMark(0x5569388da797, 2, 0) ------
   45 | t25 = GET:I64(cc_op)
   46 | t26 = GET:I64(cc_dep1)
   47 | t27 = GET:I64(cc_dep2)
   48 | t28 = GET:I64(cc_ndep)
   49 | t29 = amd64g_calculate_condition(0x0000000000000004,t25,t26,t27,t28):Ity_I64
   50 | t24 = 64to1(t29)
   51 | if (t24) { PUT(rip) = 0x5569388da799; Ijk_Boring }
   52 | PUT(rip) = 0x00005569388da7de
   53 | t30 = GET:I64(rip)
   NEXT: PUT(rip) = t30; Ijk_Boring
}
0x5569388da785:	mov	qword ptr [rsi], rbx
0x5569388da788:	mov	rax, qword ptr [rbx - 1]
0x5569388da78c:	movzx	eax, word ptr [rax + 0xb]
0x5569388da790:	and	eax, 0xffffff87
0x5569388da793:	cmp	ax, 5
0x5569388da797:	jne	0x5569388da7de
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1aa61867cb40
maximum memory range     [  0x1aa61867cb40  ,  0x1aa61867cb70  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0x100000000c00001ff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_1        0x1ff
0x8e0fc63a883f9267  OBJ_1        0x0
0x17                OBJ_1        0x8ff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc00001ff
maximum memory range     [  0x100000000c00001ff  ,  0x100000000c00008ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                           offsets
-------------------------------------------------  -------------------
<BV64 mem_100000000c00001ff_65_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00001ff_66_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000040a_67_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000040a_68_16{UNINITIALIZED}>           0x20b
<BV64 mem_c0000217_100_64{UNINITIALIZED}>          0x18
<BV64 mem_c000020f_115_64{UNINITIALIZED}>          0x10

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000b0a
maximum memory range     [  0x100000000c00008ff  ,  0x100000000c0000fff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV32 mem_100000000c0000b0a_101_32{UNINITIALIZED}>  0x10000000000000000
<BV32 mem_c0000b0a_102_32{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                 points to
---------------------------------------------------------------------  -----------
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED} + 0xffffffffffffffff>  0xc00001ff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                           address
-------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_ymm0_49_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_50_64{UNINITIALIZED}>
<BV32 mem_556937131784_51_32{UNINITIALIZED}>       0x556937131784
<BV128 reg_ymm1_52_128{UNINITIALIZED}>
<BV32 mem_5569370cc0f0_53_32{UNINITIALIZED}>       0x5569370cc0f0
<BV32 mem_556937135c08_54_32{UNINITIALIZED}>       0x556937135c08
<BV96 reg_292_55_96{UNINITIALIZED}>
<BV32 mem_556936de5614_56_32{UNINITIALIZED}>       0x556936de5614
<BV32 mem_556937168cf0_57_32{UNINITIALIZED}>       0x556937168cf0
<BV32 mem_556937168cc0_58_32{UNINITIALIZED}>       0x556937168cc0
<BV32 mem_556937168ca8_59_32{UNINITIALIZED}>       0x556937168ca8
<BV32 mem_556937168c9c_60_32{UNINITIALIZED}>       0x556937168c9c
<BV32 mem_556937168c94_61_32{UNINITIALIZED}>       0x556937168c94
<BV16 mem_8b480000001aea0a_62_16{UNINITIALIZED}>   0x8b480000001aea0a
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED}>   0x8e0fc63b483f9467
<BV64 mem_8e0fc63b48400db7_116_64{UNINITIALIZED}>  0x8e0fc63b48400db7
<BV64 mem_8e0fc63b48400d9f_136_64{UNINITIALIZED}>  0x8e0fc63b48400d9f
<BV64 mem_8e0fc63b48400da7_137_64{UNINITIALIZED}>  0x8e0fc63b48400da7

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  93910408734597
Write  <BV64 0x8>  bytes to  <BV64 mem_8e0fc63b48400d9f_136_64{UNINITIALIZED}>
with expression : <BV64 mem_c000020f_115_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x5569388da700
0x5569388da700:	push	rbp
0x5569388da701:	mov	rbp, rsp
0x5569388da704:	push	r14
0x5569388da706:	push	rbx
0x5569388da707:	mov	r14, rdi
0x5569388da70a:	mov	rbx, qword ptr [rsi]
0x5569388da70d:	mov	rax, qword ptr [rbx - 1]
0x5569388da711:	movzx	eax, word ptr [rax + 0xb]
0x5569388da715:	mov	ecx, eax
0x5569388da717:	and	ecx, 0xffffff87
0x5569388da71a:	cmp	cx, 1
0x5569388da71e:	jne	0x5569388da788
----------------------------------------------------------------------------------------------------
At  0x556938d22320
0x556938d22320:	push	rbp
0x556938d22321:	mov	rbp, rsp
0x556938d22324:	push	r15
0x556938d22326:	push	r14
0x556938d22328:	push	r13
0x556938d2232a:	push	r12
0x556938d2232c:	push	rbx
0x556938d2232d:	sub	rsp, 0x28
0x556938d22331:	mov	r15, rdi
0x556938d22334:	xor	edx, edx
0x556938d22336:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938cedc10
0x556938cedc10:	push	rbp
0x556938cedc11:	mov	rbp, rsp
0x556938cedc14:	push	r15
0x556938cedc16:	push	r14
0x556938cedc18:	push	r12
0x556938cedc1a:	push	rbx
0x556938cedc1b:	sub	rsp, 0x50
0x556938cedc1f:	mov	r15, rsi
0x556938cedc22:	mov	r14, rdi
0x556938cedc25:	mov	rax, -0x80000
0x556938cedc2c:	and	rax, qword ptr [rdi]
0x556938cedc2f:	mov	r12, -0x7ad0
0x556938cedc36:	add	r12, qword ptr [rax + 0x48]
0x556938cedc3a:	mov	rax, qword ptr [rsi]
0x556938cedc3d:	mov	rcx, qword ptr [rax - 1]
0x556938cedc41:	movzx	edx, word ptr [rcx + 0xb]
0x556938cedc45:	mov	ecx, 3
0x556938cedc4a:	cmp	edx, 0x80
0x556938cedc50:	jne	0x556938cedc5e
----------------------------------------------------------------------------------------------------
At  0x556938ce9af0
0x556938ce9af0:	push	rbp
0x556938ce9af1:	mov	rbp, rsp
0x556938ce9af4:	push	r15
0x556938ce9af6:	push	r14
0x556938ce9af8:	push	r12
0x556938ce9afa:	push	rbx
0x556938ce9afb:	sub	rsp, 0x10
0x556938ce9aff:	mov	r14d, esi
0x556938ce9b02:	mov	r12, rdi
0x556938ce9b05:	mov	rax, -0x80000
0x556938ce9b0c:	and	rax, qword ptr [rdi]
0x556938ce9b0f:	mov	r15, qword ptr [rax + 0x48]
0x556938ce9b13:	lea	rsi, [r15 - 0x6b98]
0x556938ce9b1a:	call	0x556938cedc10
----------------------------------------------------------------------------------------------------
At  0x556938ce96c0
0x556938ce96c0:	push	rbp
0x556938ce96c1:	mov	rbp, rsp
0x556938ce96c4:	push	r15
0x556938ce96c6:	push	r14
0x556938ce96c8:	push	rbx
0x556938ce96c9:	push	rax
0x556938ce96ca:	mov	r15d, edx
0x556938ce96cd:	mov	rbx, rsi
0x556938ce96d0:	mov	r14, rdi
0x556938ce96d3:	nop	word ptr cs:[rax + rax]
0x556938ce96dd:	nop	dword ptr [rax]
0x556938ce96e0:	mov	rax, qword ptr [rbx]
0x556938ce96e3:	test	al, 1
0x556938ce96e5:	je	0x556938ce97df
----------------------------------------------------------------------------------------------------
At  0x556938ce9bd0
0x556938ce9bd0:	push	rbp
0x556938ce9bd1:	mov	rbp, rsp
0x556938ce9bd4:	push	r14
0x556938ce9bd6:	push	rbx
0x556938ce9bd7:	sub	rsp, 0x20
0x556938ce9bdb:	mov	r14, rdi
0x556938ce9bde:	xor	ebx, ebx
0x556938ce9be0:	xor	edx, edx
0x556938ce9be2:	call	0x556938ce96c0
----------------------------------------------------------------------------------------------------
At  0x556938947530
0x556938947530:	mov	rax, qword ptr [rip + 0x43e3401]
0x556938947537:	cmp	dword ptr [rax], 0
0x55693894753a:	jne	0x556938947544
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ff6c80
0x556938ff6c80:	test	dil, 1
0x556938ff6c84:	je	0x556938ff6cd1
----------------------------------------------------------------------------------------------------
At  0x55693908a3a0
0x55693908a3a0:	push	rbp
0x55693908a3a1:	mov	rbp, rsp
0x55693908a3a4:	push	0x18
0x55693908a3a6:	sub	rsp, 0x40
0x55693908a3aa:	mov	r8, rdx
0x55693908a3ad:	mov	rdx, rcx
0x55693908a3b0:	shr	rdx, 0x20
0x55693908a3b4:	mov	r9, rbx
0x55693908a3b7:	shr	r9, 0x20
0x55693908a3bb:	mov	qword ptr [rbp - 0x10], rax
0x55693908a3bf:	mov	qword ptr [rbp - 0x18], rbx
0x55693908a3c3:	mov	r11, r9
0x55693908a3c6:	imul	r11d, edx
0x55693908a3ca:	jo	0x55693908a8fe
----------------------------------------------------------------------------------------------------
At  0x55693908b2e0
0x55693908b2e0:	push	rbp
0x55693908b2e1:	mov	rbp, rsp
0x55693908b2e4:	push	0x18
0x55693908b2e6:	sub	rsp, 0x40
0x55693908b2ea:	mov	r8, qword ptr [rbx - 1]
0x55693908b2ee:	mov	qword ptr [rbp - 0x10], rsi
0x55693908b2f2:	mov	qword ptr [rbp - 0x20], rcx
0x55693908b2f6:	mov	qword ptr [rbp - 0x28], rdx
0x55693908b2fa:	mov	qword ptr [rbp - 0x30], rdi
0x55693908b2fe:	cmp	word ptr [r8 + 0xb], 0x452
0x55693908b305:	jne	0x55693908b4f1
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ffc300
0x556938ffc300:	mov	r10, qword ptr [r13 + 0x1208]
0x556938ffc307:	mov	r8, rsp
0x556938ffc30a:	sub	r8, r10
0x556938ffc30d:	sar	r8, 3
0x556938ffc311:	cmp	r8, rax
0x556938ffc314:	jle	0x556938ffc342
----------------------------------------------------------------------------------------------------
At  0x5569390d6f60
0x5569390d6f60:	mov	rax, rbp
0x5569390d6f63:	mov	rbx, qword ptr [rax - 0x10]
0x5569390d6f67:	mov	rbx, qword ptr [rbx + 0x27]
0x5569390d6f6b:	movzx	edx, byte ptr [r14 + r9 + 2]
0x5569390d6f71:	mov	rbx, qword ptr [rbx + 7]
0x5569390d6f75:	mov	rcx, qword ptr [rbx + rdx*8 + 0x27]
0x5569390d6f7a:	test	cl, 1
0x5569390d6f7d:	je	0x5569390d6fdc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x81)>
1  <Bool 0x7f <= mem_8b480000001aea0a_62_16{UNINITIALIZED}>
2  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x83)>
3  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x80)>
4  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x82)>
5  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x7f)>
6  <Bool mem_8e0fc63b483f9467_64_64{UNINITIALIZED} == 0xc0000200>
7  <Bool mem_c00001ff_66_64{UNINITIALIZED} == 0xc00003ff>
8  <Bool mem_c000040a_68_16{UNINITIALIZED}[15:6] == 0x1>
9  <Bool mem_c000040a_68_16{UNINITIALIZED}[2:0] == 1>
10  <Bool mem_c0000217_100_64{UNINITIALIZED} == 0xc0000aff>
11  <Bool mem_c0000b0a_102_32{UNINITIALIZED} == 0x0>
12  <Bool mem_8e0fc63b48400db7_116_64{UNINITIALIZED} == 0x0>
13  <Bool mem_8e0fc63b48400d9f_136_64{UNINITIALIZED} - mem_8e0fc63b48400da7_137_64{UNINITIALIZED} != 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0009a6f_180_64{UNINITIALIZED}>  r8: <BV64 0x23454e180659>
rbx: <BV64 0x7ffcbfa6e2a0>  r9: <BV64 0x3bd522c14c81>
rcx: <BV64 0x8 + mem_c0009a6f_180_64{UNINITIALIZED}>  r10: <BV64 0x1c7577e1e818>
rdx: <BV64 0x0>  r11: <BV64 0x155a400000000>
rsi: <BV64 mem_c000020f_103_64{UNINITIALIZED}>  r12: <BV64 0x8e0fc63b483f852f>
rdi: <BV64 mem_8e0fc63b48400db7_104_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffcbfa6e040>  r14: <BV64 mem_c000020f_103_64{UNINITIALIZED}>
rbp: <BV64 0x7ffcbfa6e060>  r15: <BV64 mem_c0000aff_142_64{UNINITIALIZED}>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64

   00 | ------ IMark(0x556938bc2d50, 7, 0) ------
   01 | t3 = GET:I64(r15)
   02 | t2 = Add64(t3,0x0000000000008870)
   03 | t0 = t2
   04 | t4 = GET:I64(rcx)
   05 | STle(t0) = t4
   06 | PUT(rip) = 0x0000556938bc2d57
   07 | ------ IMark(0x556938bc2d57, 3, 0) ------
   08 | t1 = GET:I64(rax)
   09 | t5 = GET:I64(r14)
   10 | STle(t1) = t5
   11 | PUT(rip) = 0x0000556938bc2d5a
   12 | ------ IMark(0x556938bc2d5a, 2, 0) ------
   13 | PUT(rip) = 0x0000556938bc2d9f
   14 | t6 = GET:I64(rip)
   NEXT: PUT(rip) = t6; Ijk_Boring
}
0x556938bc2d50:	mov	qword ptr [r15 + 0x8870], rcx
0x556938bc2d57:	mov	qword ptr [rax], r14
0x556938bc2d5a:	jmp	0x556938bc2d9f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1aa61867cb40
maximum memory range     [  0x1aa61867cb40  ,  0x1aa61867cb70  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0x100000000c00001ff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_1        0x1ff
0x8e0fc63a883f9267  OBJ_1        0x0
0x8e0fc63a88400bb7  OBJ_1        0x8ff
0x8ff               OBJ_1        0xfff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc00001ff
maximum memory range     [  0x100000000c00001ff  ,  0x100000000c00008ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                           offsets
-------------------------------------------------  -------------------
<BV64 mem_100000000c00001ff_65_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00001ff_66_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000040a_67_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000040a_68_16{UNINITIALIZED}>           0x20b
<BV64 mem_c000020f_103_64{UNINITIALIZED}>          0x10

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000aff
maximum memory range     [  0x100000000c00008ff  ,  0x100000000c0000fff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c0000aff_141_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0000aff_142_64{UNINITIALIZED}>           0x0
<BV32 mem_c0000b57_145_32{UNINITIALIZED}>           0x58

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0009a6f
maximum memory range     [  0x100000000c0000fff  ,  0x100000000c0009a7f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                   offsets
-----------------------------------------  ---------
<BV64 mem_c0009a6f_180_64{UNINITIALIZED}>  0x0
<BV64 mem_c0009a77_181_64{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                 points to
---------------------------------------------------------------------  -----------
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED} + 0xffffffffffffffff>  0xc00001ff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                            address
--------------------------------------------------  -------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_ymm0_49_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_50_64{UNINITIALIZED}>
<BV32 mem_556937131784_51_32{UNINITIALIZED}>        0x556937131784
<BV128 reg_ymm1_52_128{UNINITIALIZED}>
<BV32 mem_5569370cc0f0_53_32{UNINITIALIZED}>        0x5569370cc0f0
<BV32 mem_556937135c08_54_32{UNINITIALIZED}>        0x556937135c08
<BV96 reg_292_55_96{UNINITIALIZED}>
<BV32 mem_556936de5614_56_32{UNINITIALIZED}>        0x556936de5614
<BV32 mem_556937168cf0_57_32{UNINITIALIZED}>        0x556937168cf0
<BV32 mem_556937168cc0_58_32{UNINITIALIZED}>        0x556937168cc0
<BV32 mem_556937168ca8_59_32{UNINITIALIZED}>        0x556937168ca8
<BV32 mem_556937168c9c_60_32{UNINITIALIZED}>        0x556937168c9c
<BV32 mem_556937168c94_61_32{UNINITIALIZED}>        0x556937168c94
<BV16 mem_8b480000001aea0a_62_16{UNINITIALIZED}>    0x8b480000001aea0a
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED}>    0x8e0fc63b483f9467
<BV64 mem_8e0fc63b48400db7_104_64{UNINITIALIZED}>   0x8e0fc63b48400db7
<BV32 mem_100000000c0009a7f_143_32{UNINITIALIZED}>  0x100000000c0009a7f
<BV32 mem_c0009a7f_144_32{UNINITIALIZED}>           0xc0009a7f

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  93910411783504
Write  <BV64 0x8>  bytes to  <BV64 mem_c0000aff_142_64{UNINITIALIZED} + 0x8870>
with expression : <BV64 0x8 + mem_c0009a6f_180_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x5569388da700
0x5569388da700:	push	rbp
0x5569388da701:	mov	rbp, rsp
0x5569388da704:	push	r14
0x5569388da706:	push	rbx
0x5569388da707:	mov	r14, rdi
0x5569388da70a:	mov	rbx, qword ptr [rsi]
0x5569388da70d:	mov	rax, qword ptr [rbx - 1]
0x5569388da711:	movzx	eax, word ptr [rax + 0xb]
0x5569388da715:	mov	ecx, eax
0x5569388da717:	and	ecx, 0xffffff87
0x5569388da71a:	cmp	cx, 1
0x5569388da71e:	jne	0x5569388da788
----------------------------------------------------------------------------------------------------
At  0x556938d22320
0x556938d22320:	push	rbp
0x556938d22321:	mov	rbp, rsp
0x556938d22324:	push	r15
0x556938d22326:	push	r14
0x556938d22328:	push	r13
0x556938d2232a:	push	r12
0x556938d2232c:	push	rbx
0x556938d2232d:	sub	rsp, 0x28
0x556938d22331:	mov	r15, rdi
0x556938d22334:	xor	edx, edx
0x556938d22336:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938cedc10
0x556938cedc10:	push	rbp
0x556938cedc11:	mov	rbp, rsp
0x556938cedc14:	push	r15
0x556938cedc16:	push	r14
0x556938cedc18:	push	r12
0x556938cedc1a:	push	rbx
0x556938cedc1b:	sub	rsp, 0x50
0x556938cedc1f:	mov	r15, rsi
0x556938cedc22:	mov	r14, rdi
0x556938cedc25:	mov	rax, -0x80000
0x556938cedc2c:	and	rax, qword ptr [rdi]
0x556938cedc2f:	mov	r12, -0x7ad0
0x556938cedc36:	add	r12, qword ptr [rax + 0x48]
0x556938cedc3a:	mov	rax, qword ptr [rsi]
0x556938cedc3d:	mov	rcx, qword ptr [rax - 1]
0x556938cedc41:	movzx	edx, word ptr [rcx + 0xb]
0x556938cedc45:	mov	ecx, 3
0x556938cedc4a:	cmp	edx, 0x80
0x556938cedc50:	jne	0x556938cedc5e
----------------------------------------------------------------------------------------------------
At  0x556938ce9af0
0x556938ce9af0:	push	rbp
0x556938ce9af1:	mov	rbp, rsp
0x556938ce9af4:	push	r15
0x556938ce9af6:	push	r14
0x556938ce9af8:	push	r12
0x556938ce9afa:	push	rbx
0x556938ce9afb:	sub	rsp, 0x10
0x556938ce9aff:	mov	r14d, esi
0x556938ce9b02:	mov	r12, rdi
0x556938ce9b05:	mov	rax, -0x80000
0x556938ce9b0c:	and	rax, qword ptr [rdi]
0x556938ce9b0f:	mov	r15, qword ptr [rax + 0x48]
0x556938ce9b13:	lea	rsi, [r15 - 0x6b98]
0x556938ce9b1a:	call	0x556938cedc10
----------------------------------------------------------------------------------------------------
At  0x556938ce96c0
0x556938ce96c0:	push	rbp
0x556938ce96c1:	mov	rbp, rsp
0x556938ce96c4:	push	r15
0x556938ce96c6:	push	r14
0x556938ce96c8:	push	rbx
0x556938ce96c9:	push	rax
0x556938ce96ca:	mov	r15d, edx
0x556938ce96cd:	mov	rbx, rsi
0x556938ce96d0:	mov	r14, rdi
0x556938ce96d3:	nop	word ptr cs:[rax + rax]
0x556938ce96dd:	nop	dword ptr [rax]
0x556938ce96e0:	mov	rax, qword ptr [rbx]
0x556938ce96e3:	test	al, 1
0x556938ce96e5:	je	0x556938ce97df
----------------------------------------------------------------------------------------------------
At  0x556938ce9bd0
0x556938ce9bd0:	push	rbp
0x556938ce9bd1:	mov	rbp, rsp
0x556938ce9bd4:	push	r14
0x556938ce9bd6:	push	rbx
0x556938ce9bd7:	sub	rsp, 0x20
0x556938ce9bdb:	mov	r14, rdi
0x556938ce9bde:	xor	ebx, ebx
0x556938ce9be0:	xor	edx, edx
0x556938ce9be2:	call	0x556938ce96c0
----------------------------------------------------------------------------------------------------
At  0x556938947530
0x556938947530:	mov	rax, qword ptr [rip + 0x43e3401]
0x556938947537:	cmp	dword ptr [rax], 0
0x55693894753a:	jne	0x556938947544
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ff6c80
0x556938ff6c80:	test	dil, 1
0x556938ff6c84:	je	0x556938ff6cd1
----------------------------------------------------------------------------------------------------
At  0x55693908a3a0
0x55693908a3a0:	push	rbp
0x55693908a3a1:	mov	rbp, rsp
0x55693908a3a4:	push	0x18
0x55693908a3a6:	sub	rsp, 0x40
0x55693908a3aa:	mov	r8, rdx
0x55693908a3ad:	mov	rdx, rcx
0x55693908a3b0:	shr	rdx, 0x20
0x55693908a3b4:	mov	r9, rbx
0x55693908a3b7:	shr	r9, 0x20
0x55693908a3bb:	mov	qword ptr [rbp - 0x10], rax
0x55693908a3bf:	mov	qword ptr [rbp - 0x18], rbx
0x55693908a3c3:	mov	r11, r9
0x55693908a3c6:	imul	r11d, edx
0x55693908a3ca:	jo	0x55693908a8fe
----------------------------------------------------------------------------------------------------
At  0x55693908b2e0
0x55693908b2e0:	push	rbp
0x55693908b2e1:	mov	rbp, rsp
0x55693908b2e4:	push	0x18
0x55693908b2e6:	sub	rsp, 0x40
0x55693908b2ea:	mov	r8, qword ptr [rbx - 1]
0x55693908b2ee:	mov	qword ptr [rbp - 0x10], rsi
0x55693908b2f2:	mov	qword ptr [rbp - 0x20], rcx
0x55693908b2f6:	mov	qword ptr [rbp - 0x28], rdx
0x55693908b2fa:	mov	qword ptr [rbp - 0x30], rdi
0x55693908b2fe:	cmp	word ptr [r8 + 0xb], 0x452
0x55693908b305:	jne	0x55693908b4f1
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ffc300
0x556938ffc300:	mov	r10, qword ptr [r13 + 0x1208]
0x556938ffc307:	mov	r8, rsp
0x556938ffc30a:	sub	r8, r10
0x556938ffc30d:	sar	r8, 3
0x556938ffc311:	cmp	r8, rax
0x556938ffc314:	jle	0x556938ffc342
----------------------------------------------------------------------------------------------------
At  0x5569390d6f60
0x5569390d6f60:	mov	rax, rbp
0x5569390d6f63:	mov	rbx, qword ptr [rax - 0x10]
0x5569390d6f67:	mov	rbx, qword ptr [rbx + 0x27]
0x5569390d6f6b:	movzx	edx, byte ptr [r14 + r9 + 2]
0x5569390d6f71:	mov	rbx, qword ptr [rbx + 7]
0x5569390d6f75:	mov	rcx, qword ptr [rbx + rdx*8 + 0x27]
0x5569390d6f7a:	test	cl, 1
0x5569390d6f7d:	je	0x5569390d6fdc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x81)>
1  <Bool 0x7f <= mem_8b480000001aea0a_62_16{UNINITIALIZED}>
2  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x83)>
3  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x80)>
4  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x82)>
5  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x7f)>
6  <Bool mem_8e0fc63b483f9467_64_64{UNINITIALIZED} == 0xc0000200>
7  <Bool mem_c00001ff_66_64{UNINITIALIZED} == 0xc00003ff>
8  <Bool mem_c000040a_68_16{UNINITIALIZED}[15:6] == 0x1>
9  <Bool mem_c000040a_68_16{UNINITIALIZED}[2:0] == 5>
10  <Bool mem_8e0fc63b48400db7_104_64{UNINITIALIZED} == 0xc0000aff>
11  <Bool mem_c0000aff_142_64{UNINITIALIZED} == 0xc00011ff>
12  <Bool !(mem_c0009a7f_144_32{UNINITIALIZED} == mem_c0000b57_145_32{UNINITIALIZED})>
13  <Bool mem_c0009a6f_180_64{UNINITIALIZED} - mem_c0009a77_181_64{UNINITIALIZED} != 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0009a6f_180_64{UNINITIALIZED}>  r8: <BV64 0x23454e180659>
rbx: <BV64 0x7ffcbfa6e2a0>  r9: <BV64 0x3bd522c14c81>
rcx: <BV64 0x8 + mem_c0009a6f_180_64{UNINITIALIZED}>  r10: <BV64 0x1c7577e1e818>
rdx: <BV64 0x0>  r11: <BV64 0x155a400000000>
rsi: <BV64 mem_c000020f_103_64{UNINITIALIZED}>  r12: <BV64 0x8e0fc63b483f852f>
rdi: <BV64 mem_8e0fc63b48400db7_104_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffcbfa6e040>  r14: <BV64 mem_c000020f_103_64{UNINITIALIZED}>
rbp: <BV64 0x7ffcbfa6e060>  r15: <BV64 mem_c0000aff_142_64{UNINITIALIZED}>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64

   00 | ------ IMark(0x556938bc2d57, 3, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t1 = GET:I64(r14)
   03 | STle(t0) = t1
   04 | PUT(rip) = 0x0000556938bc2d5a
   05 | ------ IMark(0x556938bc2d5a, 2, 0) ------
   06 | PUT(rip) = 0x0000556938bc2d9f
   07 | t2 = GET:I64(rip)
   NEXT: PUT(rip) = t2; Ijk_Boring
}
0x556938bc2d57:	mov	qword ptr [rax], r14
0x556938bc2d5a:	jmp	0x556938bc2d9f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1aa61867cb40
maximum memory range     [  0x1aa61867cb40  ,  0x1aa61867cb70  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0x100000000c00001ff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_1        0x1ff
0x8e0fc63a883f9267  OBJ_1        0x0
0x8e0fc63a88400bb7  OBJ_1        0x8ff
0x8ff               OBJ_1        0xfff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc00001ff
maximum memory range     [  0x100000000c00001ff  ,  0x100000000c00008ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                           offsets
-------------------------------------------------  -------------------
<BV64 mem_100000000c00001ff_65_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00001ff_66_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000040a_67_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000040a_68_16{UNINITIALIZED}>           0x20b
<BV64 mem_c000020f_103_64{UNINITIALIZED}>          0x10

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000aff
maximum memory range     [  0x100000000c00008ff  ,  0x100000000c0000fff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c0000aff_141_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0000aff_142_64{UNINITIALIZED}>           0x0
<BV32 mem_c0000b57_145_32{UNINITIALIZED}>           0x58

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0009a6f
maximum memory range     [  0x100000000c0000fff  ,  0x100000000c0009a7f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                   offsets
-----------------------------------------  ---------
<BV64 mem_c0009a6f_180_64{UNINITIALIZED}>  0x0
<BV64 mem_c0009a77_181_64{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                 points to
---------------------------------------------------------------------  -----------
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED} + 0xffffffffffffffff>  0xc00001ff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                            address
--------------------------------------------------  -------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_ymm0_49_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_50_64{UNINITIALIZED}>
<BV32 mem_556937131784_51_32{UNINITIALIZED}>        0x556937131784
<BV128 reg_ymm1_52_128{UNINITIALIZED}>
<BV32 mem_5569370cc0f0_53_32{UNINITIALIZED}>        0x5569370cc0f0
<BV32 mem_556937135c08_54_32{UNINITIALIZED}>        0x556937135c08
<BV96 reg_292_55_96{UNINITIALIZED}>
<BV32 mem_556936de5614_56_32{UNINITIALIZED}>        0x556936de5614
<BV32 mem_556937168cf0_57_32{UNINITIALIZED}>        0x556937168cf0
<BV32 mem_556937168cc0_58_32{UNINITIALIZED}>        0x556937168cc0
<BV32 mem_556937168ca8_59_32{UNINITIALIZED}>        0x556937168ca8
<BV32 mem_556937168c9c_60_32{UNINITIALIZED}>        0x556937168c9c
<BV32 mem_556937168c94_61_32{UNINITIALIZED}>        0x556937168c94
<BV16 mem_8b480000001aea0a_62_16{UNINITIALIZED}>    0x8b480000001aea0a
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED}>    0x8e0fc63b483f9467
<BV64 mem_8e0fc63b48400db7_104_64{UNINITIALIZED}>   0x8e0fc63b48400db7
<BV32 mem_100000000c0009a7f_143_32{UNINITIALIZED}>  0x100000000c0009a7f
<BV32 mem_c0009a7f_144_32{UNINITIALIZED}>           0xc0009a7f

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  93910411783511
Write  <BV64 0x8>  bytes to  <BV64 mem_c0009a6f_180_64{UNINITIALIZED}>
with expression : <BV64 mem_c000020f_103_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x5569388da700
0x5569388da700:	push	rbp
0x5569388da701:	mov	rbp, rsp
0x5569388da704:	push	r14
0x5569388da706:	push	rbx
0x5569388da707:	mov	r14, rdi
0x5569388da70a:	mov	rbx, qword ptr [rsi]
0x5569388da70d:	mov	rax, qword ptr [rbx - 1]
0x5569388da711:	movzx	eax, word ptr [rax + 0xb]
0x5569388da715:	mov	ecx, eax
0x5569388da717:	and	ecx, 0xffffff87
0x5569388da71a:	cmp	cx, 1
0x5569388da71e:	jne	0x5569388da788
----------------------------------------------------------------------------------------------------
At  0x556938d22320
0x556938d22320:	push	rbp
0x556938d22321:	mov	rbp, rsp
0x556938d22324:	push	r15
0x556938d22326:	push	r14
0x556938d22328:	push	r13
0x556938d2232a:	push	r12
0x556938d2232c:	push	rbx
0x556938d2232d:	sub	rsp, 0x28
0x556938d22331:	mov	r15, rdi
0x556938d22334:	xor	edx, edx
0x556938d22336:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938cedc10
0x556938cedc10:	push	rbp
0x556938cedc11:	mov	rbp, rsp
0x556938cedc14:	push	r15
0x556938cedc16:	push	r14
0x556938cedc18:	push	r12
0x556938cedc1a:	push	rbx
0x556938cedc1b:	sub	rsp, 0x50
0x556938cedc1f:	mov	r15, rsi
0x556938cedc22:	mov	r14, rdi
0x556938cedc25:	mov	rax, -0x80000
0x556938cedc2c:	and	rax, qword ptr [rdi]
0x556938cedc2f:	mov	r12, -0x7ad0
0x556938cedc36:	add	r12, qword ptr [rax + 0x48]
0x556938cedc3a:	mov	rax, qword ptr [rsi]
0x556938cedc3d:	mov	rcx, qword ptr [rax - 1]
0x556938cedc41:	movzx	edx, word ptr [rcx + 0xb]
0x556938cedc45:	mov	ecx, 3
0x556938cedc4a:	cmp	edx, 0x80
0x556938cedc50:	jne	0x556938cedc5e
----------------------------------------------------------------------------------------------------
At  0x556938ce9af0
0x556938ce9af0:	push	rbp
0x556938ce9af1:	mov	rbp, rsp
0x556938ce9af4:	push	r15
0x556938ce9af6:	push	r14
0x556938ce9af8:	push	r12
0x556938ce9afa:	push	rbx
0x556938ce9afb:	sub	rsp, 0x10
0x556938ce9aff:	mov	r14d, esi
0x556938ce9b02:	mov	r12, rdi
0x556938ce9b05:	mov	rax, -0x80000
0x556938ce9b0c:	and	rax, qword ptr [rdi]
0x556938ce9b0f:	mov	r15, qword ptr [rax + 0x48]
0x556938ce9b13:	lea	rsi, [r15 - 0x6b98]
0x556938ce9b1a:	call	0x556938cedc10
----------------------------------------------------------------------------------------------------
At  0x556938ce96c0
0x556938ce96c0:	push	rbp
0x556938ce96c1:	mov	rbp, rsp
0x556938ce96c4:	push	r15
0x556938ce96c6:	push	r14
0x556938ce96c8:	push	rbx
0x556938ce96c9:	push	rax
0x556938ce96ca:	mov	r15d, edx
0x556938ce96cd:	mov	rbx, rsi
0x556938ce96d0:	mov	r14, rdi
0x556938ce96d3:	nop	word ptr cs:[rax + rax]
0x556938ce96dd:	nop	dword ptr [rax]
0x556938ce96e0:	mov	rax, qword ptr [rbx]
0x556938ce96e3:	test	al, 1
0x556938ce96e5:	je	0x556938ce97df
----------------------------------------------------------------------------------------------------
At  0x556938ce9bd0
0x556938ce9bd0:	push	rbp
0x556938ce9bd1:	mov	rbp, rsp
0x556938ce9bd4:	push	r14
0x556938ce9bd6:	push	rbx
0x556938ce9bd7:	sub	rsp, 0x20
0x556938ce9bdb:	mov	r14, rdi
0x556938ce9bde:	xor	ebx, ebx
0x556938ce9be0:	xor	edx, edx
0x556938ce9be2:	call	0x556938ce96c0
----------------------------------------------------------------------------------------------------
At  0x556938947530
0x556938947530:	mov	rax, qword ptr [rip + 0x43e3401]
0x556938947537:	cmp	dword ptr [rax], 0
0x55693894753a:	jne	0x556938947544
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ff6c80
0x556938ff6c80:	test	dil, 1
0x556938ff6c84:	je	0x556938ff6cd1
----------------------------------------------------------------------------------------------------
At  0x55693908a3a0
0x55693908a3a0:	push	rbp
0x55693908a3a1:	mov	rbp, rsp
0x55693908a3a4:	push	0x18
0x55693908a3a6:	sub	rsp, 0x40
0x55693908a3aa:	mov	r8, rdx
0x55693908a3ad:	mov	rdx, rcx
0x55693908a3b0:	shr	rdx, 0x20
0x55693908a3b4:	mov	r9, rbx
0x55693908a3b7:	shr	r9, 0x20
0x55693908a3bb:	mov	qword ptr [rbp - 0x10], rax
0x55693908a3bf:	mov	qword ptr [rbp - 0x18], rbx
0x55693908a3c3:	mov	r11, r9
0x55693908a3c6:	imul	r11d, edx
0x55693908a3ca:	jo	0x55693908a8fe
----------------------------------------------------------------------------------------------------
At  0x55693908b2e0
0x55693908b2e0:	push	rbp
0x55693908b2e1:	mov	rbp, rsp
0x55693908b2e4:	push	0x18
0x55693908b2e6:	sub	rsp, 0x40
0x55693908b2ea:	mov	r8, qword ptr [rbx - 1]
0x55693908b2ee:	mov	qword ptr [rbp - 0x10], rsi
0x55693908b2f2:	mov	qword ptr [rbp - 0x20], rcx
0x55693908b2f6:	mov	qword ptr [rbp - 0x28], rdx
0x55693908b2fa:	mov	qword ptr [rbp - 0x30], rdi
0x55693908b2fe:	cmp	word ptr [r8 + 0xb], 0x452
0x55693908b305:	jne	0x55693908b4f1
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ffc300
0x556938ffc300:	mov	r10, qword ptr [r13 + 0x1208]
0x556938ffc307:	mov	r8, rsp
0x556938ffc30a:	sub	r8, r10
0x556938ffc30d:	sar	r8, 3
0x556938ffc311:	cmp	r8, rax
0x556938ffc314:	jle	0x556938ffc342
----------------------------------------------------------------------------------------------------
At  0x5569390d6f60
0x5569390d6f60:	mov	rax, rbp
0x5569390d6f63:	mov	rbx, qword ptr [rax - 0x10]
0x5569390d6f67:	mov	rbx, qword ptr [rbx + 0x27]
0x5569390d6f6b:	movzx	edx, byte ptr [r14 + r9 + 2]
0x5569390d6f71:	mov	rbx, qword ptr [rbx + 7]
0x5569390d6f75:	mov	rcx, qword ptr [rbx + rdx*8 + 0x27]
0x5569390d6f7a:	test	cl, 1
0x5569390d6f7d:	je	0x5569390d6fdc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x81)>
1  <Bool 0x7f <= mem_8b480000001aea0a_62_16{UNINITIALIZED}>
2  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x83)>
3  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x80)>
4  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x82)>
5  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x7f)>
6  <Bool mem_8e0fc63b483f9467_64_64{UNINITIALIZED} == 0xc0000200>
7  <Bool mem_c00001ff_66_64{UNINITIALIZED} == 0xc00003ff>
8  <Bool mem_c000040a_68_16{UNINITIALIZED}[15:6] == 0x1>
9  <Bool mem_c000040a_68_16{UNINITIALIZED}[2:0] == 5>
10  <Bool mem_8e0fc63b48400db7_104_64{UNINITIALIZED} == 0xc0000aff>
11  <Bool mem_c0000aff_142_64{UNINITIALIZED} == 0xc00011ff>
12  <Bool !(mem_c0009a7f_144_32{UNINITIALIZED} == mem_c0000b57_145_32{UNINITIALIZED})>
13  <Bool !(mem_c0009a6f_180_64{UNINITIALIZED} == mem_c0009a77_181_64{UNINITIALIZED})>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c000ad3f_581_64{UNINITIALIZED}>  r8: <BV64 0x23454e180659>
rbx: <BV64 unconstrained_ret_ReturnUnconstrained_494_64{UNINITIALIZED}>  r9: <BV64 0x3bd522c14c81>
rcx: <BV64 0x0 .. mem_c000040a_68_16{UNINITIALIZED}[15:7] .. 0 .. mem_c000040a_68_16{UNINITIALIZED}[2:0]>  r10: <BV64 0x1c7577e1e818>
rdx: <BV64 0x0>  r11: <BV64 0x155a400000000>
rsi: <BV64 0x556936ed98d9>  r12: <BV64 0x8e0fc63b483f852f>
rdi: <BV64 0x556937067769>  r13: <BV64 0x28>
rsp: <BV64 0x7ffcbfa6dfc8>  r14: <BV64 0x556936ed98d9>
rbp: <BV64 0x7ffcbfa6dff0>  r15: <BV64 0x556937067769>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1aa61867cb40
maximum memory range     [  0x1aa61867cb40  ,  0x1aa61867cb70  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0x100000000c00001ff  ]
 
contains pointers:      
offset              points to    offset in target
------------------  -----------  ------------------
-0x1                OBJ_1        0x1ff
0x8e0fc63a883f9267  OBJ_1        0x0
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc00001ff
maximum memory range     [  0x100000000c00001ff  ,  0x100000000c00008ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                           offsets
-------------------------------------------------  -------------------
<BV64 mem_100000000c00001ff_65_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00001ff_66_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c000040a_67_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c000040a_68_16{UNINITIALIZED}>           0x20b
<BV64 mem_c000020f_103_64{UNINITIALIZED}>          0x10

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0x100000000c00008ff
maximum memory range     [  0x100000000c00008ff  ,  0x100000000c000ad3f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                       points to
---------------------------------------------------------------------------  -----------
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED} + 0xffffffffffffffff>        0xc00001ff
<BV64 unconstrained_ret_ReturnUnconstrained_494_64{UNINITIALIZED} + 0xa240>  0xc000ad3f
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                            address
------------------------------------------------------------------  -------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_ymm0_49_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_50_64{UNINITIALIZED}>
<BV32 mem_556937131784_51_32{UNINITIALIZED}>                        0x556937131784
<BV128 reg_ymm1_52_128{UNINITIALIZED}>
<BV32 mem_5569370cc0f0_53_32{UNINITIALIZED}>                        0x5569370cc0f0
<BV32 mem_556937135c08_54_32{UNINITIALIZED}>                        0x556937135c08
<BV96 reg_292_55_96{UNINITIALIZED}>
<BV32 mem_556936de5614_56_32{UNINITIALIZED}>                        0x556936de5614
<BV32 mem_556937168cf0_57_32{UNINITIALIZED}>                        0x556937168cf0
<BV32 mem_556937168cc0_58_32{UNINITIALIZED}>                        0x556937168cc0
<BV32 mem_556937168ca8_59_32{UNINITIALIZED}>                        0x556937168ca8
<BV32 mem_556937168c9c_60_32{UNINITIALIZED}>                        0x556937168c9c
<BV32 mem_556937168c94_61_32{UNINITIALIZED}>                        0x556937168c94
<BV16 mem_8b480000001aea0a_62_16{UNINITIALIZED}>                    0x8b480000001aea0a
<BV64 mem_8e0fc63b483f9467_64_64{UNINITIALIZED}>                    0x8e0fc63b483f9467
<BV64 mem_8e0fc63b48400db7_104_64{UNINITIALIZED}>                   0x8e0fc63b48400db7
<BV64 mem_8e0fc63b48400d9f_117_64{UNINITIALIZED}>                   0x8e0fc63b48400d9f
<BV64 mem_8e0fc63b48400da7_118_64{UNINITIALIZED}>                   0x8e0fc63b48400da7
<BV32 mem_8e0fc63b48400daf_178_32{UNINITIALIZED}>                   0x8e0fc63b48400daf
<BV32 mem_8e0fc63b48400db3_179_32{UNINITIALIZED}>                   0x8e0fc63b48400db3
<BV64 unconstrained_ret_ReturnUnconstrained_494_64{UNINITIALIZED}>
<BV64 mem_100000000c000ad3f_580_64{UNINITIALIZED}>                  0x100000000c000ad3f
<BV64 mem_c000ad3f_581_64{UNINITIALIZED}>                           0xc000ad3f

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  93910408697736
Calling  <BV64 mem_c000ad3f_581_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x5569388d1750
0x5569388d1750:	push	rbp
0x5569388d1751:	mov	rbp, rsp
0x5569388d1754:	push	r15
0x5569388d1756:	push	r14
0x5569388d1758:	push	rbx
0x5569388d1759:	push	rax
0x5569388d175a:	mov	r14, rsi
0x5569388d175d:	mov	r15, rdi
0x5569388d1760:	mov	rax, qword ptr [rip + 0x44591d9]
0x5569388d1767:	mov	edi, dword ptr [rax]
0x5569388d1769:	call	0x55693b0a7710
----------------------------------------------------------------------------------------------------
At  0x556938bc2920
0x556938bc2920:	push	rbp
0x556938bc2921:	mov	rbp, rsp
0x556938bc2924:	push	r15
0x556938bc2926:	push	r14
0x556938bc2928:	push	r13
0x556938bc292a:	push	r12
0x556938bc292c:	push	rbx
0x556938bc292d:	sub	rsp, 0x18
0x556938bc2931:	mov	eax, dword ptr [rdi + 0x8880]
0x556938bc2937:	cmp	eax, dword ptr [rdi + 0x8884]
0x556938bc293d:	jne	0x556938bc295a
----------------------------------------------------------------------------------------------------
At  0x5569388da700
0x5569388da700:	push	rbp
0x5569388da701:	mov	rbp, rsp
0x5569388da704:	push	r14
0x5569388da706:	push	rbx
0x5569388da707:	mov	r14, rdi
0x5569388da70a:	mov	rbx, qword ptr [rsi]
0x5569388da70d:	mov	rax, qword ptr [rbx - 1]
0x5569388da711:	movzx	eax, word ptr [rax + 0xb]
0x5569388da715:	mov	ecx, eax
0x5569388da717:	and	ecx, 0xffffff87
0x5569388da71a:	cmp	cx, 1
0x5569388da71e:	jne	0x5569388da788
----------------------------------------------------------------------------------------------------
At  0x556938d22320
0x556938d22320:	push	rbp
0x556938d22321:	mov	rbp, rsp
0x556938d22324:	push	r15
0x556938d22326:	push	r14
0x556938d22328:	push	r13
0x556938d2232a:	push	r12
0x556938d2232c:	push	rbx
0x556938d2232d:	sub	rsp, 0x28
0x556938d22331:	mov	r15, rdi
0x556938d22334:	xor	edx, edx
0x556938d22336:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938cedc10
0x556938cedc10:	push	rbp
0x556938cedc11:	mov	rbp, rsp
0x556938cedc14:	push	r15
0x556938cedc16:	push	r14
0x556938cedc18:	push	r12
0x556938cedc1a:	push	rbx
0x556938cedc1b:	sub	rsp, 0x50
0x556938cedc1f:	mov	r15, rsi
0x556938cedc22:	mov	r14, rdi
0x556938cedc25:	mov	rax, -0x80000
0x556938cedc2c:	and	rax, qword ptr [rdi]
0x556938cedc2f:	mov	r12, -0x7ad0
0x556938cedc36:	add	r12, qword ptr [rax + 0x48]
0x556938cedc3a:	mov	rax, qword ptr [rsi]
0x556938cedc3d:	mov	rcx, qword ptr [rax - 1]
0x556938cedc41:	movzx	edx, word ptr [rcx + 0xb]
0x556938cedc45:	mov	ecx, 3
0x556938cedc4a:	cmp	edx, 0x80
0x556938cedc50:	jne	0x556938cedc5e
----------------------------------------------------------------------------------------------------
At  0x556938ce9af0
0x556938ce9af0:	push	rbp
0x556938ce9af1:	mov	rbp, rsp
0x556938ce9af4:	push	r15
0x556938ce9af6:	push	r14
0x556938ce9af8:	push	r12
0x556938ce9afa:	push	rbx
0x556938ce9afb:	sub	rsp, 0x10
0x556938ce9aff:	mov	r14d, esi
0x556938ce9b02:	mov	r12, rdi
0x556938ce9b05:	mov	rax, -0x80000
0x556938ce9b0c:	and	rax, qword ptr [rdi]
0x556938ce9b0f:	mov	r15, qword ptr [rax + 0x48]
0x556938ce9b13:	lea	rsi, [r15 - 0x6b98]
0x556938ce9b1a:	call	0x556938cedc10
----------------------------------------------------------------------------------------------------
At  0x556938ce96c0
0x556938ce96c0:	push	rbp
0x556938ce96c1:	mov	rbp, rsp
0x556938ce96c4:	push	r15
0x556938ce96c6:	push	r14
0x556938ce96c8:	push	rbx
0x556938ce96c9:	push	rax
0x556938ce96ca:	mov	r15d, edx
0x556938ce96cd:	mov	rbx, rsi
0x556938ce96d0:	mov	r14, rdi
0x556938ce96d3:	nop	word ptr cs:[rax + rax]
0x556938ce96dd:	nop	dword ptr [rax]
0x556938ce96e0:	mov	rax, qword ptr [rbx]
0x556938ce96e3:	test	al, 1
0x556938ce96e5:	je	0x556938ce97df
----------------------------------------------------------------------------------------------------
At  0x556938ce9bd0
0x556938ce9bd0:	push	rbp
0x556938ce9bd1:	mov	rbp, rsp
0x556938ce9bd4:	push	r14
0x556938ce9bd6:	push	rbx
0x556938ce9bd7:	sub	rsp, 0x20
0x556938ce9bdb:	mov	r14, rdi
0x556938ce9bde:	xor	ebx, ebx
0x556938ce9be0:	xor	edx, edx
0x556938ce9be2:	call	0x556938ce96c0
----------------------------------------------------------------------------------------------------
At  0x556938947530
0x556938947530:	mov	rax, qword ptr [rip + 0x43e3401]
0x556938947537:	cmp	dword ptr [rax], 0
0x55693894753a:	jne	0x556938947544
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ff6c80
0x556938ff6c80:	test	dil, 1
0x556938ff6c84:	je	0x556938ff6cd1
----------------------------------------------------------------------------------------------------
At  0x55693908a3a0
0x55693908a3a0:	push	rbp
0x55693908a3a1:	mov	rbp, rsp
0x55693908a3a4:	push	0x18
0x55693908a3a6:	sub	rsp, 0x40
0x55693908a3aa:	mov	r8, rdx
0x55693908a3ad:	mov	rdx, rcx
0x55693908a3b0:	shr	rdx, 0x20
0x55693908a3b4:	mov	r9, rbx
0x55693908a3b7:	shr	r9, 0x20
0x55693908a3bb:	mov	qword ptr [rbp - 0x10], rax
0x55693908a3bf:	mov	qword ptr [rbp - 0x18], rbx
0x55693908a3c3:	mov	r11, r9
0x55693908a3c6:	imul	r11d, edx
0x55693908a3ca:	jo	0x55693908a8fe
----------------------------------------------------------------------------------------------------
At  0x55693908b2e0
0x55693908b2e0:	push	rbp
0x55693908b2e1:	mov	rbp, rsp
0x55693908b2e4:	push	0x18
0x55693908b2e6:	sub	rsp, 0x40
0x55693908b2ea:	mov	r8, qword ptr [rbx - 1]
0x55693908b2ee:	mov	qword ptr [rbp - 0x10], rsi
0x55693908b2f2:	mov	qword ptr [rbp - 0x20], rcx
0x55693908b2f6:	mov	qword ptr [rbp - 0x28], rdx
0x55693908b2fa:	mov	qword ptr [rbp - 0x30], rdi
0x55693908b2fe:	cmp	word ptr [r8 + 0xb], 0x452
0x55693908b305:	jne	0x55693908b4f1
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ffc300
0x556938ffc300:	mov	r10, qword ptr [r13 + 0x1208]
0x556938ffc307:	mov	r8, rsp
0x556938ffc30a:	sub	r8, r10
0x556938ffc30d:	sar	r8, 3
0x556938ffc311:	cmp	r8, rax
0x556938ffc314:	jle	0x556938ffc342
----------------------------------------------------------------------------------------------------
At  0x5569390d6f60
0x5569390d6f60:	mov	rax, rbp
0x5569390d6f63:	mov	rbx, qword ptr [rax - 0x10]
0x5569390d6f67:	mov	rbx, qword ptr [rbx + 0x27]
0x5569390d6f6b:	movzx	edx, byte ptr [r14 + r9 + 2]
0x5569390d6f71:	mov	rbx, qword ptr [rbx + 7]
0x5569390d6f75:	mov	rcx, qword ptr [rbx + rdx*8 + 0x27]
0x5569390d6f7a:	test	cl, 1
0x5569390d6f7d:	je	0x5569390d6fdc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x81)>
1  <Bool 0x7f <= mem_8b480000001aea0a_62_16{UNINITIALIZED}>
2  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x83)>
3  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x80)>
4  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x82)>
5  <Bool !(mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x7f)>
6  <Bool mem_8e0fc63b483f9467_64_64{UNINITIALIZED} == 0xc0000200>
7  <Bool mem_c00001ff_66_64{UNINITIALIZED} == 0xc00003ff>
8  <Bool mem_c000040a_68_16{UNINITIALIZED}[15:6] == 0x1>
9  <Bool mem_c000040a_68_16{UNINITIALIZED}[2:0] == 5>
10  <Bool mem_8e0fc63b48400db7_104_64{UNINITIALIZED} == 0x0>
11  <Bool mem_8e0fc63b48400d9f_117_64{UNINITIALIZED} == mem_8e0fc63b48400da7_118_64{UNINITIALIZED}>
12  <Bool mem_8e0fc63b48400daf_178_32{UNINITIALIZED} == mem_8e0fc63b48400db3_179_32{UNINITIALIZED}>
13  <Bool unconstrained_ret_ReturnUnconstrained_494_64{UNINITIALIZED} == 0xc0000aff>
14  <Bool !(mem_c000ad3f_581_64{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x5569371393cc>  r8: <BV64 0x23454e180659>
rbx: <BV64 0x0>  r9: <BV64 0x3bd522c14c81>
rcx: <BV64 0x5569371393cc + (symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[31:24])>  r10: <BV64 0x1c7577e1e818>
rdx: <BV64 0x0>  r11: <BV64 0x155a400000000>
rsi: <BV64 0x1b8e075ff50d845>  r12: <BV64 0x0>
rdi: <BV64 0x7ffcbfa6e128>  r13: <BV64 0x28>
rsp: <BV64 0x7ffcbfa6e0f0>  r14: <BV64 0x7ffcbfa6e128>
rbp: <BV64 0x7ffcbfa6e110>  r15: <BV64 0x0 .. mem_1b8e075ff50d850_83_32{UNINITIALIZED}>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1aa61867cb40
maximum memory range     [  0x1aa61867cb40  ,  0x1aa61867cb70  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000000
maximum memory range     [  0xc0000000  ,  0x100000000bfff8c60  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xbfff8c60
maximum memory range     [  0x100000000bfff8c60  ,  0x100000000bfff9360  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                           offsets
-------------------------------------------------  -------------------
<BV64 mem_100000000bfff8c60_89_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_bfff8c60_90_64{UNINITIALIZED}>           0x0
<BV64 mem_100000000bfff8e6f_91_64{UNINITIALIZED}>  0x1000000000000020f
<BV64 mem_bfff8e6f_92_64{UNINITIALIZED}>           0x20f

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xbfff956b
maximum memory range     [  0x100000000bfff9360  ,  0x100000000bfff9a60  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV16 mem_100000000bfff956b_158_16{UNINITIALIZED}>  0x10000000000000000
<BV16 mem_bfff956b_159_16{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0x556936de5614
maximum memory range     [  0x100000000bfff9a60  ,  0x100005569f713302c  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                      offsets
--------------------------------------------  ---------
<BV32 mem_556937131784_51_32{UNINITIALIZED}>  0x34c170
<BV32 mem_5569370cc0f0_53_32{UNINITIALIZED}>  0x2e6adc
<BV32 mem_556937135c08_54_32{UNINITIALIZED}>  0x3505f4
<BV32 mem_556936de5614_56_32{UNINITIALIZED}>  0x0
<BV32 mem_556937168cf0_57_32{UNINITIALIZED}>  0x3836dc
<BV32 mem_556937168cc0_58_32{UNINITIALIZED}>  0x3836ac
<BV32 mem_556937168ca8_59_32{UNINITIALIZED}>  0x383694
<BV32 mem_556937168c9c_60_32{UNINITIALIZED}>  0x383688
<BV32 mem_556937168c94_61_32{UNINITIALIZED}>  0x383680

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address            points to
-----------------  -----------
0xbfff8c60         0xbfff8e60
0x1b8e075ff50d844  0xbfff9560
--------------------------------------------------
symbol                                                                points to
--------------------------------------------------------------------  -----------
<BV64 mem_1b8e075ff500048_88_64{UNINITIALIZED} + 0xffffffffffff8a60>  0xbfff8c60
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                  address
--------------------------------------------------------  -------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_ymm0_49_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_50_64{UNINITIALIZED}>
<BV128 reg_ymm1_52_128{UNINITIALIZED}>
<BV96 reg_292_55_96{UNINITIALIZED}>
<BV16 mem_8b480000001aea0a_62_16{UNINITIALIZED}>          0x8b480000001aea0a
<BV32 mem_1b8e075ff50d84c_77_32{UNINITIALIZED}>           0x1b8e075ff50d84c
<BV32 mem_1b8e075ff50d850_83_32{UNINITIALIZED}>           0x1b8e075ff50d850
<BV64 mem_1b8e075ff500048_88_64{UNINITIALIZED}>           0x1b8e075ff500048
<BV64 mem_1b8e075ff50d844_157_64{UNINITIALIZED}>          0x1b8e075ff50d844
<BV32 mem_100005569f713302c_195_32{UNINITIALIZED}>        0x100005569f713302c
<BV32 symbolic_read_unconstrained_196_32{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are jumping to a controlled address
It happens at:  93910413178703
Jumping to  <BV64 0x5569371393cc + (symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_196_32{UNINITIALIZED}[31:24])>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x556938d17710
0x556938d17710:	push	rbp
0x556938d17711:	mov	rbp, rsp
0x556938d17714:	push	r15
0x556938d17716:	push	r14
0x556938d17718:	push	r12
0x556938d1771a:	push	rbx
0x556938d1771b:	mov	r12d, edx
0x556938d1771e:	mov	r14, rdi
0x556938d17721:	mov	r15d, dword ptr [rsi + 0xb]
0x556938d17725:	lea	rax, [rip - 0x1bde360]
0x556938d1772c:	mov	ebx, edx
0x556938d1772e:	jmp	0x556938d17734
----------------------------------------------------------------------------------------------------
At  0x556938d16820
0x556938d16820:	push	rbp
0x556938d16821:	mov	rbp, rsp
0x556938d16824:	push	rbx
0x556938d16825:	sub	rsp, 0x18
0x556938d16829:	mov	eax, dword ptr [rdi + 0xb]
0x556938d1682c:	mov	dword ptr [rbp - 0x18], eax
0x556938d1682f:	mov	dword ptr [rbp - 0x14], esi
0x556938d16832:	mov	dword ptr [rbp - 0x10], 0
0x556938d16839:	lea	edx, [rax - 1]
0x556938d1683c:	cmp	edx, 0xa
0x556938d1683f:	setb	byte ptr [rbp - 0xc]
0x556938d16843:	mov	ebx, 2
0x556938d16848:	cmp	eax, 0x3fff
0x556938d1684d:	jg	0x556938d168b3
----------------------------------------------------------------------------------------------------
At  0x556938ce97f0
0x556938ce97f0:	push	rbp
0x556938ce97f1:	mov	rbp, rsp
0x556938ce97f4:	push	r15
0x556938ce97f6:	push	r14
0x556938ce97f8:	push	r12
0x556938ce97fa:	push	rbx
0x556938ce97fb:	sub	rsp, 0x10
0x556938ce97ff:	mov	r15, rdi
0x556938ce9802:	xor	edx, edx
0x556938ce9804:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938ce96c0
0x556938ce96c0:	push	rbp
0x556938ce96c1:	mov	rbp, rsp
0x556938ce96c4:	push	r15
0x556938ce96c6:	push	r14
0x556938ce96c8:	push	rbx
0x556938ce96c9:	push	rax
0x556938ce96ca:	mov	r15d, edx
0x556938ce96cd:	mov	rbx, rsi
0x556938ce96d0:	mov	r14, rdi
0x556938ce96d3:	nop	word ptr cs:[rax + rax]
0x556938ce96dd:	nop	dword ptr [rax]
0x556938ce96e0:	mov	rax, qword ptr [rbx]
0x556938ce96e3:	test	al, 1
0x556938ce96e5:	je	0x556938ce97df
----------------------------------------------------------------------------------------------------
At  0x556938ce9bd0
0x556938ce9bd0:	push	rbp
0x556938ce9bd1:	mov	rbp, rsp
0x556938ce9bd4:	push	r14
0x556938ce9bd6:	push	rbx
0x556938ce9bd7:	sub	rsp, 0x20
0x556938ce9bdb:	mov	r14, rdi
0x556938ce9bde:	xor	ebx, ebx
0x556938ce9be0:	xor	edx, edx
0x556938ce9be2:	call	0x556938ce96c0
----------------------------------------------------------------------------------------------------
At  0x556938947530
0x556938947530:	mov	rax, qword ptr [rip + 0x43e3401]
0x556938947537:	cmp	dword ptr [rax], 0
0x55693894753a:	jne	0x556938947544
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ff6c80
0x556938ff6c80:	test	dil, 1
0x556938ff6c84:	je	0x556938ff6cd1
----------------------------------------------------------------------------------------------------
At  0x55693908a3a0
0x55693908a3a0:	push	rbp
0x55693908a3a1:	mov	rbp, rsp
0x55693908a3a4:	push	0x18
0x55693908a3a6:	sub	rsp, 0x40
0x55693908a3aa:	mov	r8, rdx
0x55693908a3ad:	mov	rdx, rcx
0x55693908a3b0:	shr	rdx, 0x20
0x55693908a3b4:	mov	r9, rbx
0x55693908a3b7:	shr	r9, 0x20
0x55693908a3bb:	mov	qword ptr [rbp - 0x10], rax
0x55693908a3bf:	mov	qword ptr [rbp - 0x18], rbx
0x55693908a3c3:	mov	r11, r9
0x55693908a3c6:	imul	r11d, edx
0x55693908a3ca:	jo	0x55693908a8fe
----------------------------------------------------------------------------------------------------
At  0x55693908b2e0
0x55693908b2e0:	push	rbp
0x55693908b2e1:	mov	rbp, rsp
0x55693908b2e4:	push	0x18
0x55693908b2e6:	sub	rsp, 0x40
0x55693908b2ea:	mov	r8, qword ptr [rbx - 1]
0x55693908b2ee:	mov	qword ptr [rbp - 0x10], rsi
0x55693908b2f2:	mov	qword ptr [rbp - 0x20], rcx
0x55693908b2f6:	mov	qword ptr [rbp - 0x28], rdx
0x55693908b2fa:	mov	qword ptr [rbp - 0x30], rdi
0x55693908b2fe:	cmp	word ptr [r8 + 0xb], 0x452
0x55693908b305:	jne	0x55693908b4f1
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ffc300
0x556938ffc300:	mov	r10, qword ptr [r13 + 0x1208]
0x556938ffc307:	mov	r8, rsp
0x556938ffc30a:	sub	r8, r10
0x556938ffc30d:	sar	r8, 3
0x556938ffc311:	cmp	r8, rax
0x556938ffc314:	jle	0x556938ffc342
----------------------------------------------------------------------------------------------------
At  0x5569390d6f60
0x5569390d6f60:	mov	rax, rbp
0x5569390d6f63:	mov	rbx, qword ptr [rax - 0x10]
0x5569390d6f67:	mov	rbx, qword ptr [rbx + 0x27]
0x5569390d6f6b:	movzx	edx, byte ptr [r14 + r9 + 2]
0x5569390d6f71:	mov	rbx, qword ptr [rbx + 7]
0x5569390d6f75:	mov	rcx, qword ptr [rbx + rdx*8 + 0x27]
0x5569390d6f7a:	test	cl, 1
0x5569390d6f7d:	je	0x5569390d6fdc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool mem_8b480000001aea0a_62_16{UNINITIALIZED}[2:0] == 5>
1  <Bool mem_8b480000001aea0a_62_16{UNINITIALIZED}[15:7] == 0>
2  <Bool !(mem_1b8e075ff50d84c_77_32{UNINITIALIZED}[0:0] == 0)>
3  <Bool mem_1b8e075ff50d850_83_32{UNINITIALIZED} == 0x7 || !(!(0xfffffff9 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 0 || !(!(0xfffffff9 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xfffffff9 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1)))) || !(!(0xfffffff9 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1) || (mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 0 || !(!(0xfffffff9 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xfffffff9 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1)))))>
4  <Bool mem_1b8e075ff50d850_83_32{UNINITIALIZED} == 0x3fff || !(!(!(0xffffc001 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1) || (mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 0 || !(!(0xffffc001 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xffffc001 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1)))) || !(0xffffc001 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 0 || !(!(0xffffc001 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1 || !(mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1)) || !(!(0xffffc001 + mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1) || mem_1b8e075ff50d850_83_32{UNINITIALIZED}[31:31] == 1)))))>
5  <Bool mem_1b8e075ff500048_88_64{UNINITIALIZED} == 0xc0000200>
6  <Bool mem_bfff8c60_90_64{UNINITIALIZED} == 0xbfff8e60>
7  <Bool mem_1b8e075ff50d844_157_64{UNINITIALIZED} == 0xbfff9560>
8  <Bool False>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c00011ff_338_64{UNINITIALIZED}>  r8: <BV64 0x23454e180659>
rbx: <BV64 0x8b495f78>  r9: <BV64 0x3bd522c14c81>
rcx: <BV64 0x0 .. mem_c0000b0a_203_16{UNINITIALIZED}>  r10: <BV64 0x1c7577e1e818>
rdx: <BV64 0x0 .. mem_c000020b_161_16{UNINITIALIZED}[2:0]>  r11: <BV64 0x155a400000000>
rsi: <BV64 0x7ffcbfa6e2a0>  r12: <BV64 0x7ffcbfa6e2a0>
rdi: <BV64 mem_c000090f_336_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffcbfa6e0f8>  r14: <BV64 0xfffffffffff6b66c>
rbp: <BV64 0x7ffcbfa6e110>  r15: <BV64 0x1c7577e16000>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1aa61867cb40
maximum memory range     [  0x1aa61867cb40  ,  0x1aa61867cb70  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                   offsets
-----------------------------------------  ---------
<BV16 mem_c000020b_161_16{UNINITIALIZED}>  0xb

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0x100000000c00008ff  ]
 
contains pointers:      
offset             points to    offset in target
-----------------  -----------  ------------------
0x1b8e0753f50cf44  OBJ_1        0x0
-0x1               OBJ_2        0x1ff
0x1b8e0753f50cf54  OBJ_2        0x0
0xf                OBJ_2        0x8ff
0x8ff              OBJ_2        0xfff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc00008ff
maximum memory range     [  0x100000000c00008ff  ,  0x100000000c0000fff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c00008ff_200_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00008ff_201_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c0000b0a_202_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c0000b0a_203_16{UNINITIALIZED}>           0x20b
<BV64 mem_c000090f_336_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc00011ff
maximum memory range     [  0x100000000c0000fff  ,  0x100000000c00016ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c00011ff_337_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00011ff_338_64{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001937
maximum memory range     [  0x100000000c00016ff  ,  0x100000000c0001dff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c0001937_339_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0001937_340_64{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                 points to
---------------------------------------------------------------------  -----------
<BV64 mem_1b8e075ff50d854_199_64{UNINITIALIZED} + 0xffffffffffffffff>  0xc00008ff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                          address
------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_ymm0_49_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_50_64{UNINITIALIZED}>
<BV32 mem_556937131784_51_32{UNINITIALIZED}>      0x556937131784
<BV128 reg_ymm1_52_128{UNINITIALIZED}>
<BV32 mem_5569370cc0f0_53_32{UNINITIALIZED}>      0x5569370cc0f0
<BV32 mem_556937135c08_54_32{UNINITIALIZED}>      0x556937135c08
<BV96 reg_292_55_96{UNINITIALIZED}>
<BV32 mem_556936de5614_56_32{UNINITIALIZED}>      0x556936de5614
<BV32 mem_556937168cf0_57_32{UNINITIALIZED}>      0x556937168cf0
<BV32 mem_556937168cc0_58_32{UNINITIALIZED}>      0x556937168cc0
<BV32 mem_556937168ca8_59_32{UNINITIALIZED}>      0x556937168ca8
<BV32 mem_556937168c9c_60_32{UNINITIALIZED}>      0x556937168c9c
<BV32 mem_556937168c94_61_32{UNINITIALIZED}>      0x556937168c94
<BV16 mem_8b480000001aea0a_62_16{UNINITIALIZED}>  0x8b480000001aea0a
<BV64 mem_1b8e075ff50d844_160_64{UNINITIALIZED}>  0x1b8e075ff50d844
<BV64 mem_1b8e075ff50d854_199_64{UNINITIALIZED}>  0x1b8e075ff50d854

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  93910413160370
Calling  <BV64 mem_c0001937_340_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x556938d12f40
0x556938d12f40:	push	rbp
0x556938d12f41:	mov	rbp, rsp
0x556938d12f44:	push	r14
0x556938d12f46:	push	rbx
0x556938d12f47:	mov	rax, qword ptr [rdi]
0x556938d12f4a:	mov	ebx, dword ptr [rax + 0xb]
0x556938d12f4d:	mov	rcx, qword ptr [rax - 1]
0x556938d12f51:	movzx	ecx, word ptr [rcx + 0xb]
0x556938d12f55:	mov	edx, ecx
0x556938d12f57:	and	edx, 7
0x556938d12f5a:	cmp	edx, 3
0x556938d12f5d:	je	0x556938d12ff1
----------------------------------------------------------------------------------------------------
At  0x556938b41480
0x556938b41480:	push	rbp
0x556938b41481:	mov	rbp, rsp
0x556938b41484:	push	rbx
0x556938b41485:	sub	rsp, 0x18
0x556938b41489:	movsd	qword ptr [rbp - 0x10], xmm0
0x556938b4148e:	mov	ebx, edx
0x556938b41490:	xor	edx, edx
0x556938b41492:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938ce97f0
0x556938ce97f0:	push	rbp
0x556938ce97f1:	mov	rbp, rsp
0x556938ce97f4:	push	r15
0x556938ce97f6:	push	r14
0x556938ce97f8:	push	r12
0x556938ce97fa:	push	rbx
0x556938ce97fb:	sub	rsp, 0x10
0x556938ce97ff:	mov	r15, rdi
0x556938ce9802:	xor	edx, edx
0x556938ce9804:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938ce96c0
0x556938ce96c0:	push	rbp
0x556938ce96c1:	mov	rbp, rsp
0x556938ce96c4:	push	r15
0x556938ce96c6:	push	r14
0x556938ce96c8:	push	rbx
0x556938ce96c9:	push	rax
0x556938ce96ca:	mov	r15d, edx
0x556938ce96cd:	mov	rbx, rsi
0x556938ce96d0:	mov	r14, rdi
0x556938ce96d3:	nop	word ptr cs:[rax + rax]
0x556938ce96dd:	nop	dword ptr [rax]
0x556938ce96e0:	mov	rax, qword ptr [rbx]
0x556938ce96e3:	test	al, 1
0x556938ce96e5:	je	0x556938ce97df
----------------------------------------------------------------------------------------------------
At  0x556938ce9bd0
0x556938ce9bd0:	push	rbp
0x556938ce9bd1:	mov	rbp, rsp
0x556938ce9bd4:	push	r14
0x556938ce9bd6:	push	rbx
0x556938ce9bd7:	sub	rsp, 0x20
0x556938ce9bdb:	mov	r14, rdi
0x556938ce9bde:	xor	ebx, ebx
0x556938ce9be0:	xor	edx, edx
0x556938ce9be2:	call	0x556938ce96c0
----------------------------------------------------------------------------------------------------
At  0x556938947530
0x556938947530:	mov	rax, qword ptr [rip + 0x43e3401]
0x556938947537:	cmp	dword ptr [rax], 0
0x55693894753a:	jne	0x556938947544
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ff6c80
0x556938ff6c80:	test	dil, 1
0x556938ff6c84:	je	0x556938ff6cd1
----------------------------------------------------------------------------------------------------
At  0x55693908a3a0
0x55693908a3a0:	push	rbp
0x55693908a3a1:	mov	rbp, rsp
0x55693908a3a4:	push	0x18
0x55693908a3a6:	sub	rsp, 0x40
0x55693908a3aa:	mov	r8, rdx
0x55693908a3ad:	mov	rdx, rcx
0x55693908a3b0:	shr	rdx, 0x20
0x55693908a3b4:	mov	r9, rbx
0x55693908a3b7:	shr	r9, 0x20
0x55693908a3bb:	mov	qword ptr [rbp - 0x10], rax
0x55693908a3bf:	mov	qword ptr [rbp - 0x18], rbx
0x55693908a3c3:	mov	r11, r9
0x55693908a3c6:	imul	r11d, edx
0x55693908a3ca:	jo	0x55693908a8fe
----------------------------------------------------------------------------------------------------
At  0x55693908b2e0
0x55693908b2e0:	push	rbp
0x55693908b2e1:	mov	rbp, rsp
0x55693908b2e4:	push	0x18
0x55693908b2e6:	sub	rsp, 0x40
0x55693908b2ea:	mov	r8, qword ptr [rbx - 1]
0x55693908b2ee:	mov	qword ptr [rbp - 0x10], rsi
0x55693908b2f2:	mov	qword ptr [rbp - 0x20], rcx
0x55693908b2f6:	mov	qword ptr [rbp - 0x28], rdx
0x55693908b2fa:	mov	qword ptr [rbp - 0x30], rdi
0x55693908b2fe:	cmp	word ptr [r8 + 0xb], 0x452
0x55693908b305:	jne	0x55693908b4f1
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ffc300
0x556938ffc300:	mov	r10, qword ptr [r13 + 0x1208]
0x556938ffc307:	mov	r8, rsp
0x556938ffc30a:	sub	r8, r10
0x556938ffc30d:	sar	r8, 3
0x556938ffc311:	cmp	r8, rax
0x556938ffc314:	jle	0x556938ffc342
----------------------------------------------------------------------------------------------------
At  0x5569390d6f60
0x5569390d6f60:	mov	rax, rbp
0x5569390d6f63:	mov	rbx, qword ptr [rax - 0x10]
0x5569390d6f67:	mov	rbx, qword ptr [rbx + 0x27]
0x5569390d6f6b:	movzx	edx, byte ptr [r14 + r9 + 2]
0x5569390d6f71:	mov	rbx, qword ptr [rbx + 7]
0x5569390d6f75:	mov	rcx, qword ptr [rbx + rdx*8 + 0x27]
0x5569390d6f7a:	test	cl, 1
0x5569390d6f7d:	je	0x5569390d6fdc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(0x7f <= mem_8b480000001aea0a_62_16{UNINITIALIZED}) || mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x7f>
1  <Bool mem_8b480000001aea0a_62_16{UNINITIALIZED}[2:0] == 3>
2  <Bool mem_1b8e075ff50d844_160_64{UNINITIALIZED} == 0xc0000200>
3  <Bool mem_c000020b_161_16{UNINITIALIZED}[2:0] == 5>
4  <Bool mem_1b8e075ff50d854_199_64{UNINITIALIZED} == 0xc0000900>
5  <Bool mem_c00008ff_201_64{UNINITIALIZED} == 0xc0000aff>
6  <Bool mem_c0000b0a_203_16{UNINITIALIZED}[3:3] == 0>
7  <Bool !(mem_c0000b0a_203_16{UNINITIALIZED}[2:0] == 0)>
8  <Bool mem_c000090f_336_64{UNINITIALIZED} == 0xc00011ff>
9  <Bool mem_c00011ff_338_64{UNINITIALIZED} == 0xc00018ff>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c00011ff_343_64{UNINITIALIZED}>  r8: <BV64 0x23454e180659>
rbx: <BV64 0x8b495f78>  r9: <BV64 0x3bd522c14c81>
rcx: <BV64 0x0 .. mem_c0000b0a_203_16{UNINITIALIZED}>  r10: <BV64 0x1c7577e1e818>
rdx: <BV64 0x0 .. mem_c000020b_161_16{UNINITIALIZED}[2:0]>  r11: <BV64 0x155a400000000>
rsi: <BV64 0x7ffcbfa6e2a0>  r12: <BV64 0x7ffcbfa6e2a0>
rdi: <BV64 mem_c000090f_341_64{UNINITIALIZED}>  r13: <BV64 0x28>
rsp: <BV64 0x7ffcbfa6e0f8>  r14: <BV64 0xfffffffffff6b66c>
rbp: <BV64 0x7ffcbfa6e110>  r15: <BV64 0x1c7577e16000>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x1aa61867cb40
maximum memory range     [  0x1aa61867cb40  ,  0x1aa61867cb70  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x30
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj47_48_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                   offsets
-----------------------------------------  ---------
<BV16 mem_c000020b_161_16{UNINITIALIZED}>  0xb

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0x100000000c00008ff  ]
 
contains pointers:      
offset             points to    offset in target
-----------------  -----------  ------------------
0x1b8e0753f50cf44  OBJ_1        0x0
-0x1               OBJ_2        0x1ff
0x1b8e0753f50cf54  OBJ_2        0x0
0xf                OBJ_2        0x8ff
0x8ff              OBJ_2        0xfff
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc00008ff
maximum memory range     [  0x100000000c00008ff  ,  0x100000000c0000fff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c00008ff_200_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00008ff_201_64{UNINITIALIZED}>           0x0
<BV16 mem_100000000c0000b0a_202_16{UNINITIALIZED}>  0x1000000000000020b
<BV16 mem_c0000b0a_203_16{UNINITIALIZED}>           0x20b
<BV64 mem_c000090f_341_64{UNINITIALIZED}>           0x10

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc00011ff
maximum memory range     [  0x100000000c0000fff  ,  0x100000000c00016ff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c00011ff_342_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c00011ff_343_64{UNINITIALIZED}>           0x0

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001937
maximum memory range     [  0x100000000c00016ff  ,  0x100000000c0001dff  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                            offsets
--------------------------------------------------  -------------------
<BV64 mem_100000000c0001937_344_64{UNINITIALIZED}>  0x10000000000000000
<BV64 mem_c0001937_345_64{UNINITIALIZED}>           0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                 points to
---------------------------------------------------------------------  -----------
<BV64 mem_1b8e075ff50d854_199_64{UNINITIALIZED} + 0xffffffffffffffff>  0xc00008ff
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                          address
------------------------------------------------  ------------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_ymm0_49_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_50_64{UNINITIALIZED}>
<BV32 mem_556937131784_51_32{UNINITIALIZED}>      0x556937131784
<BV128 reg_ymm1_52_128{UNINITIALIZED}>
<BV32 mem_5569370cc0f0_53_32{UNINITIALIZED}>      0x5569370cc0f0
<BV32 mem_556937135c08_54_32{UNINITIALIZED}>      0x556937135c08
<BV96 reg_292_55_96{UNINITIALIZED}>
<BV32 mem_556936de5614_56_32{UNINITIALIZED}>      0x556936de5614
<BV32 mem_556937168cf0_57_32{UNINITIALIZED}>      0x556937168cf0
<BV32 mem_556937168cc0_58_32{UNINITIALIZED}>      0x556937168cc0
<BV32 mem_556937168ca8_59_32{UNINITIALIZED}>      0x556937168ca8
<BV32 mem_556937168c9c_60_32{UNINITIALIZED}>      0x556937168c9c
<BV32 mem_556937168c94_61_32{UNINITIALIZED}>      0x556937168c94
<BV16 mem_8b480000001aea0a_62_16{UNINITIALIZED}>  0x8b480000001aea0a
<BV64 mem_1b8e075ff50d844_160_64{UNINITIALIZED}>  0x1b8e075ff50d844
<BV64 mem_1b8e075ff50d854_199_64{UNINITIALIZED}>  0x1b8e075ff50d854

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  93910413160400
Calling  <BV64 mem_c0001937_345_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x556938d12f40
0x556938d12f40:	push	rbp
0x556938d12f41:	mov	rbp, rsp
0x556938d12f44:	push	r14
0x556938d12f46:	push	rbx
0x556938d12f47:	mov	rax, qword ptr [rdi]
0x556938d12f4a:	mov	ebx, dword ptr [rax + 0xb]
0x556938d12f4d:	mov	rcx, qword ptr [rax - 1]
0x556938d12f51:	movzx	ecx, word ptr [rcx + 0xb]
0x556938d12f55:	mov	edx, ecx
0x556938d12f57:	and	edx, 7
0x556938d12f5a:	cmp	edx, 3
0x556938d12f5d:	je	0x556938d12ff1
----------------------------------------------------------------------------------------------------
At  0x556938b41480
0x556938b41480:	push	rbp
0x556938b41481:	mov	rbp, rsp
0x556938b41484:	push	rbx
0x556938b41485:	sub	rsp, 0x18
0x556938b41489:	movsd	qword ptr [rbp - 0x10], xmm0
0x556938b4148e:	mov	ebx, edx
0x556938b41490:	xor	edx, edx
0x556938b41492:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938ce97f0
0x556938ce97f0:	push	rbp
0x556938ce97f1:	mov	rbp, rsp
0x556938ce97f4:	push	r15
0x556938ce97f6:	push	r14
0x556938ce97f8:	push	r12
0x556938ce97fa:	push	rbx
0x556938ce97fb:	sub	rsp, 0x10
0x556938ce97ff:	mov	r15, rdi
0x556938ce9802:	xor	edx, edx
0x556938ce9804:	call	0x5569388da700
----------------------------------------------------------------------------------------------------
At  0x556938ce96c0
0x556938ce96c0:	push	rbp
0x556938ce96c1:	mov	rbp, rsp
0x556938ce96c4:	push	r15
0x556938ce96c6:	push	r14
0x556938ce96c8:	push	rbx
0x556938ce96c9:	push	rax
0x556938ce96ca:	mov	r15d, edx
0x556938ce96cd:	mov	rbx, rsi
0x556938ce96d0:	mov	r14, rdi
0x556938ce96d3:	nop	word ptr cs:[rax + rax]
0x556938ce96dd:	nop	dword ptr [rax]
0x556938ce96e0:	mov	rax, qword ptr [rbx]
0x556938ce96e3:	test	al, 1
0x556938ce96e5:	je	0x556938ce97df
----------------------------------------------------------------------------------------------------
At  0x556938ce9bd0
0x556938ce9bd0:	push	rbp
0x556938ce9bd1:	mov	rbp, rsp
0x556938ce9bd4:	push	r14
0x556938ce9bd6:	push	rbx
0x556938ce9bd7:	sub	rsp, 0x20
0x556938ce9bdb:	mov	r14, rdi
0x556938ce9bde:	xor	ebx, ebx
0x556938ce9be0:	xor	edx, edx
0x556938ce9be2:	call	0x556938ce96c0
----------------------------------------------------------------------------------------------------
At  0x556938947530
0x556938947530:	mov	rax, qword ptr [rip + 0x43e3401]
0x556938947537:	cmp	dword ptr [rax], 0
0x55693894753a:	jne	0x556938947544
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ff6c80
0x556938ff6c80:	test	dil, 1
0x556938ff6c84:	je	0x556938ff6cd1
----------------------------------------------------------------------------------------------------
At  0x55693908a3a0
0x55693908a3a0:	push	rbp
0x55693908a3a1:	mov	rbp, rsp
0x55693908a3a4:	push	0x18
0x55693908a3a6:	sub	rsp, 0x40
0x55693908a3aa:	mov	r8, rdx
0x55693908a3ad:	mov	rdx, rcx
0x55693908a3b0:	shr	rdx, 0x20
0x55693908a3b4:	mov	r9, rbx
0x55693908a3b7:	shr	r9, 0x20
0x55693908a3bb:	mov	qword ptr [rbp - 0x10], rax
0x55693908a3bf:	mov	qword ptr [rbp - 0x18], rbx
0x55693908a3c3:	mov	r11, r9
0x55693908a3c6:	imul	r11d, edx
0x55693908a3ca:	jo	0x55693908a8fe
----------------------------------------------------------------------------------------------------
At  0x55693908b2e0
0x55693908b2e0:	push	rbp
0x55693908b2e1:	mov	rbp, rsp
0x55693908b2e4:	push	0x18
0x55693908b2e6:	sub	rsp, 0x40
0x55693908b2ea:	mov	r8, qword ptr [rbx - 1]
0x55693908b2ee:	mov	qword ptr [rbp - 0x10], rsi
0x55693908b2f2:	mov	qword ptr [rbp - 0x20], rcx
0x55693908b2f6:	mov	qword ptr [rbp - 0x28], rdx
0x55693908b2fa:	mov	qword ptr [rbp - 0x30], rdi
0x55693908b2fe:	cmp	word ptr [r8 + 0xb], 0x452
0x55693908b305:	jne	0x55693908b4f1
----------------------------------------------------------------------------------------------------
At  0x556938ff5840
0x556938ff5840:	cmp	rbx, 0xffff
0x556938ff5847:	je	0x556938ff591a
----------------------------------------------------------------------------------------------------
At  0x556938ffc300
0x556938ffc300:	mov	r10, qword ptr [r13 + 0x1208]
0x556938ffc307:	mov	r8, rsp
0x556938ffc30a:	sub	r8, r10
0x556938ffc30d:	sar	r8, 3
0x556938ffc311:	cmp	r8, rax
0x556938ffc314:	jle	0x556938ffc342
----------------------------------------------------------------------------------------------------
At  0x5569390d6f60
0x5569390d6f60:	mov	rax, rbp
0x5569390d6f63:	mov	rbx, qword ptr [rax - 0x10]
0x5569390d6f67:	mov	rbx, qword ptr [rbx + 0x27]
0x5569390d6f6b:	movzx	edx, byte ptr [r14 + r9 + 2]
0x5569390d6f71:	mov	rbx, qword ptr [rbx + 7]
0x5569390d6f75:	mov	rcx, qword ptr [rbx + rdx*8 + 0x27]
0x5569390d6f7a:	test	cl, 1
0x5569390d6f7d:	je	0x5569390d6fdc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(0x7f <= mem_8b480000001aea0a_62_16{UNINITIALIZED}) || mem_8b480000001aea0a_62_16{UNINITIALIZED} == 0x7f>
1  <Bool mem_8b480000001aea0a_62_16{UNINITIALIZED}[2:0] == 3>
2  <Bool mem_1b8e075ff50d844_160_64{UNINITIALIZED} == 0xc0000200>
3  <Bool mem_c000020b_161_16{UNINITIALIZED}[2:0] == 5>
4  <Bool mem_1b8e075ff50d854_199_64{UNINITIALIZED} == 0xc0000900>
5  <Bool mem_c00008ff_201_64{UNINITIALIZED} == 0xc0000aff>
6  <Bool !(mem_c0000b0a_203_16{UNINITIALIZED}[3:3] == 0)>
7  <Bool !(mem_c0000b0a_203_16{UNINITIALIZED}[2:0] == 0)>
8  <Bool mem_c000090f_341_64{UNINITIALIZED} == 0xc00011ff>
9  <Bool mem_c00011ff_343_64{UNINITIALIZED} == 0xc00018ff>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

-----end dump executor-----
