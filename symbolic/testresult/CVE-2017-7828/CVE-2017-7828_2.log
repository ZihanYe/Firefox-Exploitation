-----start dump executor-----
Step:  150
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        6
control_hijack (C)         6
active (A)               739
unconstrained (U)          0
errored (E)                0
found                      0
avoided                    0
paths to write primitive:  166
paths to control hijack:  99
first primitive after:  6
total paths:  921
****************************************************************************************************
Some errored states: 
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. mem_c000150f_5393_8{UNINITIALIZED}[7:1] .. 0>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b520>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b560>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I8 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I1 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I1 t24:Ity_I1

   00 | ------ IMark(0x7f72c2c471c7, 6, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x000000000000050f)
   03 | t8 = GET:I8(dl)
   04 | STle(t6) = t8
   05 | PUT(rip) = 0x00007f72c2c471cd
   06 | ------ IMark(0x7f72c2c471cd, 4, 0) ------
   07 | t10 = GET:I64(rbp)
   08 | t9 = Add64(t10,0xffffffffffffffc8)
   09 | t11 = LDle:I64(t9)
   10 | PUT(rip) = 0x00007f72c2c471d1
   11 | ------ IMark(0x7f72c2c471d1, 4, 0) ------
   12 | t12 = Add64(t11,0x0000000000000020)
   13 | t14 = LDle:I64(t12)
   14 | PUT(rax) = t14
   15 | ------ IMark(0x7f72c2c471d5, 3, 0) ------
   16 | PUT(cc_op) = 0x0000000000000014
   17 | PUT(cc_dep1) = t14
   18 | PUT(cc_dep2) = 0x0000000000000000
   19 | PUT(rip) = 0x00007f72c2c471d8
   20 | ------ IMark(0x7f72c2c471d8, 2, 0) ------
   21 | t23 = CmpEQ64(t14,0x0000000000000000)
   22 | t22 = 1Uto64(t23)
   23 | t20 = t22
   24 | t24 = 64to1(t20)
   25 | t15 = t24
   26 | if (t15) { PUT(rip) = 0x7f72c2c47230; Ijk_Boring }
   NEXT: PUT(rip) = 0x00007f72c2c471da; Ijk_Boring
}
0x7f72c2c471c7:	mov	byte ptr [rax + 0x50f], dl
0x7f72c2c471cd:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c471d1:	mov	rax, qword ptr [rax + 0x20]
0x7f72c2c471d5:	test	rax, rax
0x7f72c2c471d8:	je	0x7f72c2c47230
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130870653383
Write  <BV64 0x1>  bytes to  <BV64 (uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8) + 0x50f>
with expression : <BV8 mem_c000150f_5393_8{UNINITIALIZED}[7:1] .. 0>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2c47198
0x7f72c2c47198:	push	rbp
0x7f72c2c47199:	mov	rbp, rsp
0x7f72c2c4719c:	sub	rsp, 0x40
0x7f72c2c471a0:	mov	qword ptr [rbp - 0x38], rdi
0x7f72c2c471a4:	mov	dword ptr [rbp - 0x3c], esi
0x7f72c2c471a7:	mov	dword ptr [rbp - 0x40], edx
0x7f72c2c471aa:	mov	rax, qword ptr fs:[0x28]
0x7f72c2c471b3:	mov	qword ptr [rbp - 8], rax
0x7f72c2c471b7:	xor	eax, eax
0x7f72c2c471b9:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c471bd:	movzx	edx, byte ptr [rax + 0x50f]
0x7f72c2c471c4:	and	edx, 0xfffffffe
0x7f72c2c471c7:	mov	byte ptr [rax + 0x50f], dl
0x7f72c2c471cd:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c471d1:	mov	rax, qword ptr [rax + 0x20]
0x7f72c2c471d5:	test	rax, rax
0x7f72c2c471d8:	je	0x7f72c2c47230
----------------------------------------------------------------------------------------------------
At  0x7f72c2bbc192
0x7f72c2bbc192:	push	rbp
0x7f72c2bbc193:	mov	rbp, rsp
0x7f72c2bbc196:	sub	rsp, 0x10
0x7f72c2bbc19a:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bbc19e:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bbc1a2:	movzx	eax, byte ptr [rax + 0x50f]
0x7f72c2bbc1a9:	and	eax, 1
0x7f72c2bbc1ac:	test	al, al
0x7f72c2bbc1ae:	je	0x7f72c2bbc1c6
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj22_23_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj16_17_8 == 0>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj18_19_8 == 0>
20  <Bool uaf_obj20_21_8 == 0>
21  <Bool !(mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x1>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. mem_c00003b4_5397_8{UNINITIALIZED}[6:0]>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 0x7fff6531b540>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b520>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b580>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I8 t4:Ity_I64

   00 | ------ IMark(0x7f72c0c3875f, 6, 0) ------
   01 | t2 = GET:I64(rax)
   02 | t1 = Add64(t2,0x00000000000001b4)
   03 | t3 = GET:I8(dl)
   04 | STle(t1) = t3
   05 | ------ IMark(0x7f72c0c38765, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f72c0c38768; Ijk_Boring
}
0x7f72c0c3875f:	mov	byte ptr [rax + 0x1b4], dl
0x7f72c0c38765:	jmp	0x7f72c0c38768
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c00003b4_5397_8{UNINITIALIZED}>  0x1b4
<BV8 mem_c0000488_5414_8{UNINITIALIZED}>  0x288
<BV8 mem_c00003a0_5422_8{UNINITIALIZED}>  0x1a0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f
<BV56 mem_c0000489_5415_56{UNINITIALIZED}>
<BV56 mem_c00003a1_5423_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130837038943
Write  <BV64 0x1>  bytes to  <BV64 (uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8) + 0x1b4>
with expression : <BV8 (0x0 .. mem_c00003b4_5397_8{UNINITIALIZED}[6:0])[7:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c0c38524
0x7f72c0c38524:	push	rbp
0x7f72c0c38525:	mov	rbp, rsp
0x7f72c0c38528:	push	r12
0x7f72c0c3852a:	push	rbx
0x7f72c0c3852b:	sub	rsp, 0x50
0x7f72c0c3852f:	mov	qword ptr [rbp - 0x58], rdi
0x7f72c0c38533:	mov	rax, qword ptr fs:[0x28]
0x7f72c0c3853c:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0c38540:	xor	eax, eax
0x7f72c0c38542:	mov	rax, qword ptr [rbp - 0x58]
0x7f72c0c38546:	movzx	eax, byte ptr [rax + 0x1b5]
0x7f72c0c3854d:	and	eax, 1
0x7f72c0c38550:	xor	eax, 1
0x7f72c0c38553:	test	al, al
0x7f72c0c38555:	jne	0x7f72c0c38767
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj22_23_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj16_17_8 == 0>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj18_19_8 == 0>
20  <Bool uaf_obj20_21_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1>
23  <Bool !(mem_c00003b4_5397_8{UNINITIALIZED}[7:7] == 0)>
24  <Bool !(mem_c0000488_5414_8{UNINITIALIZED} == 0) || !(mem_c0000489_5415_56{UNINITIALIZED} == 0x0)>
25  <Bool mem_c00003a1_5423_56{UNINITIALIZED} == 0x0>
26  <Bool mem_c00003a0_5422_8{UNINITIALIZED} == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x0>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. mem_c000150f_5393_8{UNINITIALIZED}[6:0]>  r11: <BV64 0x1>
rsi: <BV64 0xffff>  r12: <BV64 0x1>
rdi: <BV64 0x7fff6531b4e0>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b540>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b580>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I8 t4:Ity_I64

   00 | ------ IMark(0x7f72c2c47bf4, 6, 0) ------
   01 | t2 = GET:I64(rax)
   02 | t1 = Add64(t2,0x000000000000050f)
   03 | t3 = GET:I8(dl)
   04 | STle(t1) = t3
   05 | ------ IMark(0x7f72c2c47bfa, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f72c2c47c00; Ijk_Boring
}
0x7f72c2c47bf4:	mov	byte ptr [rax + 0x50f], dl
0x7f72c2c47bfa:	jmp	0x7f72c2c47c00
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x68      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001068_5402_8{UNINITIALIZED}>  0x68

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000172f_5408_8{UNINITIALIZED}>  0x220
<BV8 mem_c0001737_5450_8{UNINITIALIZED}>  0x228
<BV8 mem_c000172b_5488_8{UNINITIALIZED}>  0x21c

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0001069_5403_56{UNINITIALIZED}>
<BV24 mem_c0001730_5409_24{UNINITIALIZED}>
<BV56 mem_c0001738_5451_56{UNINITIALIZED}>
<BV24 mem_c000172c_5489_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130870655988
Write  <BV64 0x1>  bytes to  <BV64 (uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8) + 0x50f>
with expression : <BV8 (0x0 .. mem_c000150f_5393_8{UNINITIALIZED}[6:0])[7:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2c47a7a
0x7f72c2c47a7a:	push	rbp
0x7f72c2c47a7b:	mov	rbp, rsp
0x7f72c2c47a7e:	push	r14
0x7f72c2c47a80:	push	r13
0x7f72c2c47a82:	push	r12
0x7f72c2c47a84:	push	rbx
0x7f72c2c47a85:	sub	rsp, 0x20
0x7f72c2c47a89:	mov	qword ptr [rbp - 0x38], rdi
0x7f72c2c47a8d:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c47a91:	mov	rax, qword ptr [rax + 0x20]
0x7f72c2c47a95:	test	rax, rax
0x7f72c2c47a98:	je	0x7f72c2c47bfc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj22_23_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj16_17_8 == 0>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj18_19_8 == 0>
20  <Bool uaf_obj20_21_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c000150f_5393_8{UNINITIALIZED}[7:7] == 0)>
23  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
24  <Bool !(mem_c0001020_5398_8{UNINITIALIZED} == 0) || !(mem_c0001021_5399_56{UNINITIALIZED} == 0x0)>
25  <Bool mem_c0001068_5402_8{UNINITIALIZED} == 15>
26  <Bool mem_c0001069_5403_56{UNINITIALIZED} == 0xc00017>
27  <Bool mem_c000172f_5408_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001730_5409_24{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001737_5450_8{UNINITIALIZED} == 0>
30  <Bool mem_c0001738_5451_56{UNINITIALIZED} == 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x1>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x1 + (mem_c0001748_6107_56{UNINITIALIZED} .. mem_c0001747_6106_8{UNINITIALIZED})>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 mem_c0002c38_5723_56{UNINITIALIZED} .. mem_c0002c37_5722_8{UNINITIALIZED}>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b540>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b560>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64

   00 | ------ IMark(0x7f72c2b88f65, 4, 0) ------
   01 | t5 = GET:I64(rax)
   02 | t4 = Add64(t5,0x0000000000000038)
   03 | t6 = GET:I64(rdx)
   04 | STle(t4) = t6
   05 | PUT(rip) = 0x00007f72c2b88f69
   06 | ------ IMark(0x7f72c2b88f69, 4, 0) ------
   07 | t8 = GET:I64(rbp)
   08 | t7 = Add64(t8,0xffffffffffffffe8)
   09 | t9 = LDle:I64(t7)
   10 | PUT(rax) = t9
   11 | ------ IMark(0x7f72c2b88f6d, 3, 0) ------
   12 | PUT(rdi) = t9
   13 | PUT(rip) = 0x00007f72c2b88f70
   14 | ------ IMark(0x7f72c2b88f70, 5, 0) ------
   15 | t12 = GET:I64(rsp)
   16 | t11 = Sub64(t12,0x0000000000000008)
   17 | PUT(rsp) = t11
   18 | STle(t11) = 0x00007f72c2b88f75
   19 | t13 = Sub64(t11,0x0000000000000080)
   20 | ====== AbiHint(0xt13, 128, 0x00007f72c2b890ee) ======
   NEXT: PUT(rip) = 0x00007f72c2b890ee; Ijk_Call
}
0x7f72c2b88f65:	mov	qword ptr [rax + 0x38], rdx
0x7f72c2b88f69:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c2b88f6d:	mov	rdi, rax
0x7f72c2b88f70:	call	0x7f72c2b890ee
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001060_5540_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x210     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000173f_5572_8{UNINITIALIZED}>  0x230
<BV8 mem_c000171f_5610_8{UNINITIALIZED}>  0x210
<BV8 mem_c0001767_5964_8{UNINITIALIZED}>  0x258
<BV8 mem_c0001747_6106_8{UNINITIALIZED}>  0x238

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e2f_5654_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc0002a0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000252f_5684_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c0f
maximum memory range     [  0xc0002a0f  ,  0xc000310f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x28      OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c37_5722_8{UNINITIALIZED}>  0x28

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc000330f
maximum memory range     [  0xc000310f  ,  0xc000380f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_9        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003437_5734_8{UNINITIALIZED}>  0x128
<BV8 mem_c000330f_5754_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0003a0f
maximum memory range     [  0xc000380f  ,  0xc0003f0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003cf7_5756_8{UNINITIALIZED}>  0x2e8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001061_5541_56{UNINITIALIZED}>
<BV56 mem_c0001720_5611_56{UNINITIALIZED}>
<BV56 mem_c0001e30_5655_56{UNINITIALIZED}>
<BV56 mem_c0002530_5685_56{UNINITIALIZED}>
<BV56 mem_c0002c38_5723_56{UNINITIALIZED}>
<BV56 mem_c0003438_5735_56{UNINITIALIZED}>
<BV56 mem_c0003310_5755_56{UNINITIALIZED}>
<BV56 mem_c0003cf8_5757_56{UNINITIALIZED}>
<BV64 symbolic_call_2>
<BV64 symbolic_return_2_5788_64{UNINITIALIZED}>
<BV56 mem_c0001748_6107_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130869874533
Write  <BV64 0x8>  bytes to  <BV64 (mem_c0001061_5541_56{UNINITIALIZED} .. mem_c0001060_5540_8{UNINITIALIZED}) + 0x38>
with expression : <BV64 Reverse(mem_c0001747_6106_8{UNINITIALIZED} .. Reverse(mem_c0001748_6107_56{UNINITIALIZED})) + 0x1>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2b88eec
0x7f72c2b88eec:	push	rbp
0x7f72c2b88eed:	mov	rbp, rsp
0x7f72c2b88ef0:	sub	rsp, 0x20
0x7f72c2b88ef4:	mov	qword ptr [rbp - 0x18], rdi
0x7f72c2b88ef8:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c2b88efc:	mov	rdi, rax
0x7f72c2b88eff:	call	0x7f72c2bbfda4
----------------------------------------------------------------------------------------------------
At  0x7f72c2bc1806
0x7f72c2bc1806:	push	rbp
0x7f72c2bc1807:	mov	rbp, rsp
0x7f72c2bc180a:	sub	rsp, 0x10
0x7f72c2bc180e:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bc1812:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bc1816:	mov	rdi, rax
0x7f72c2bc1819:	call	0x7f72c2319bfa
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj22_23_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj16_17_8 == 0>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj18_19_8 == 0>
20  <Bool uaf_obj20_21_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
24  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001061_5541_56{UNINITIALIZED} == 0xc00017>
30  <Bool mem_c0001060_5540_8{UNINITIALIZED} == 15>
31  <Bool !(mem_c000173f_5572_8{UNINITIALIZED} == 2)>
32  <Bool mem_c000171f_5610_8{UNINITIALIZED} == 15>
33  <Bool mem_c0001720_5611_56{UNINITIALIZED} == 0xc0001e>
34  <Bool mem_c0001e30_5655_56{UNINITIALIZED} == 0xc00025>
35  <Bool mem_c0001e2f_5654_8{UNINITIALIZED} == 15>
36  <Bool mem_c0002530_5685_56{UNINITIALIZED} == 0xc0002c>
37  <Bool mem_c000252f_5684_8{UNINITIALIZED} == 15>
38  <Bool mem_c0002c37_5722_8{UNINITIALIZED} == 15>
39  <Bool mem_c0002c38_5723_56{UNINITIALIZED} == 0xc00033>
40  <Bool mem_c0003438_5735_56{UNINITIALIZED} == 0x0>
41  <Bool mem_c0003437_5734_8{UNINITIALIZED} == 0>
42  <Bool mem_c0003310_5755_56{UNINITIALIZED} == 0xc0003a>
43  <Bool mem_c000330f_5754_8{UNINITIALIZED} == 15>
44  <Bool symbolic_call_2 == 0x0>
45  <Bool symbolic_return_2_5788_64{UNINITIALIZED} == 0x0>
46  <Bool !(mem_c0001767_5964_8{UNINITIALIZED}[3:3] == 0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
 <BV64 symbolic_return_2_5788_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          call
id              2
call_from       140130836912469
call            <BV64 mem_c0003cf8_5757_56{UNINITIALIZED} .. mem_c0003cf7_5756_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130870265190
call_id         2
write_to        <BV64 0x7fff6531b338>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_5788_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0001061_5541_56{UNINITIALIZED} .. mem_c0001060_5540_8{UNINITIALIZED}>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. 0x1 + (mem_c0001728_8090_24{UNINITIALIZED} .. mem_c0001727_8089_8{UNINITIALIZED})>  r11: <BV64 0x1>
rsi: <BV64 0x70 + (mem_c0001061_5541_56{UNINITIALIZED} .. mem_c0001060_5540_8{UNINITIALIZED})>  r12: <BV64 0x1>
rdi: <BV64 mem_c0001061_5541_56{UNINITIALIZED} .. mem_c0001060_5540_8{UNINITIALIZED}>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b500>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b510>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I32 t4:Ity_I32 t5:Ity_I32 t6:Ity_I8 t7:Ity_I8 t8:Ity_I8 t9:Ity_I8 t10:Ity_I64 t11:Ity_I64 t12:Ity_I32 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I32 t21:Ity_I32 t22:Ity_I64 t23:Ity_I32 t24:Ity_I64 t25:Ity_I64 t26:Ity_I8 t27:Ity_I1 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64 t33:Ity_I64 t34:Ity_I1 t35:Ity_I64 t36:Ity_I64 t37:Ity_I64 t38:Ity_I64 t39:Ity_I64 t40:Ity_I64 t41:Ity_I32 t42:Ity_I64 t43:Ity_I32 t44:Ity_I64 t45:Ity_I64 t46:Ity_I1 t47:Ity_I32 t48:Ity_I1 t49:Ity_I8 t50:Ity_I64 t51:Ity_I64 t52:Ity_I1 t53:Ity_I64 t54:Ity_I1

   00 | ------ IMark(0x7f72c2bbfd32, 3, 0) ------
   01 | t11 = GET:I64(rax)
   02 | t10 = Add64(t11,0x0000000000000018)
   03 | t13 = GET:I64(rdx)
   04 | t41 = 64to32(t13)
   05 | t12 = t41
   06 | STle(t10) = t12
   07 | PUT(rip) = 0x00007f72c2bbfd35
   08 | ------ IMark(0x7f72c2bbfd35, 4, 0) ------
   09 | t15 = GET:I64(rbp)
   10 | t14 = Add64(t15,0xfffffffffffffff8)
   11 | t16 = LDle:I64(t14)
   12 | PUT(rip) = 0x00007f72c2bbfd39
   13 | ------ IMark(0x7f72c2bbfd39, 3, 0) ------
   14 | t17 = Add64(t16,0x0000000000000018)
   15 | t20 = LDle:I32(t17)
   16 | t42 = 32Uto64(t20)
   17 | t19 = t42
   18 | PUT(rax) = t19
   19 | ------ IMark(0x7f72c2bbfd3c, 2, 0) ------
   20 | t43 = 64to32(t19)
   21 | t21 = t43
   22 | t44 = 32Uto64(t21)
   23 | t25 = t44
   24 | ------ IMark(0x7f72c2bbfd3e, 3, 0) ------
   25 | t47 = 64to32(t25)
   26 | t46 = CmpEQ32(t47,0x00000000)
   27 | t45 = 1Uto64(t46)
   28 | t32 = t45
   29 | t48 = 64to1(t32)
   30 | t27 = t48
   31 | t49 = 1Uto8(t27)
   32 | t26 = t49
   33 | PUT(al) = t26
   34 | ------ IMark(0x7f72c2bbfd41, 2, 0) ------
   35 | PUT(cc_op) = 0x0000000000000011
   36 | t50 = 8Uto64(t26)
   37 | t33 = t50
   38 | PUT(cc_dep1) = t33
   39 | PUT(cc_dep2) = 0x0000000000000000
   40 | PUT(rip) = 0x00007f72c2bbfd43
   41 | ------ IMark(0x7f72c2bbfd43, 2, 0) ------
   42 | t53 = And64(t33,0x00000000000000ff)
   43 | t52 = CmpEQ64(t53,0x0000000000000000)
   44 | t51 = 1Uto64(t52)
   45 | t39 = t51
   46 | t54 = 64to1(t39)
   47 | t34 = t54
   48 | if (t34) { PUT(rip) = 0x7f72c2bbfd56; Ijk_Boring }
   NEXT: PUT(rip) = 0x00007f72c2bbfd45; Ijk_Boring
}
0x7f72c2bbfd32:	mov	dword ptr [rax + 0x18], edx
0x7f72c2bbfd35:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bbfd39:	mov	eax, dword ptr [rax + 0x18]
0x7f72c2bbfd3c:	test	eax, eax
0x7f72c2bbfd3e:	sete	al
0x7f72c2bbfd41:	test	al, al
0x7f72c2bbfd43:	je	0x7f72c2bbfd56
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001060_5540_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x210     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000173f_5572_8{UNINITIALIZED}>  0x230
<BV8 mem_c000171f_5610_8{UNINITIALIZED}>  0x210
<BV8 mem_c0001767_5964_8{UNINITIALIZED}>  0x258
<BV8 mem_c000179f_7129_8{UNINITIALIZED}>  0x290
<BV8 mem_c0001727_8089_8{UNINITIALIZED}>  0x218

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e2f_5654_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001e5f_6409_8{UNINITIALIZED}>  0x50

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc0002a0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000252f_5684_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c0f
maximum memory range     [  0xc0002a0f  ,  0xc000310f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x28      OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c37_5722_8{UNINITIALIZED}>  0x28

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc000330f
maximum memory range     [  0xc000310f  ,  0xc000380f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_9        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003437_5734_8{UNINITIALIZED}>  0x128
<BV8 mem_c000330f_5754_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0003a0f
maximum memory range     [  0xc000380f  ,  0xc0003f0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003cf7_5756_8{UNINITIALIZED}>  0x2e8

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc0003f0f
maximum memory range     [  0xc0003f0f  ,  0xc000460f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                                     points to
-----------------------------------------------------------------------------------------  -----------
<BV64 (mem_c0001e60_6410_56{UNINITIALIZED} .. mem_c0001e5f_6409_8{UNINITIALIZED}) + 0x30>  0x30
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001061_5541_56{UNINITIALIZED}>
<BV56 mem_c0001720_5611_56{UNINITIALIZED}>
<BV56 mem_c0001e30_5655_56{UNINITIALIZED}>
<BV56 mem_c0002530_5685_56{UNINITIALIZED}>
<BV56 mem_c0002c38_5723_56{UNINITIALIZED}>
<BV56 mem_c0003438_5735_56{UNINITIALIZED}>
<BV56 mem_c0003310_5755_56{UNINITIALIZED}>
<BV56 mem_c0003cf8_5757_56{UNINITIALIZED}>
<BV64 symbolic_call_2>
<BV64 symbolic_return_2_5788_64{UNINITIALIZED}>
<BV56 mem_c0001e60_6410_56{UNINITIALIZED}>
<BV24 mem_c00017a0_7130_24{UNINITIALIZED}>
<BV24 mem_c0001728_8090_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130870099250
Write  <BV64 0x4>  bytes to  <BV64 (mem_c0001061_5541_56{UNINITIALIZED} .. mem_c0001060_5540_8{UNINITIALIZED}) + 0x18>
with expression : <BV32 (0#32 .. Reverse(mem_c0001727_8089_8{UNINITIALIZED} .. Reverse(mem_c0001728_8090_24{UNINITIALIZED}))) + 0x1[31:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2bbfd18
0x7f72c2bbfd18:	push	rbp
0x7f72c2bbfd19:	mov	rbp, rsp
0x7f72c2bbfd1c:	sub	rsp, 0x10
0x7f72c2bbfd20:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bbfd24:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bbfd28:	mov	eax, dword ptr [rax + 0x18]
0x7f72c2bbfd2b:	lea	edx, [rax + 1]
0x7f72c2bbfd2e:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bbfd32:	mov	dword ptr [rax + 0x18], edx
0x7f72c2bbfd35:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bbfd39:	mov	eax, dword ptr [rax + 0x18]
0x7f72c2bbfd3c:	test	eax, eax
0x7f72c2bbfd3e:	sete	al
0x7f72c2bbfd41:	test	al, al
0x7f72c2bbfd43:	je	0x7f72c2bbfd56
----------------------------------------------------------------------------------------------------
At  0x7f72c2bc00ba
0x7f72c2bc00ba:	push	rbp
0x7f72c2bc00bb:	mov	rbp, rsp
0x7f72c2bc00be:	sub	rsp, 0x10
0x7f72c2bc00c2:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bc00c6:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2bc00ca:	mov	rax, qword ptr [rbp - 0x10]
0x7f72c2bc00ce:	mov	rdi, rax
0x7f72c2bc00d1:	call	0x7f72c2bbfe9a
----------------------------------------------------------------------------------------------------
At  0x7f72c2b88eec
0x7f72c2b88eec:	push	rbp
0x7f72c2b88eed:	mov	rbp, rsp
0x7f72c2b88ef0:	sub	rsp, 0x20
0x7f72c2b88ef4:	mov	qword ptr [rbp - 0x18], rdi
0x7f72c2b88ef8:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c2b88efc:	mov	rdi, rax
0x7f72c2b88eff:	call	0x7f72c2bbfda4
----------------------------------------------------------------------------------------------------
At  0x7f72c2bc1806
0x7f72c2bc1806:	push	rbp
0x7f72c2bc1807:	mov	rbp, rsp
0x7f72c2bc180a:	sub	rsp, 0x10
0x7f72c2bc180e:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bc1812:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bc1816:	mov	rdi, rax
0x7f72c2bc1819:	call	0x7f72c2319bfa
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj22_23_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj16_17_8 == 0>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj18_19_8 == 0>
20  <Bool uaf_obj20_21_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
24  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001061_5541_56{UNINITIALIZED} == 0xc00017>
30  <Bool mem_c0001060_5540_8{UNINITIALIZED} == 15>
31  <Bool !(mem_c000173f_5572_8{UNINITIALIZED} == 2)>
32  <Bool mem_c000171f_5610_8{UNINITIALIZED} == 15>
33  <Bool mem_c0001720_5611_56{UNINITIALIZED} == 0xc0001e>
34  <Bool mem_c0001e30_5655_56{UNINITIALIZED} == 0xc00025>
35  <Bool mem_c0001e2f_5654_8{UNINITIALIZED} == 15>
36  <Bool mem_c0002530_5685_56{UNINITIALIZED} == 0xc0002c>
37  <Bool mem_c000252f_5684_8{UNINITIALIZED} == 15>
38  <Bool mem_c0002c37_5722_8{UNINITIALIZED} == 15>
39  <Bool mem_c0002c38_5723_56{UNINITIALIZED} == 0xc00033>
40  <Bool mem_c0003438_5735_56{UNINITIALIZED} == 0x0>
41  <Bool mem_c0003437_5734_8{UNINITIALIZED} == 0>
42  <Bool mem_c0003310_5755_56{UNINITIALIZED} == 0xc0003a>
43  <Bool mem_c000330f_5754_8{UNINITIALIZED} == 15>
44  <Bool symbolic_call_2 == 0x0>
45  <Bool symbolic_return_2_5788_64{UNINITIALIZED} == 0x0>
46  <Bool mem_c0001767_5964_8{UNINITIALIZED}[3:3] == 0>
47  <Bool mem_c0001767_5964_8{UNINITIALIZED}[0:0] == 0>
48  <Bool mem_c0001e60_6410_56{UNINITIALIZED} == 0xc00041>
49  <Bool mem_c0001e5f_6409_8{UNINITIALIZED} == 15>
50  <Bool !(mem_c000179f_7129_8{UNINITIALIZED} == 0) || !(mem_c00017a0_7130_24{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
 <BV64 symbolic_return_2_5788_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          call
id              2
call_from       140130836912469
call            <BV64 mem_c0003cf8_5757_56{UNINITIALIZED} .. mem_c0003cf7_5756_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130870265190
call_id         2
write_to        <BV64 0x7fff6531b338>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_5788_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  5
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0004820_6278_56{UNINITIALIZED} .. mem_c000481f_6277_8{UNINITIALIZED}>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. 0x1 + (mem_c00054b8_7701_24{UNINITIALIZED} .. mem_c00054b7_7700_8{UNINITIALIZED})>  r11: <BV64 0x1>
rsi: <BV64 0x20000>  r12: <BV64 0x1>
rdi: <BV64 mem_c0004820_6278_56{UNINITIALIZED} .. mem_c000481f_6277_8{UNINITIALIZED}>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b2e0>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b2e0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I32 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64

   00 | ------ IMark(0x7f72c2c280f9, 6, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x00000000000005a8)
   03 | t9 = GET:I64(rdx)
   04 | t8 = 64to32(t9)
   05 | STle(t6) = t8
   06 | ------ IMark(0x7f72c2c280ff, 1, 0) ------
   07 | PUT(rip) = 0x00007f72c2c28100
   08 | ------ IMark(0x7f72c2c28100, 1, 0) ------
   09 | t2 = GET:I64(rsp)
   10 | t1 = LDle:I64(t2)
   11 | t10 = Add64(t2,0x0000000000000008)
   12 | PUT(rsp) = t10
   13 | PUT(rbp) = t1
   14 | PUT(rip) = 0x00007f72c2c28101
   15 | ------ IMark(0x7f72c2c28101, 1, 0) ------
   16 | t4 = LDle:I64(t10)
   17 | t5 = Add64(t10,0x0000000000000008)
   18 | PUT(rsp) = t5
   19 | t11 = Sub64(t5,0x0000000000000080)
   20 | ====== AbiHint(0xt11, 128, t4) ======
   NEXT: PUT(rip) = t4; Ijk_Ret
}
0x7f72c2c280f9:	mov	dword ptr [rax + 0x5a8], edx
0x7f72c2c280ff:	nop	
0x7f72c2c28100:	pop	rbp
0x7f72c2c28101:	ret	
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001060_5540_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x210     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000173f_5572_8{UNINITIALIZED}>  0x230
<BV8 mem_c000171f_5610_8{UNINITIALIZED}>  0x210

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e2f_5654_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc0002a0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000252f_5684_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c0f
maximum memory range     [  0xc0002a0f  ,  0xc000310f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x28      OBJ_8        0x0
0x0       OBJ_11       0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c37_5722_8{UNINITIALIZED}>  0x28
<BV8 mem_c0002c0f_6109_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc000330f
maximum memory range     [  0xc000310f  ,  0xc000380f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_9        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003437_5734_8{UNINITIALIZED}>  0x128
<BV8 mem_c000330f_5754_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0003a0f
maximum memory range     [  0xc000380f  ,  0xc0003f0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003cf7_5756_8{UNINITIALIZED}>  0x2e8

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc0004127
maximum memory range     [  0xc0003f0f  ,  0xc000460f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0004127_5904_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_11
(possible) base address  0xc000480f
maximum memory range     [  0xc000460f  ,  0xc0004d0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x10      OBJ_12       0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000481f_6277_8{UNINITIALIZED}>  0x10

****************************************************************************************************
object:                  OBJ_12
(possible) base address  0xc0004f0f
maximum memory range     [  0xc0004d0f  ,  0xc000540f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_13       0x158
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0004f2f_6629_8{UNINITIALIZED}>  0x20
<BV8 mem_c0004f0f_6953_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_13
(possible) base address  0xc00054b7
maximum memory range     [  0xc000540f  ,  0xc0005b0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0005637_6955_8{UNINITIALIZED}>  0x180
<BV8 mem_c00054b7_7700_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                  points to
------------------------------------------------------  -----------
<BV64 symbolic_return_2_5788_64{UNINITIALIZED} + 0x18>  0xc0004127
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001061_5541_56{UNINITIALIZED}>
<BV56 mem_c0001720_5611_56{UNINITIALIZED}>
<BV56 mem_c0001e30_5655_56{UNINITIALIZED}>
<BV56 mem_c0002530_5685_56{UNINITIALIZED}>
<BV56 mem_c0002c38_5723_56{UNINITIALIZED}>
<BV56 mem_c0003438_5735_56{UNINITIALIZED}>
<BV56 mem_c0003310_5755_56{UNINITIALIZED}>
<BV56 mem_c0003cf8_5757_56{UNINITIALIZED}>
<BV64 symbolic_call_2>
<BV64 symbolic_return_2_5788_64{UNINITIALIZED}>
<BV24 mem_c0004128_5905_24{UNINITIALIZED}>
<BV56 mem_c0002c10_6110_56{UNINITIALIZED}>
<BV56 mem_c0004820_6278_56{UNINITIALIZED}>
<BV56 mem_c0004f30_6630_56{UNINITIALIZED}>
<BV56 mem_c0004f10_6954_56{UNINITIALIZED}>
<BV56 mem_c0005638_6956_56{UNINITIALIZED}>
<BV64 symbolic_call_3>
<BV64 symbolic_return_3_7039_64{UNINITIALIZED}>
<BV24 mem_c00054b8_7701_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130870526201
Write  <BV64 0x4>  bytes to  <BV64 (mem_c0004820_6278_56{UNINITIALIZED} .. mem_c000481f_6277_8{UNINITIALIZED}) + 0x5a8>
with expression : <BV32 (0#32 .. Reverse(mem_c00054b7_7700_8{UNINITIALIZED} .. Reverse(mem_c00054b8_7701_24{UNINITIALIZED}))) + 0x1[31:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2c280e0
0x7f72c2c280e0:	push	rbp
0x7f72c2c280e1:	mov	rbp, rsp
0x7f72c2c280e4:	mov	qword ptr [rbp - 8], rdi
0x7f72c2c280e8:	mov	rax, qword ptr [rbp - 8]
0x7f72c2c280ec:	mov	eax, dword ptr [rax + 0x5a8]
0x7f72c2c280f2:	lea	edx, [rax + 1]
0x7f72c2c280f5:	mov	rax, qword ptr [rbp - 8]
0x7f72c2c280f9:	mov	dword ptr [rax + 0x5a8], edx
0x7f72c2c280ff:	nop	
0x7f72c2c28100:	pop	rbp
0x7f72c2c28101:	ret	
----------------------------------------------------------------------------------------------------
At  0x7f72c2bebcfe
0x7f72c2bebcfe:	push	rbp
0x7f72c2bebcff:	mov	rbp, rsp
0x7f72c2bebd02:	sub	rsp, 0x20
0x7f72c2bebd06:	mov	qword ptr [rbp - 0x18], rdi
0x7f72c2bebd0a:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c2bebd0e:	mov	rax, qword ptr [rax]
0x7f72c2bebd11:	mov	rdi, rax
0x7f72c2bebd14:	call	0x7f72c03523fe
----------------------------------------------------------------------------------------------------
At  0x7f72c2be8532
0x7f72c2be8532:	push	rbp
0x7f72c2be8533:	mov	rbp, rsp
0x7f72c2be8536:	sub	rsp, 0x210
0x7f72c2be853d:	mov	qword ptr [rbp - 0x208], rdi
0x7f72c2be8544:	mov	rax, qword ptr fs:[0x28]
0x7f72c2be854d:	mov	qword ptr [rbp - 8], rax
0x7f72c2be8551:	xor	eax, eax
0x7f72c2be8553:	mov	rax, qword ptr [rbp - 0x208]
0x7f72c2be855a:	mov	rax, qword ptr [rax + 0x28]
0x7f72c2be855e:	mov	rdi, rax
0x7f72c2be8561:	call	0x7f72c0c198f6
----------------------------------------------------------------------------------------------------
At  0x7f72c2b88eec
0x7f72c2b88eec:	push	rbp
0x7f72c2b88eed:	mov	rbp, rsp
0x7f72c2b88ef0:	sub	rsp, 0x20
0x7f72c2b88ef4:	mov	qword ptr [rbp - 0x18], rdi
0x7f72c2b88ef8:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c2b88efc:	mov	rdi, rax
0x7f72c2b88eff:	call	0x7f72c2bbfda4
----------------------------------------------------------------------------------------------------
At  0x7f72c2bc1806
0x7f72c2bc1806:	push	rbp
0x7f72c2bc1807:	mov	rbp, rsp
0x7f72c2bc180a:	sub	rsp, 0x10
0x7f72c2bc180e:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bc1812:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bc1816:	mov	rdi, rax
0x7f72c2bc1819:	call	0x7f72c2319bfa
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj22_23_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj16_17_8 == 0>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj18_19_8 == 0>
20  <Bool uaf_obj20_21_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
24  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001061_5541_56{UNINITIALIZED} == 0xc00017>
30  <Bool mem_c0001060_5540_8{UNINITIALIZED} == 15>
31  <Bool !(mem_c000173f_5572_8{UNINITIALIZED} == 2)>
32  <Bool mem_c000171f_5610_8{UNINITIALIZED} == 15>
33  <Bool mem_c0001720_5611_56{UNINITIALIZED} == 0xc0001e>
34  <Bool mem_c0001e30_5655_56{UNINITIALIZED} == 0xc00025>
35  <Bool mem_c0001e2f_5654_8{UNINITIALIZED} == 15>
36  <Bool mem_c0002530_5685_56{UNINITIALIZED} == 0xc0002c>
37  <Bool mem_c000252f_5684_8{UNINITIALIZED} == 15>
38  <Bool mem_c0002c37_5722_8{UNINITIALIZED} == 15>
39  <Bool mem_c0002c38_5723_56{UNINITIALIZED} == 0xc00033>
40  <Bool mem_c0003438_5735_56{UNINITIALIZED} == 0x0>
41  <Bool mem_c0003437_5734_8{UNINITIALIZED} == 0>
42  <Bool mem_c0003310_5755_56{UNINITIALIZED} == 0xc0003a>
43  <Bool mem_c000330f_5754_8{UNINITIALIZED} == 15>
44  <Bool symbolic_call_2 == 0xc000410f>
45  <Bool symbolic_return_2_5788_64{UNINITIALIZED} == 0xc000410f>
46  <Bool !(mem_c0004128_5905_24{UNINITIALIZED}[9:9] == 0)>
47  <Bool mem_c0002c0f_6109_8{UNINITIALIZED} == 15>
48  <Bool mem_c0002c10_6110_56{UNINITIALIZED} == 0xc00048>
49  <Bool mem_c0004820_6278_56{UNINITIALIZED} == 0xc0004f>
50  <Bool mem_c000481f_6277_8{UNINITIALIZED} == 15>
51  <Bool mem_c0004f30_6630_56{UNINITIALIZED} == 0x0>
52  <Bool mem_c0004f2f_6629_8{UNINITIALIZED} == 0>
53  <Bool mem_c0004f0f_6953_8{UNINITIALIZED} == 15>
54  <Bool mem_c0004f10_6954_56{UNINITIALIZED} == 0xc00056>
55  <Bool symbolic_return_3_7039_64{UNINITIALIZED} == symbolic_call_3>
56  <Bool !(symbolic_return_3_7039_64{UNINITIALIZED}[7:0] == 0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
 <BV64 symbolic_return_2_5788_64{UNINITIALIZED}>
 <BV64 symbolic_return_3_7039_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          call
id              2
call_from       140130836912469
call            <BV64 mem_c0003cf8_5757_56{UNINITIALIZED} .. mem_c0003cf7_5756_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130870265190
call_id         2
write_to        <BV64 0x7fff6531b338>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_5788_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

4: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130827923178
call_id         2
write_to        <BV64 0x7fff6531b308>
write_size      <BV64 0x8>
value           <BV64 0x8 + symbolic_return_2_5788_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

5: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130827923189
call_id         2
read_from       <BV64 symbolic_return_2_5788_64{UNINITIALIZED} + 0x18>
read_size       4
value           <BV32 Reverse(mem_c0004127_5904_8{UNINITIALIZED} .. Reverse(mem_c0004128_5905_24{UNINITIALIZED}))>
----------------------------------------------------------------------------------------------------

6: 
----------------------------------------------------------------------------------------------------
access          call
id              3
call_from       140130870642839
call            <BV64 mem_c0005638_6956_56{UNINITIALIZED} .. mem_c0005637_6955_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x3>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x3>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965478
Calling  <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
10  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x3>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x2>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965517
Calling  <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Control hijack  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000ea9_5419_56{UNINITIALIZED} .. mem_c0000ea8_5418_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x158
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000ea8
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x178
<BV8 mem_c0000ea8_5418_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0000ea9_5419_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965703
Calling  <BV64 mem_c0000ea9_5419_56{UNINITIALIZED} .. mem_c0000ea8_5418_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj22_23_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj16_17_8 == 0>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj18_19_8 == 0>
20  <Bool uaf_obj20_21_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
24  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
25  <Bool !(mem_c0000380_5406_8{UNINITIALIZED} == 0) || !(mem_c0000381_5407_56{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Control hijack  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0002518_5473_56{UNINITIALIZED} .. mem_c0002517_5472_8{UNINITIALIZED}>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c00017d0_5441_56{UNINITIALIZED} .. mem_c00017cf_5440_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 mem_c00017d0_5441_56{UNINITIALIZED} .. mem_c00017cf_5440_8{UNINITIALIZED}>  r12: <BV64 0x1>
rdi: <BV64 mem_c00017d0_5441_56{UNINITIALIZED} .. mem_c00017cf_5440_8{UNINITIALIZED}>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b418>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b430>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x158
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000ea8
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x178
<BV8 mem_c0000ea8_5418_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x2c0     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c00017cf_5440_8{UNINITIALIZED}>  0x2c0
<BV8 mem_c00017c9_5448_8{UNINITIALIZED}>  0x2ba

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e0f_5470_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc0002a0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002517_5472_8{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                  points to
------------------------------------------------------  -----------
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>  0xc00017c7
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xc0>  0xc00017cf
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xba>  0xc00017c9
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>  0xc00017c7
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>  0xc00017c7
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xc0>  0xc00017cf
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  --------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0000ea9_5419_56{UNINITIALIZED}>
<BV64 symbolic_call_2>
<BV64 symbolic_return_2_5424_64{UNINITIALIZED}>
<BV8 mem_c00017c7_5430_8{UNINITIALIZED}>         0x7fff6531b457
<BV56 mem_c00017d0_5441_56{UNINITIALIZED}>
<BV56 mem_c0001e10_5471_56{UNINITIALIZED}>
<BV56 mem_c0002518_5473_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130810375816
Calling  <BV64 mem_c0002518_5473_56{UNINITIALIZED} .. mem_c0002517_5472_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72bf2cae32
0x7f72bf2cae32:	push	rbp
0x7f72bf2cae33:	mov	rbp, rsp
0x7f72bf2cae36:	sub	rsp, 0x10
0x7f72bf2cae3a:	mov	qword ptr [rbp - 8], rdi
0x7f72bf2cae3e:	mov	qword ptr [rbp - 0x10], rsi
0x7f72bf2cae42:	mov	rax, qword ptr [rbp - 8]
0x7f72bf2cae46:	mov	rdx, qword ptr [rbp - 0x10]
0x7f72bf2cae4a:	mov	rsi, rdx
0x7f72bf2cae4d:	mov	rdi, rax
0x7f72bf2cae50:	call	0x7f72bf1731c0
----------------------------------------------------------------------------------------------------
At  0x7f72c25a7056
0x7f72c25a7056:	push	rbp
0x7f72c25a7057:	mov	rbp, rsp
0x7f72c25a705a:	push	rbx
0x7f72c25a705b:	sub	rsp, 0xf8
0x7f72c25a7062:	mov	qword ptr [rbp - 0xf8], rdi
0x7f72c25a7069:	mov	eax, esi
0x7f72c25a706b:	mov	byte ptr [rbp - 0xfc], al
0x7f72c25a7071:	mov	rax, qword ptr fs:[0x28]
0x7f72c25a707a:	mov	qword ptr [rbp - 0x18], rax
0x7f72c25a707e:	xor	eax, eax
0x7f72c25a7080:	mov	rax, qword ptr [rbp - 0xf8]
0x7f72c25a7087:	mov	rax, qword ptr [rax + 0xc0]
0x7f72c25a708e:	test	rax, rax
0x7f72c25a7091:	je	0x7f72c25a779c
----------------------------------------------------------------------------------------------------
At  0x7f72c2319a88
0x7f72c2319a88:	push	rbp
0x7f72c2319a89:	mov	rbp, rsp
0x7f72c2319a8c:	sub	rsp, 0x10
0x7f72c2319a90:	mov	qword ptr [rbp - 8], rdi
0x7f72c2319a94:	mov	rax, qword ptr [rbp - 8]
0x7f72c2319a98:	mov	esi, 0
0x7f72c2319a9d:	mov	rdi, rax
0x7f72c2319aa0:	call	0x7f72c25a7056
----------------------------------------------------------------------------------------------------
At  0x7f72c2319af2
0x7f72c2319af2:	push	rbp
0x7f72c2319af3:	mov	rbp, rsp
0x7f72c2319af6:	sub	rsp, 0x10
0x7f72c2319afa:	mov	qword ptr [rbp - 8], rdi
0x7f72c2319afe:	mov	rax, qword ptr [rbp - 8]
0x7f72c2319b02:	movzx	eax, byte ptr [rax + 0xb8]
0x7f72c2319b09:	xor	eax, 1
0x7f72c2319b0c:	test	al, al
0x7f72c2319b0e:	jne	0x7f72c2319b1e
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj22_23_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj16_17_8 == 0>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj18_19_8 == 0>
20  <Bool uaf_obj20_21_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
24  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
25  <Bool !(mem_c0000380_5406_8{UNINITIALIZED} == 0) || !(mem_c0000381_5407_56{UNINITIALIZED} == 0x0)>
26  <Bool symbolic_call_2 == 0xc000170f>
27  <Bool symbolic_return_2_5424_64{UNINITIALIZED} == 0xc000170f>
28  <Bool mem_c00017c7_5430_8{UNINITIALIZED}[0:0] == 1>
29  <Bool mem_c00017c7_5430_8{UNINITIALIZED}[7:1] == 0>
30  <Bool mem_c00017d0_5441_56{UNINITIALIZED} == 0xc0001e>
31  <Bool mem_c00017cf_5440_8{UNINITIALIZED} == 15>
32  <Bool mem_c00017c9_5448_8{UNINITIALIZED} == 0>
33  <Bool mem_c0001e0f_5470_8{UNINITIALIZED} == 15>
34  <Bool mem_c0001e10_5471_56{UNINITIALIZED} == 0xc00025>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
 <BV64 symbolic_return_2_5424_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          call
id              2
call_from       140130869965703
call            <BV64 mem_c0000ea9_5419_56{UNINITIALIZED} .. mem_c0000ea8_5418_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130861030138
call_id         2
write_to        <BV64 0x7fff6531b578>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_5424_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

4: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130861030146
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>
read_size       1
value           <BV8 mem_c00017c7_5430_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

5: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130861030032
call_id         2
write_to        <BV64 0x7fff6531b558>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_5424_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

6: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130863706210
call_id         2
write_to        <BV64 0x7fff6531b448>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_5424_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

7: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130863706247
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xc0>
read_size       8
value           <BV64 Reverse(mem_c00017cf_5440_8{UNINITIALIZED} .. Reverse(mem_c00017d0_5441_56{UNINITIALIZED}))>
----------------------------------------------------------------------------------------------------

8: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130863706270
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xba>
read_size       1
value           <BV8 mem_c00017c9_5448_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

9: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130863706292
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>
read_size       1
value           <BV8 mem_c00017c7_5430_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

10: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_w
inst            140130863706312
call_id         2
write_to        <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>
write_size      <BV64 0x1>
value           <BV8 0>
----------------------------------------------------------------------------------------------------

11: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130863706326
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xc0>
read_size       8
value           <BV64 Reverse(mem_c00017cf_5440_8{UNINITIALIZED} .. Reverse(mem_c00017d0_5441_56{UNINITIALIZED}))>
----------------------------------------------------------------------------------------------------


Control hijack  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0003cf8_5757_56{UNINITIALIZED} .. mem_c0003cf7_5756_8{UNINITIALIZED}>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0002c38_5723_56{UNINITIALIZED} .. mem_c0002c37_5722_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 mem_c0002c38_5723_56{UNINITIALIZED} .. mem_c0002c37_5722_8{UNINITIALIZED}>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b2f8>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b310>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001060_5540_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x210     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000173f_5572_8{UNINITIALIZED}>  0x230
<BV8 mem_c000171f_5610_8{UNINITIALIZED}>  0x210

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e2f_5654_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc0002a0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000252f_5684_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c0f
maximum memory range     [  0xc0002a0f  ,  0xc000310f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x28      OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c37_5722_8{UNINITIALIZED}>  0x28

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc000330f
maximum memory range     [  0xc000310f  ,  0xc000380f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_9        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003437_5734_8{UNINITIALIZED}>  0x128
<BV8 mem_c000330f_5754_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0003a0f
maximum memory range     [  0xc000380f  ,  0xc0003f0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003cf7_5756_8{UNINITIALIZED}>  0x2e8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001061_5541_56{UNINITIALIZED}>
<BV56 mem_c0001720_5611_56{UNINITIALIZED}>
<BV56 mem_c0001e30_5655_56{UNINITIALIZED}>
<BV56 mem_c0002530_5685_56{UNINITIALIZED}>
<BV56 mem_c0002c38_5723_56{UNINITIALIZED}>
<BV56 mem_c0003438_5735_56{UNINITIALIZED}>
<BV56 mem_c0003310_5755_56{UNINITIALIZED}>
<BV56 mem_c0003cf8_5757_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130836912469
Calling  <BV64 mem_c0003cf8_5757_56{UNINITIALIZED} .. mem_c0003cf7_5756_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c0c198f6
0x7f72c0c198f6:	push	rbp
0x7f72c0c198f7:	mov	rbp, rsp
0x7f72c0c198fa:	sub	rsp, 0x10
0x7f72c0c198fe:	mov	qword ptr [rbp - 8], rdi
0x7f72c0c19902:	mov	rax, qword ptr [rbp - 8]
0x7f72c0c19906:	mov	rax, qword ptr [rax + 0x128]
0x7f72c0c1990d:	test	rax, rax
0x7f72c0c19910:	je	0x7f72c0c1993e
----------------------------------------------------------------------------------------------------
At  0x7f72c2be8532
0x7f72c2be8532:	push	rbp
0x7f72c2be8533:	mov	rbp, rsp
0x7f72c2be8536:	sub	rsp, 0x210
0x7f72c2be853d:	mov	qword ptr [rbp - 0x208], rdi
0x7f72c2be8544:	mov	rax, qword ptr fs:[0x28]
0x7f72c2be854d:	mov	qword ptr [rbp - 8], rax
0x7f72c2be8551:	xor	eax, eax
0x7f72c2be8553:	mov	rax, qword ptr [rbp - 0x208]
0x7f72c2be855a:	mov	rax, qword ptr [rax + 0x28]
0x7f72c2be855e:	mov	rdi, rax
0x7f72c2be8561:	call	0x7f72c0c198f6
----------------------------------------------------------------------------------------------------
At  0x7f72c2b88eec
0x7f72c2b88eec:	push	rbp
0x7f72c2b88eed:	mov	rbp, rsp
0x7f72c2b88ef0:	sub	rsp, 0x20
0x7f72c2b88ef4:	mov	qword ptr [rbp - 0x18], rdi
0x7f72c2b88ef8:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c2b88efc:	mov	rdi, rax
0x7f72c2b88eff:	call	0x7f72c2bbfda4
----------------------------------------------------------------------------------------------------
At  0x7f72c2bc1806
0x7f72c2bc1806:	push	rbp
0x7f72c2bc1807:	mov	rbp, rsp
0x7f72c2bc180a:	sub	rsp, 0x10
0x7f72c2bc180e:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bc1812:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bc1816:	mov	rdi, rax
0x7f72c2bc1819:	call	0x7f72c2319bfa
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj14_15_8 == 0>
2  <Bool uaf_obj8_9_8 == 0>
3  <Bool uaf_obj11_12_8 == 192>
4  <Bool uaf_obj12_13_8 == 0>
5  <Bool uaf_obj15_16_8 == 0>
6  <Bool uaf_obj9_10_8 == 2>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj13_14_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj22_23_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj16_17_8 == 0>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj18_19_8 == 0>
20  <Bool uaf_obj20_21_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
24  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001061_5541_56{UNINITIALIZED} == 0xc00017>
30  <Bool mem_c0001060_5540_8{UNINITIALIZED} == 15>
31  <Bool !(mem_c000173f_5572_8{UNINITIALIZED} == 2)>
32  <Bool mem_c000171f_5610_8{UNINITIALIZED} == 15>
33  <Bool mem_c0001720_5611_56{UNINITIALIZED} == 0xc0001e>
34  <Bool mem_c0001e30_5655_56{UNINITIALIZED} == 0xc00025>
35  <Bool mem_c0001e2f_5654_8{UNINITIALIZED} == 15>
36  <Bool mem_c0002530_5685_56{UNINITIALIZED} == 0xc0002c>
37  <Bool mem_c000252f_5684_8{UNINITIALIZED} == 15>
38  <Bool mem_c0002c37_5722_8{UNINITIALIZED} == 15>
39  <Bool mem_c0002c38_5723_56{UNINITIALIZED} == 0xc00033>
40  <Bool mem_c0003438_5735_56{UNINITIALIZED} == 0x0>
41  <Bool mem_c0003437_5734_8{UNINITIALIZED} == 0>
42  <Bool mem_c000330f_5754_8{UNINITIALIZED} == 15>
43  <Bool mem_c0003310_5755_56{UNINITIALIZED} == 0xc0003a>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


-----end dump executor-----
