-----start dump executor-----
Step:  250
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)       11
control_hijack (C)        10
active (A)               100
unconstrained (U)          0
errored (E)                0
found                      0
avoided                    0
paths to write primitive:  46
paths to control hijack:  59
first primitive after:  6
total paths:  830
****************************************************************************************************
Some errored states: 
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. mem_c000150f_5393_8{UNINITIALIZED}[7:1] .. 0>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b520>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b560>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I8 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I1 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I1 t24:Ity_I1

   00 | ------ IMark(0x7f72c2c471c7, 6, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x000000000000050f)
   03 | t8 = GET:I8(dl)
   04 | STle(t6) = t8
   05 | PUT(rip) = 0x00007f72c2c471cd
   06 | ------ IMark(0x7f72c2c471cd, 4, 0) ------
   07 | t10 = GET:I64(rbp)
   08 | t9 = Add64(t10,0xffffffffffffffc8)
   09 | t11 = LDle:I64(t9)
   10 | PUT(rip) = 0x00007f72c2c471d1
   11 | ------ IMark(0x7f72c2c471d1, 4, 0) ------
   12 | t12 = Add64(t11,0x0000000000000020)
   13 | t14 = LDle:I64(t12)
   14 | PUT(rax) = t14
   15 | ------ IMark(0x7f72c2c471d5, 3, 0) ------
   16 | PUT(cc_op) = 0x0000000000000014
   17 | PUT(cc_dep1) = t14
   18 | PUT(cc_dep2) = 0x0000000000000000
   19 | PUT(rip) = 0x00007f72c2c471d8
   20 | ------ IMark(0x7f72c2c471d8, 2, 0) ------
   21 | t23 = CmpEQ64(t14,0x0000000000000000)
   22 | t22 = 1Uto64(t23)
   23 | t20 = t22
   24 | t24 = 64to1(t20)
   25 | t15 = t24
   26 | if (t15) { PUT(rip) = 0x7f72c2c47230; Ijk_Boring }
   NEXT: PUT(rip) = 0x00007f72c2c471da; Ijk_Boring
}
0x7f72c2c471c7:	mov	byte ptr [rax + 0x50f], dl
0x7f72c2c471cd:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c471d1:	mov	rax, qword ptr [rax + 0x20]
0x7f72c2c471d5:	test	rax, rax
0x7f72c2c471d8:	je	0x7f72c2c47230
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130870653383
Write  <BV64 0x1>  bytes to  <BV64 (uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8) + 0x50f>
with expression : <BV8 mem_c000150f_5393_8{UNINITIALIZED}[7:1] .. 0>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2c47198
0x7f72c2c47198:	push	rbp
0x7f72c2c47199:	mov	rbp, rsp
0x7f72c2c4719c:	sub	rsp, 0x40
0x7f72c2c471a0:	mov	qword ptr [rbp - 0x38], rdi
0x7f72c2c471a4:	mov	dword ptr [rbp - 0x3c], esi
0x7f72c2c471a7:	mov	dword ptr [rbp - 0x40], edx
0x7f72c2c471aa:	mov	rax, qword ptr fs:[0x28]
0x7f72c2c471b3:	mov	qword ptr [rbp - 8], rax
0x7f72c2c471b7:	xor	eax, eax
0x7f72c2c471b9:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c471bd:	movzx	edx, byte ptr [rax + 0x50f]
0x7f72c2c471c4:	and	edx, 0xfffffffe
0x7f72c2c471c7:	mov	byte ptr [rax + 0x50f], dl
0x7f72c2c471cd:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c471d1:	mov	rax, qword ptr [rax + 0x20]
0x7f72c2c471d5:	test	rax, rax
0x7f72c2c471d8:	je	0x7f72c2c47230
----------------------------------------------------------------------------------------------------
At  0x7f72c2bbc192
0x7f72c2bbc192:	push	rbp
0x7f72c2bbc193:	mov	rbp, rsp
0x7f72c2bbc196:	sub	rsp, 0x10
0x7f72c2bbc19a:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bbc19e:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bbc1a2:	movzx	eax, byte ptr [rax + 0x50f]
0x7f72c2bbc1a9:	and	eax, 1
0x7f72c2bbc1ac:	test	al, al
0x7f72c2bbc1ae:	je	0x7f72c2bbc1c6
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool !(mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x1>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. mem_c00003b4_5397_8{UNINITIALIZED}[6:0]>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 0x7fff6531b540>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b520>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b580>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I8 t4:Ity_I64

   00 | ------ IMark(0x7f72c0c3875f, 6, 0) ------
   01 | t2 = GET:I64(rax)
   02 | t1 = Add64(t2,0x00000000000001b4)
   03 | t3 = GET:I8(dl)
   04 | STle(t1) = t3
   05 | ------ IMark(0x7f72c0c38765, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f72c0c38768; Ijk_Boring
}
0x7f72c0c3875f:	mov	byte ptr [rax + 0x1b4], dl
0x7f72c0c38765:	jmp	0x7f72c0c38768
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c00003b4_5397_8{UNINITIALIZED}>  0x1b4
<BV8 mem_c0000488_5414_8{UNINITIALIZED}>  0x288
<BV8 mem_c00003a0_5422_8{UNINITIALIZED}>  0x1a0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f
<BV56 mem_c0000489_5415_56{UNINITIALIZED}>
<BV56 mem_c00003a1_5423_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130837038943
Write  <BV64 0x1>  bytes to  <BV64 (uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8) + 0x1b4>
with expression : <BV8 (0x0 .. mem_c00003b4_5397_8{UNINITIALIZED}[6:0])[7:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c0c38524
0x7f72c0c38524:	push	rbp
0x7f72c0c38525:	mov	rbp, rsp
0x7f72c0c38528:	push	r12
0x7f72c0c3852a:	push	rbx
0x7f72c0c3852b:	sub	rsp, 0x50
0x7f72c0c3852f:	mov	qword ptr [rbp - 0x58], rdi
0x7f72c0c38533:	mov	rax, qword ptr fs:[0x28]
0x7f72c0c3853c:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0c38540:	xor	eax, eax
0x7f72c0c38542:	mov	rax, qword ptr [rbp - 0x58]
0x7f72c0c38546:	movzx	eax, byte ptr [rax + 0x1b5]
0x7f72c0c3854d:	and	eax, 1
0x7f72c0c38550:	xor	eax, 1
0x7f72c0c38553:	test	al, al
0x7f72c0c38555:	jne	0x7f72c0c38767
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1>
23  <Bool !(mem_c00003b4_5397_8{UNINITIALIZED}[7:7] == 0)>
24  <Bool !(mem_c0000488_5414_8{UNINITIALIZED} == 0) || !(mem_c0000489_5415_56{UNINITIALIZED} == 0x0)>
25  <Bool mem_c00003a0_5422_8{UNINITIALIZED} == 0>
26  <Bool mem_c00003a1_5423_56{UNINITIALIZED} == 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x0>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. mem_c000150f_5393_8{UNINITIALIZED}[6:0]>  r11: <BV64 0x1>
rsi: <BV64 0xffff>  r12: <BV64 0x1>
rdi: <BV64 0x7fff6531b4e0>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b540>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b580>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I8 t4:Ity_I64

   00 | ------ IMark(0x7f72c2c47bf4, 6, 0) ------
   01 | t2 = GET:I64(rax)
   02 | t1 = Add64(t2,0x000000000000050f)
   03 | t3 = GET:I8(dl)
   04 | STle(t1) = t3
   05 | ------ IMark(0x7f72c2c47bfa, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f72c2c47c00; Ijk_Boring
}
0x7f72c2c47bf4:	mov	byte ptr [rax + 0x50f], dl
0x7f72c2c47bfa:	jmp	0x7f72c2c47c00
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x68      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001068_5402_8{UNINITIALIZED}>  0x68

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000172f_5408_8{UNINITIALIZED}>  0x220
<BV8 mem_c0001737_5450_8{UNINITIALIZED}>  0x228
<BV8 mem_c000172b_5488_8{UNINITIALIZED}>  0x21c

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0001069_5403_56{UNINITIALIZED}>
<BV24 mem_c0001730_5409_24{UNINITIALIZED}>
<BV56 mem_c0001738_5451_56{UNINITIALIZED}>
<BV24 mem_c000172c_5489_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130870655988
Write  <BV64 0x1>  bytes to  <BV64 (uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8) + 0x50f>
with expression : <BV8 (0x0 .. mem_c000150f_5393_8{UNINITIALIZED}[6:0])[7:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2c47a7a
0x7f72c2c47a7a:	push	rbp
0x7f72c2c47a7b:	mov	rbp, rsp
0x7f72c2c47a7e:	push	r14
0x7f72c2c47a80:	push	r13
0x7f72c2c47a82:	push	r12
0x7f72c2c47a84:	push	rbx
0x7f72c2c47a85:	sub	rsp, 0x20
0x7f72c2c47a89:	mov	qword ptr [rbp - 0x38], rdi
0x7f72c2c47a8d:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c47a91:	mov	rax, qword ptr [rax + 0x20]
0x7f72c2c47a95:	test	rax, rax
0x7f72c2c47a98:	je	0x7f72c2c47bfc
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c000150f_5393_8{UNINITIALIZED}[7:7] == 0)>
23  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
24  <Bool !(mem_c0001020_5398_8{UNINITIALIZED} == 0) || !(mem_c0001021_5399_56{UNINITIALIZED} == 0x0)>
25  <Bool mem_c0001069_5403_56{UNINITIALIZED} == 0xc00017>
26  <Bool mem_c0001068_5402_8{UNINITIALIZED} == 15>
27  <Bool mem_c000172f_5408_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001730_5409_24{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001738_5451_56{UNINITIALIZED} == 0x0>
30  <Bool mem_c0001737_5450_8{UNINITIALIZED} == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c00017d0_5669_56{UNINITIALIZED} .. mem_c00017cf_5668_8{UNINITIALIZED}>  r8: <BV64 0x2>
rbx: <BV64 mem_c00017d0_5669_56{UNINITIALIZED} .. mem_c00017cf_5668_8{UNINITIALIZED}>  r9: <BV64 0x0>
rcx: <BV64 0x0>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. mem_c0001e16_5936_8{UNINITIALIZED}[6:0]>  r11: <BV64 0x1>
rsi: <BV64 0x10>  r12: <BV64 0x1>
rdi: <BV64 0x7fff6531b110>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b060>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b080>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I8 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I64

   00 | ------ IMark(0x7f72bf167bd2, 3, 0) ------
   01 | t12 = GET:I64(rax)
   02 | t11 = Add64(t12,0x0000000000000007)
   03 | t13 = GET:I8(dl)
   04 | STle(t11) = t13
   05 | ------ IMark(0x7f72bf167bd5, 1, 0) ------
   06 | ------ IMark(0x7f72bf167bd6, 4, 0) ------
   07 | t3 = GET:I64(rsp)
   08 | t1 = Add64(t3,0x0000000000000018)
   09 | PUT(cc_op) = 0x0000000000000004
   10 | PUT(cc_dep1) = t3
   11 | PUT(cc_dep2) = 0x0000000000000018
   12 | PUT(rsp) = t1
   13 | PUT(rip) = 0x00007f72bf167bda
   14 | ------ IMark(0x7f72bf167bda, 1, 0) ------
   15 | t4 = LDle:I64(t1)
   16 | t14 = Add64(t1,0x0000000000000008)
   17 | PUT(rsp) = t14
   18 | PUT(rbx) = t4
   19 | PUT(rip) = 0x00007f72bf167bdb
   20 | ------ IMark(0x7f72bf167bdb, 1, 0) ------
   21 | t6 = LDle:I64(t14)
   22 | t15 = Add64(t14,0x0000000000000008)
   23 | PUT(rsp) = t15
   24 | PUT(rbp) = t6
   25 | PUT(rip) = 0x00007f72bf167bdc
   26 | ------ IMark(0x7f72bf167bdc, 1, 0) ------
   27 | t9 = LDle:I64(t15)
   28 | t10 = Add64(t15,0x0000000000000008)
   29 | PUT(rsp) = t10
   30 | t16 = Sub64(t10,0x0000000000000080)
   31 | ====== AbiHint(0xt16, 128, t9) ======
   NEXT: PUT(rip) = t9; Ijk_Ret
}
0x7f72bf167bd2:	mov	byte ptr [rax + 7], dl
0x7f72bf167bd5:	nop	
0x7f72bf167bd6:	add	rsp, 0x18
0x7f72bf167bda:	pop	rbx
0x7f72bf167bdb:	pop	rbp
0x7f72bf167bdc:	ret	
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
0x1a0     OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c00003b4_5397_8{UNINITIALIZED}>  0x1b4
<BV8 mem_c0000488_5414_8{UNINITIALIZED}>  0x288
<BV8 mem_c00003a0_5422_8{UNINITIALIZED}>  0x1a0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x2c0     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e0f_5670_8{UNINITIALIZED}>  0x0
<BV8 mem_c0001e16_5936_8{UNINITIALIZED}>  0x7

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                                    points to
----------------------------------------------------------------------------------------  -----------
<BV64 (mem_c00017d0_5669_56{UNINITIALIZED} .. mem_c00017cf_5668_8{UNINITIALIZED}) + 0x7>  0xc0001e16
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  --------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0000489_5415_56{UNINITIALIZED}>
<BV56 mem_c00003a1_5423_56{UNINITIALIZED}>
<BV8 mem_c00017e0_5454_8{UNINITIALIZED}>         0x7fff6531b3e7
<BV8 mem_c00017cf_5668_8{UNINITIALIZED}>
<BV56 mem_c00017d0_5669_56{UNINITIALIZED}>
<BV24 mem_c0001e10_5671_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130808921042
Write  <BV64 0x1>  bytes to  <BV64 (mem_c00017d0_5669_56{UNINITIALIZED} .. mem_c00017cf_5668_8{UNINITIALIZED}) + 0x7>
with expression : <BV8 (0x0 .. mem_c0001e16_5936_8{UNINITIALIZED}[6:0])[7:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72bf167b26
0x7f72bf167b26:	push	rbp
0x7f72bf167b27:	mov	rbp, rsp
0x7f72bf167b2a:	push	rbx
0x7f72bf167b2b:	sub	rsp, 0x18
0x7f72bf167b2f:	mov	qword ptr [rbp - 0x18], rdi
0x7f72bf167b33:	mov	rax, qword ptr [rbp - 0x18]
0x7f72bf167b37:	movzx	eax, byte ptr [rax + 0x10]
0x7f72bf167b3b:	test	al, al
0x7f72bf167b3d:	je	0x7f72bf167b5a
----------------------------------------------------------------------------------------------------
At  0x7f72bf1656a4
0x7f72bf1656a4:	push	rbp
0x7f72bf1656a5:	mov	rbp, rsp
0x7f72bf1656a8:	push	r15
0x7f72bf1656aa:	push	r14
0x7f72bf1656ac:	push	r13
0x7f72bf1656ae:	push	r12
0x7f72bf1656b0:	push	rbx
0x7f72bf1656b1:	sub	rsp, 0x2c8
0x7f72bf1656b8:	mov	qword ptr [rbp - 0x2d8], rdi
0x7f72bf1656bf:	mov	qword ptr [rbp - 0x2e0], rsi
0x7f72bf1656c6:	mov	qword ptr [rbp - 0x2e8], rdx
0x7f72bf1656cd:	mov	qword ptr [rbp - 0x2f0], rcx
0x7f72bf1656d4:	mov	rax, qword ptr fs:[0x28]
0x7f72bf1656dd:	mov	qword ptr [rbp - 0x38], rax
0x7f72bf1656e1:	xor	eax, eax
0x7f72bf1656e3:	mov	rdx, qword ptr [rbp - 0x2f0]
0x7f72bf1656ea:	mov	rcx, qword ptr [rbp - 0x2d8]
0x7f72bf1656f1:	lea	rax, [rbp - 0x290]
0x7f72bf1656f8:	mov	rsi, rcx
0x7f72bf1656fb:	mov	rdi, rax
0x7f72bf1656fe:	call	0x7f72bf167ae2
----------------------------------------------------------------------------------------------------
At  0x7f72c29f6926
0x7f72c29f6926:	push	rbp
0x7f72c29f6927:	mov	rbp, rsp
0x7f72c29f692a:	push	rbx
0x7f72c29f692b:	sub	rsp, 0x28
0x7f72c29f692f:	mov	qword ptr [rbp - 0x28], rdi
0x7f72c29f6933:	mov	qword ptr [rbp - 0x30], rsi
0x7f72c29f6937:	mov	rax, qword ptr fs:[0x28]
0x7f72c29f6940:	mov	qword ptr [rbp - 0x18], rax
0x7f72c29f6944:	xor	eax, eax
0x7f72c29f6946:	mov	rax, qword ptr [rbp - 0x28]
0x7f72c29f694a:	mov	rsi, qword ptr [rbp - 0x30]
0x7f72c29f694e:	mov	ecx, 8
0x7f72c29f6953:	mov	edx, 0x10
0x7f72c29f6958:	mov	rdi, rax
0x7f72c29f695b:	call	0x7f72bf1656a4
----------------------------------------------------------------------------------------------------
At  0x7f72c29db2ea
0x7f72c29db2ea:	push	rbp
0x7f72c29db2eb:	mov	rbp, rsp
0x7f72c29db2ee:	push	r13
0x7f72c29db2f0:	push	r12
0x7f72c29db2f2:	push	rbx
0x7f72c29db2f3:	sub	rsp, 0x128
0x7f72c29db2fa:	mov	qword ptr [rbp - 0x138], rdi
0x7f72c29db301:	mov	qword ptr [rbp - 0x140], rsi
0x7f72c29db308:	mov	rax, qword ptr fs:[0x28]
0x7f72c29db311:	mov	qword ptr [rbp - 0x28], rax
0x7f72c29db315:	xor	eax, eax
0x7f72c29db317:	mov	rax, qword ptr [rbp - 0x138]
0x7f72c29db31e:	movzx	eax, byte ptr [rax + 0xd1]
0x7f72c29db325:	mov	byte ptr [rbp - 0x129], al
0x7f72c29db32b:	mov	rax, qword ptr [rbp - 0x138]
0x7f72c29db332:	mov	byte ptr [rax + 0xd1], 0
0x7f72c29db339:	lea	rax, [rbp - 0xc0]
0x7f72c29db340:	mov	rdi, rax
0x7f72c29db343:	call	0x7f72c29f6888
----------------------------------------------------------------------------------------------------
At  0x7f72c0c38524
0x7f72c0c38524:	push	rbp
0x7f72c0c38525:	mov	rbp, rsp
0x7f72c0c38528:	push	r12
0x7f72c0c3852a:	push	rbx
0x7f72c0c3852b:	sub	rsp, 0x50
0x7f72c0c3852f:	mov	qword ptr [rbp - 0x58], rdi
0x7f72c0c38533:	mov	rax, qword ptr fs:[0x28]
0x7f72c0c3853c:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0c38540:	xor	eax, eax
0x7f72c0c38542:	mov	rax, qword ptr [rbp - 0x58]
0x7f72c0c38546:	movzx	eax, byte ptr [rax + 0x1b5]
0x7f72c0c3854d:	and	eax, 1
0x7f72c0c38550:	xor	eax, 1
0x7f72c0c38553:	test	al, al
0x7f72c0c38555:	jne	0x7f72c0c38767
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1>
23  <Bool !(mem_c00003b4_5397_8{UNINITIALIZED}[7:7] == 0)>
24  <Bool !(mem_c0000488_5414_8{UNINITIALIZED} == 0) || !(mem_c0000489_5415_56{UNINITIALIZED} == 0x0)>
25  <Bool mem_c00003a0_5422_8{UNINITIALIZED} == 15>
26  <Bool mem_c00003a1_5423_56{UNINITIALIZED} == 0xc00017>
27  <Bool mem_c00017d0_5669_56{UNINITIALIZED} == 0xc0001e>
28  <Bool mem_c00017cf_5668_8{UNINITIALIZED} == 15>
29  <Bool mem_c0001e0f_5670_8{UNINITIALIZED} == 0>
30  <Bool mem_c0001e10_5671_24{UNINITIALIZED} == 0x0>
31  <Bool mem_c0001e16_5936_8{UNINITIALIZED}[7:7] == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0xc0002a0f + (0x0 .. 0x18 * (0x0 .. 0xfffffffe + 0xe35e67b1 * (0x63779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[18:0] .. mem_c000254f_6434_8{UNINITIALIZED}) ^ mem_c0002550_6435_56{UNINITIALIZED}[55:29] .. 0x9e3779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[23:0] .. mem_c000254f_6434_8{UNINITIALIZED})[31:27] ^ mem_c0002550_6435_56{UNINITIALIZED}[28:24])[31:29]))>  r8: <BV64 0x2>
rbx: <BV64 0x0>  r9: <BV64 0x0>
rcx: <BV64 mem_c0002550_6435_56{UNINITIALIZED} .. mem_c000254f_6434_8{UNINITIALIZED}>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0002550_6435_56{UNINITIALIZED} .. mem_c000254f_6434_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 mem_c0002550_6435_56{UNINITIALIZED} .. mem_c000254f_6434_8{UNINITIALIZED}>  r12: <BV64 0x1>
rdi: <BV64 0xc0002a0f + (0x0 .. 0x18 * (0x0 .. 0xfffffffe + 0xe35e67b1 * (0x63779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[18:0] .. mem_c000254f_6434_8{UNINITIALIZED}) ^ mem_c0002550_6435_56{UNINITIALIZED}[55:29] .. 0x9e3779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[23:0] .. mem_c000254f_6434_8{UNINITIALIZED})[31:27] ^ mem_c0002550_6435_56{UNINITIALIZED}[28:24])[31:29]))>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b240>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b240>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64

   00 | ------ IMark(0x7f72c2a0149c, 4, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x0000000000000008)
   03 | t8 = GET:I64(rdx)
   04 | STle(t6) = t8
   05 | ------ IMark(0x7f72c2a014a0, 1, 0) ------
   06 | PUT(rip) = 0x00007f72c2a014a1
   07 | ------ IMark(0x7f72c2a014a1, 1, 0) ------
   08 | t2 = GET:I64(rsp)
   09 | t1 = LDle:I64(t2)
   10 | t9 = Add64(t2,0x0000000000000008)
   11 | PUT(rsp) = t9
   12 | PUT(rbp) = t1
   13 | PUT(rip) = 0x00007f72c2a014a2
   14 | ------ IMark(0x7f72c2a014a2, 1, 0) ------
   15 | t4 = LDle:I64(t9)
   16 | t5 = Add64(t9,0x0000000000000008)
   17 | PUT(rsp) = t5
   18 | t10 = Sub64(t5,0x0000000000000080)
   19 | ====== AbiHint(0xt10, 128, t4) ======
   NEXT: PUT(rip) = t4; Ijk_Ret
}
0x7f72c2a0149c:	mov	qword ptr [rax + 8], rdx
0x7f72c2a014a0:	nop	
0x7f72c2a014a1:	pop	rbp
0x7f72c2a014a2:	ret	
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
0x1a0     OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c00003b4_5397_8{UNINITIALIZED}>  0x1b4
<BV8 mem_c0000488_5414_8{UNINITIALIZED}>  0x288
<BV8 mem_c00003a0_5422_8{UNINITIALIZED}>  0x1a0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x2c0     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c00017cf_5668_8{UNINITIALIZED}>  0x2c0

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x18      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e0f_5670_8{UNINITIALIZED}>  0x0
<BV8 mem_c0001e17_5973_8{UNINITIALIZED}>  0x8
<BV8 mem_c0001e27_6375_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc0002a0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000254f_6434_8{UNINITIALIZED}>  0x40

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                                                                                                                                                                                                                                                                                                                                            points to
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  -----------
<BV64 0xc0002a0f + (0x0 .. 0x18 * (0x0 .. 0xfffffffe + 0xe35e67b1 * (0x63779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[18:0] .. mem_c000254f_6434_8{UNINITIALIZED}) ^ mem_c0002550_6435_56{UNINITIALIZED}[55:29] .. 0x9e3779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[23:0] .. mem_c000254f_6434_8{UNINITIALIZED})[31:27] ^ mem_c0002550_6435_56{UNINITIALIZED}[28:24])[31:29]))>  0xc0002ab7
<BV64 0xc0002a0f + (0x0 .. 0x18 * (0x0 .. 0xfffffffe + 0xe35e67b1 * (0x63779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[18:0] .. mem_c000254f_6434_8{UNINITIALIZED}) ^ mem_c0002550_6435_56{UNINITIALIZED}[55:29] .. 0x9e3779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[23:0] .. mem_c000254f_6434_8{UNINITIALIZED})[31:27] ^ mem_c0002550_6435_56{UNINITIALIZED}[28:24])[31:29]))>  0xc0002ab7
<BV64 0xc0002a0f + (0x0 .. 0x18 * (0x0 .. 0xfffffffe + 0xe35e67b1 * (0x63779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[18:0] .. mem_c000254f_6434_8{UNINITIALIZED}) ^ mem_c0002550_6435_56{UNINITIALIZED}[55:29] .. 0x9e3779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[23:0] .. mem_c000254f_6434_8{UNINITIALIZED})[31:27] ^ mem_c0002550_6435_56{UNINITIALIZED}[28:24])[31:29]))>  0xc0002ab7
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  --------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0000489_5415_56{UNINITIALIZED}>
<BV56 mem_c00003a1_5423_56{UNINITIALIZED}>
<BV8 mem_c00017e0_5454_8{UNINITIALIZED}>         0x7fff6531b3e7
<BV56 mem_c00017d0_5669_56{UNINITIALIZED}>
<BV24 mem_c0001e10_5671_24{UNINITIALIZED}>
<BV56 mem_c0001e18_5974_56{UNINITIALIZED}>
<BV56 mem_c0001e28_6376_56{UNINITIALIZED}>
<BV56 mem_c0002550_6435_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130868270236
Write  <BV64 0x8>  bytes to  <BV64 (0x0 .. 0x18 * (0x0 .. 0xfffffffe + 0xe35e67b1 * (0x63779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[18:0] .. mem_c000254f_6434_8{UNINITIALIZED}) ^ mem_c0002550_6435_56{UNINITIALIZED}[55:29] .. 0x9e3779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[23:0] .. mem_c000254f_6434_8{UNINITIALIZED})[31:27] ^ mem_c0002550_6435_56{UNINITIALIZED}[28:24])[31:29])) + 0xc0002a17>
with expression : <BV64 mem_c0002550_6435_56{UNINITIALIZED} .. mem_c000254f_6434_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2a01488
0x7f72c2a01488:	push	rbp
0x7f72c2a01489:	mov	rbp, rsp
0x7f72c2a0148c:	mov	qword ptr [rbp - 8], rdi
0x7f72c2a01490:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2a01494:	mov	rax, qword ptr [rbp - 8]
0x7f72c2a01498:	mov	rdx, qword ptr [rbp - 0x10]
0x7f72c2a0149c:	mov	qword ptr [rax + 8], rdx
0x7f72c2a014a0:	nop	
0x7f72c2a014a1:	pop	rbp
0x7f72c2a014a2:	ret	
----------------------------------------------------------------------------------------------------
At  0x7f72c2a012a8
0x7f72c2a012a8:	push	rbp
0x7f72c2a012a9:	mov	rbp, rsp
0x7f72c2a012ac:	sub	rsp, 0x10
0x7f72c2a012b0:	mov	qword ptr [rbp - 8], rdi
0x7f72c2a012b4:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2a012b8:	mov	rax, qword ptr [rbp - 8]
0x7f72c2a012bc:	mov	rdx, qword ptr [rbp - 0x10]
0x7f72c2a012c0:	mov	rsi, rdx
0x7f72c2a012c3:	mov	rdi, rax
0x7f72c2a012c6:	call	0x7f72c2a01488
----------------------------------------------------------------------------------------------------
At  0x7f72c2a00df8
0x7f72c2a00df8:	push	rbp
0x7f72c2a00df9:	mov	rbp, rsp
0x7f72c2a00dfc:	sub	rsp, 0x10
0x7f72c2a00e00:	mov	qword ptr [rbp - 8], rdi
0x7f72c2a00e04:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2a00e08:	mov	rax, qword ptr [rbp - 8]
0x7f72c2a00e0c:	mov	rdx, rax
0x7f72c2a00e0f:	mov	esi, 0
0x7f72c2a00e14:	mov	edi, 0x18
0x7f72c2a00e19:	call	0x7f72bf14e7f6
----------------------------------------------------------------------------------------------------
At  0x7f72bf21da76
0x7f72bf21da76:	push	rbp
0x7f72bf21da77:	mov	rbp, rsp
0x7f72bf21da7a:	push	rbx
0x7f72bf21da7b:	sub	rsp, 0x68
0x7f72bf21da7f:	mov	qword ptr [rbp - 0x58], rdi
0x7f72bf21da83:	mov	qword ptr [rbp - 0x60], rsi
0x7f72bf21da87:	mov	qword ptr [rbp - 0x68], rdx
0x7f72bf21da8b:	mov	rax, qword ptr fs:[0x28]
0x7f72bf21da94:	mov	qword ptr [rbp - 0x18], rax
0x7f72bf21da98:	xor	eax, eax
0x7f72bf21da9a:	mov	rax, qword ptr [rbp - 0x58]
0x7f72bf21da9e:	add	rax, 0x18
0x7f72bf21daa2:	mov	rdi, rax
0x7f72bf21daa5:	call	0x7f72bf229428
----------------------------------------------------------------------------------------------------
At  0x7f72c29feedc
0x7f72c29feedc:	push	rbp
0x7f72c29feedd:	mov	rbp, rsp
0x7f72c29feee0:	push	rbx
0x7f72c29feee1:	sub	rsp, 0x28
0x7f72c29feee5:	mov	qword ptr [rbp - 0x18], rdi
0x7f72c29feee9:	mov	qword ptr [rbp - 0x20], rsi
0x7f72c29feeed:	mov	qword ptr [rbp - 0x28], rdx
0x7f72c29feef1:	mov	rbx, qword ptr [rbp - 0x18]
0x7f72c29feef5:	mov	rax, qword ptr [rbp - 0x20]
0x7f72c29feef9:	mov	rdi, rax
0x7f72c29feefc:	call	0x7f72c29fef38
----------------------------------------------------------------------------------------------------
At  0x7f72c29fbecc
0x7f72c29fbecc:	push	rbp
0x7f72c29fbecd:	mov	rbp, rsp
0x7f72c29fbed0:	sub	rsp, 0x30
0x7f72c29fbed4:	mov	qword ptr [rbp - 0x18], rdi
0x7f72c29fbed8:	mov	qword ptr [rbp - 0x20], rsi
0x7f72c29fbedc:	mov	qword ptr [rbp - 0x28], rdx
0x7f72c29fbee0:	mov	qword ptr [rbp - 0x30], rcx
0x7f72c29fbee4:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c29fbee8:	mov	rcx, qword ptr [rbp - 0x20]
0x7f72c29fbeec:	lea	rdx, [rip + 0x4bbd3c5]
0x7f72c29fbef3:	mov	rsi, rcx
0x7f72c29fbef6:	mov	rdi, rax
0x7f72c29fbef9:	call	0x7f72c29feedc
----------------------------------------------------------------------------------------------------
At  0x7f72c29f68c0
0x7f72c29f68c0:	push	rbp
0x7f72c29f68c1:	mov	rbp, rsp
0x7f72c29f68c4:	push	rbx
0x7f72c29f68c5:	sub	rsp, 0x28
0x7f72c29f68c9:	mov	qword ptr [rbp - 0x18], rdi
0x7f72c29f68cd:	mov	qword ptr [rbp - 0x20], rsi
0x7f72c29f68d1:	mov	qword ptr [rbp - 0x28], rdx
0x7f72c29f68d5:	mov	rdx, qword ptr [rbp - 0x28]
0x7f72c29f68d9:	mov	rsi, qword ptr [rbp - 0x20]
0x7f72c29f68dd:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c29f68e1:	lea	rcx, [rip + 0x4bc29d0]
0x7f72c29f68e8:	mov	rdi, rax
0x7f72c29f68eb:	call	0x7f72c29fbecc
----------------------------------------------------------------------------------------------------
At  0x7f72c29db2ea
0x7f72c29db2ea:	push	rbp
0x7f72c29db2eb:	mov	rbp, rsp
0x7f72c29db2ee:	push	r13
0x7f72c29db2f0:	push	r12
0x7f72c29db2f2:	push	rbx
0x7f72c29db2f3:	sub	rsp, 0x128
0x7f72c29db2fa:	mov	qword ptr [rbp - 0x138], rdi
0x7f72c29db301:	mov	qword ptr [rbp - 0x140], rsi
0x7f72c29db308:	mov	rax, qword ptr fs:[0x28]
0x7f72c29db311:	mov	qword ptr [rbp - 0x28], rax
0x7f72c29db315:	xor	eax, eax
0x7f72c29db317:	mov	rax, qword ptr [rbp - 0x138]
0x7f72c29db31e:	movzx	eax, byte ptr [rax + 0xd1]
0x7f72c29db325:	mov	byte ptr [rbp - 0x129], al
0x7f72c29db32b:	mov	rax, qword ptr [rbp - 0x138]
0x7f72c29db332:	mov	byte ptr [rax + 0xd1], 0
0x7f72c29db339:	lea	rax, [rbp - 0xc0]
0x7f72c29db340:	mov	rdi, rax
0x7f72c29db343:	call	0x7f72c29f6888
----------------------------------------------------------------------------------------------------
At  0x7f72c0c38524
0x7f72c0c38524:	push	rbp
0x7f72c0c38525:	mov	rbp, rsp
0x7f72c0c38528:	push	r12
0x7f72c0c3852a:	push	rbx
0x7f72c0c3852b:	sub	rsp, 0x50
0x7f72c0c3852f:	mov	qword ptr [rbp - 0x58], rdi
0x7f72c0c38533:	mov	rax, qword ptr fs:[0x28]
0x7f72c0c3853c:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0c38540:	xor	eax, eax
0x7f72c0c38542:	mov	rax, qword ptr [rbp - 0x58]
0x7f72c0c38546:	movzx	eax, byte ptr [rax + 0x1b5]
0x7f72c0c3854d:	and	eax, 1
0x7f72c0c38550:	xor	eax, 1
0x7f72c0c38553:	test	al, al
0x7f72c0c38555:	jne	0x7f72c0c38767
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1>
23  <Bool !(mem_c00003b4_5397_8{UNINITIALIZED}[7:7] == 0)>
24  <Bool !(mem_c0000488_5414_8{UNINITIALIZED} == 0) || !(mem_c0000489_5415_56{UNINITIALIZED} == 0x0)>
25  <Bool mem_c00003a0_5422_8{UNINITIALIZED} == 15>
26  <Bool mem_c00003a1_5423_56{UNINITIALIZED} == 0xc00017>
27  <Bool mem_c00017cf_5668_8{UNINITIALIZED} == 15>
28  <Bool mem_c00017d0_5669_56{UNINITIALIZED} == 0xc0001e>
29  <Bool !(mem_c0001e0f_5670_8{UNINITIALIZED}[7:1] == 0) || !(mem_c0001e10_5671_24{UNINITIALIZED} == 0x0)>
30  <Bool mem_c0001e17_5973_8{UNINITIALIZED} == 0>
31  <Bool mem_c0001e18_5974_56{UNINITIALIZED} == 0x0>
32  <Bool mem_c0001e27_6375_8{UNINITIALIZED} == 15>
33  <Bool mem_c0001e28_6376_56{UNINITIALIZED} == 0xc00025>
34  <Bool 0xe35e67b1 * (0x63779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[18:0] .. mem_c000254f_6434_8{UNINITIALIZED}) ^ mem_c0002550_6435_56{UNINITIALIZED}[55:29] .. 0x9e3779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[23:0] .. mem_c000254f_6434_8{UNINITIALIZED})[31:27] ^ mem_c0002550_6435_56{UNINITIALIZED}[28:24])[31:1] == 0x0>
35  <Bool 0x18 * (0x0 .. 0xfffffffe + 0xe35e67b1 * (0x63779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[18:0] .. mem_c000254f_6434_8{UNINITIALIZED}) ^ mem_c0002550_6435_56{UNINITIALIZED}[55:29] .. 0x9e3779b9 * (mem_c0002550_6435_56{UNINITIALIZED}[23:0] .. mem_c000254f_6434_8{UNINITIALIZED})[31:27] ^ mem_c0002550_6435_56{UNINITIALIZED}[28:24])[31:29]) == 0xa8>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  5
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x0 .. mem_c000176f_6838_8{UNINITIALIZED}>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x0>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x1 + (mem_c0001748_6855_56{UNINITIALIZED} .. mem_c0001747_6854_8{UNINITIALIZED})>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 0x1>
rdi: <BV64 mem_c0001e50_6682_56{UNINITIALIZED} .. mem_c0001e4f_6681_8{UNINITIALIZED}>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b2c0>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b540>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I8 t4:Ity_I8 t5:Ity_I8 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I32 t16:Ity_I8 t17:Ity_I64 t18:Ity_I1 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I32 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I1 t30:Ity_I64 t31:Ity_I1

   00 | ------ IMark(0x7f72c2bb8c51, 4, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x0000000000000038)
   03 | t8 = GET:I64(rdx)
   04 | STle(t6) = t8
   05 | PUT(rip) = 0x00007f72c2bb8c55
   06 | ------ IMark(0x7f72c2bb8c55, 7, 0) ------
   07 | t10 = GET:I64(rbp)
   08 | t9 = Add64(t10,0xfffffffffffffd88)
   09 | t11 = LDle:I64(t9)
   10 | PUT(rip) = 0x00007f72c2bb8c5c
   11 | ------ IMark(0x7f72c2bb8c5c, 4, 0) ------
   12 | t12 = Add64(t11,0x0000000000000061)
   13 | t16 = LDle:I8(t12)
   14 | t25 = 8Uto32(t16)
   15 | t15 = t25
   16 | t26 = 32Uto64(t15)
   17 | t14 = t26
   18 | PUT(rax) = t14
   19 | ------ IMark(0x7f72c2bb8c60, 2, 0) ------
   20 | t5 = GET:I8(al)
   21 | PUT(cc_op) = 0x0000000000000011
   22 | t27 = 8Uto64(t5)
   23 | t17 = t27
   24 | PUT(cc_dep1) = t17
   25 | PUT(cc_dep2) = 0x0000000000000000
   26 | PUT(rip) = 0x00007f72c2bb8c62
   27 | ------ IMark(0x7f72c2bb8c62, 2, 0) ------
   28 | t30 = And64(t17,0x00000000000000ff)
   29 | t29 = CmpEQ64(t30,0x0000000000000000)
   30 | t28 = 1Uto64(t29)
   31 | t23 = t28
   32 | t31 = 64to1(t23)
   33 | t18 = t31
   34 | if (t18) { PUT(rip) = 0x7f72c2bb8c78; Ijk_Boring }
   NEXT: PUT(rip) = 0x00007f72c2bb8c64; Ijk_Boring
}
0x7f72c2bb8c51:	mov	qword ptr [rax + 0x38], rdx
0x7f72c2bb8c55:	mov	rax, qword ptr [rbp - 0x278]
0x7f72c2bb8c5c:	movzx	eax, byte ptr [rax + 0x61]
0x7f72c2bb8c60:	test	al, al
0x7f72c2bb8c62:	je	0x7f72c2bb8c78
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001060_5540_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x210     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000173f_5572_8{UNINITIALIZED}>  0x230
<BV8 mem_c000171f_5618_8{UNINITIALIZED}>  0x210
<BV8 mem_c000176f_6838_8{UNINITIALIZED}>  0x260
<BV8 mem_c0001747_6854_8{UNINITIALIZED}>  0x238

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_6        0x0
0x40      OBJ_7        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e2f_5656_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001e37_6612_8{UNINITIALIZED}>  0x28
<BV8 mem_c0001e4f_6681_8{UNINITIALIZED}>  0x40

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc00039f6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002527_6440_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc00039f6
maximum memory range     [  0xc00039f6  ,  0xc00040f6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00039f6_5686_8{UNINITIALIZED}>  0x0
<BV8 mem_c0003c60_6770_8{UNINITIALIZED}>  0x26a
<BV8 mem_c0003c76_6822_8{UNINITIALIZED}>  0x280

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001061_5541_56{UNINITIALIZED}>
<BV56 mem_c0001720_5619_56{UNINITIALIZED}>
<BV56 mem_c0001e30_5657_56{UNINITIALIZED}>
<BV8 mem_c000175f_5734_8{UNINITIALIZED}>
<BV56 mem_c0001760_5735_56{UNINITIALIZED}>
<BV56 mem_c0002528_6441_56{UNINITIALIZED}>
<BV56 mem_c0001e38_6613_56{UNINITIALIZED}>
<BV56 mem_c0001e50_6682_56{UNINITIALIZED}>
<BV56 mem_c0003c77_6823_56{UNINITIALIZED}>
<BV56 mem_c0001748_6855_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130870070353
Write  <BV64 0x8>  bytes to  <BV64 (mem_c0001061_5541_56{UNINITIALIZED} .. mem_c0001060_5540_8{UNINITIALIZED}) + 0x38>
with expression : <BV64 Reverse(mem_c0001747_6854_8{UNINITIALIZED} .. Reverse(mem_c0001748_6855_56{UNINITIALIZED})) + 0x1>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2bb8b58
0x7f72c2bb8b58:	push	rbp
0x7f72c2bb8b59:	mov	rbp, rsp
0x7f72c2bb8b5c:	push	r12
0x7f72c2bb8b5e:	push	rbx
0x7f72c2bb8b5f:	sub	rsp, 0x270
0x7f72c2bb8b66:	mov	qword ptr [rbp - 0x278], rdi
0x7f72c2bb8b6d:	mov	dword ptr [rbp - 0x27c], esi
0x7f72c2bb8b73:	mov	rax, qword ptr fs:[0x28]
0x7f72c2bb8b7c:	mov	qword ptr [rbp - 0x18], rax
0x7f72c2bb8b80:	xor	eax, eax
0x7f72c2bb8b82:	mov	rax, qword ptr [rbp - 0x278]
0x7f72c2bb8b89:	mov	rdi, rax
0x7f72c2bb8b8c:	call	0x7f72c2bbfda4
----------------------------------------------------------------------------------------------------
At  0x7f72c2bb904c
0x7f72c2bb904c:	push	rbp
0x7f72c2bb904d:	mov	rbp, rsp
0x7f72c2bb9050:	sub	rsp, 0x10
0x7f72c2bb9054:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bb9058:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bb905c:	mov	esi, 0
0x7f72c2bb9061:	mov	rdi, rax
0x7f72c2bb9064:	call	0x7f72c2bb8b58
----------------------------------------------------------------------------------------------------
At  0x7f72c2bc1806
0x7f72c2bc1806:	push	rbp
0x7f72c2bc1807:	mov	rbp, rsp
0x7f72c2bc180a:	sub	rsp, 0x10
0x7f72c2bc180e:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bc1812:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bc1816:	mov	rdi, rax
0x7f72c2bc1819:	call	0x7f72c2319bfa
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001061_5541_56{UNINITIALIZED} == 0xc00017>
30  <Bool mem_c0001060_5540_8{UNINITIALIZED} == 15>
31  <Bool mem_c000173f_5572_8{UNINITIALIZED} == 2>
32  <Bool mem_c0001720_5619_56{UNINITIALIZED} == 0xc0001e>
33  <Bool mem_c000171f_5618_8{UNINITIALIZED} == 15>
34  <Bool mem_c0001e2f_5656_8{UNINITIALIZED} == 15>
35  <Bool mem_c0001e30_5657_56{UNINITIALIZED} == 0xc00025>
36  <Bool mem_c00039f6_5686_8{UNINITIALIZED}[0:0] == 1>
37  <Bool mem_c0001e50_6682_56{UNINITIALIZED} == 0xc0003b>
38  <Bool mem_c0001e4f_6681_8{UNINITIALIZED} == 246>
39  <Bool !(mem_c0003c60_6770_8{UNINITIALIZED} == 0)>
40  <Bool !(mem_c000176f_6838_8{UNINITIALIZED} == 0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  6
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x1>  r8: <BV64 0x8>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x8>
rcx: <BV64 0xffffffff>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED})>  r11: <BV64 0x1>
rsi: <BV64 0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED})>  r12: <BV64 0x1>
rdi: <BV64 0x30 + (mem_c0003c3f_6463_56{UNINITIALIZED} .. mem_c0003c3e_6462_8{UNINITIALIZED})>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b490>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b4d0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I32 t5:Ity_I32 t6:Ity_I32 t7:Ity_I32 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I32 t15:Ity_I32 t16:Ity_I64 t17:Ity_I32 t18:Ity_I64 t19:Ity_I64 t20:Ity_I1 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I64 t27:Ity_I32 t28:Ity_I64 t29:Ity_I32 t30:Ity_I64 t31:Ity_I64 t32:Ity_I1 t33:Ity_I32 t34:Ity_I1

   00 | ------ IMark(0x7f72bf15ca76, 2, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t8 = GET:I64(rdx)
   03 | t27 = 64to32(t8)
   04 | t7 = t27
   05 | STle(t0) = t7
   06 | PUT(rip) = 0x00007f72bf15ca78
   07 | ------ IMark(0x7f72bf15ca78, 4, 0) ------
   08 | t10 = GET:I64(rbp)
   09 | t9 = Add64(t10,0xffffffffffffffe8)
   10 | t11 = LDle:I64(t9)
   11 | PUT(rip) = 0x00007f72bf15ca7c
   12 | ------ IMark(0x7f72bf15ca7c, 3, 0) ------
   13 | t12 = LDle:I64(t11)
   14 | PUT(rip) = 0x00007f72bf15ca7f
   15 | ------ IMark(0x7f72bf15ca7f, 2, 0) ------
   16 | t14 = LDle:I32(t12)
   17 | t28 = 32Uto64(t14)
   18 | t13 = t28
   19 | PUT(rax) = t13
   20 | ------ IMark(0x7f72bf15ca81, 2, 0) ------
   21 | t29 = 64to32(t13)
   22 | t15 = t29
   23 | PUT(cc_op) = 0x0000000000000013
   24 | t30 = 32Uto64(t15)
   25 | t19 = t30
   26 | PUT(cc_dep1) = t19
   27 | PUT(cc_dep2) = 0x0000000000000000
   28 | PUT(rip) = 0x00007f72bf15ca83
   29 | ------ IMark(0x7f72bf15ca83, 2, 0) ------
   30 | t33 = 64to32(t19)
   31 | t32 = CmpEQ32(t33,0x00000000)
   32 | t31 = 1Uto64(t32)
   33 | t25 = t31
   34 | t34 = 64to1(t25)
   35 | t20 = t34
   36 | if (t20) { PUT(rip) = 0x7f72bf15ca85; Ijk_Boring }
   NEXT: PUT(rip) = 0x00007f72bf15ca9e; Ijk_Boring
}
0x7f72bf15ca76:	mov	dword ptr [rax], edx
0x7f72bf15ca78:	mov	rax, qword ptr [rbp - 0x18]
0x7f72bf15ca7c:	mov	rax, qword ptr [rax]
0x7f72bf15ca7f:	mov	eax, dword ptr [rax]
0x7f72bf15ca81:	test	eax, eax
0x7f72bf15ca83:	jne	0x7f72bf15ca9e
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
0x130     OBJ_7        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180
<BV8 mem_c0000330_6422_8{UNINITIALIZED}>  0x130

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001060_5540_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x210     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000173f_5572_8{UNINITIALIZED}>  0x230
<BV8 mem_c000171f_5618_8{UNINITIALIZED}>  0x210

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e2f_5656_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc00039f6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc00039f6
maximum memory range     [  0xc00039f6  ,  0xc00040f6  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x248     OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00039f6_5686_8{UNINITIALIZED}>  0x0
<BV8 mem_c0003c3e_6462_8{UNINITIALIZED}>  0x248

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc00042f6
maximum memory range     [  0xc00040f6  ,  0xc00047f6  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x30      OBJ_9        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0004326_6540_8{UNINITIALIZED}>  0x30

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc00049f6
maximum memory range     [  0xc00047f6  ,  0xc0004ef6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00049f6_6542_8{UNINITIALIZED}>  0x0
<BV8 mem_c00049fe_6733_8{UNINITIALIZED}>  0x8
<BV8 mem_c0004a76_6734_8{UNINITIALIZED}>  0x80

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001061_5541_56{UNINITIALIZED}>
<BV56 mem_c0001720_5619_56{UNINITIALIZED}>
<BV56 mem_c0001e30_5657_56{UNINITIALIZED}>
<BV56 mem_c0000331_6423_56{UNINITIALIZED}>
<BV56 mem_c0003c3f_6463_56{UNINITIALIZED}>
<BV8 mem_c000432e_6517_8{UNINITIALIZED}>
<BV56 mem_c0004327_6541_56{UNINITIALIZED}>
<BV24 mem_c00049f7_6543_24{UNINITIALIZED}>
<BV56 mem_c00049ff_6735_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130808875638
Write  <BV64 0x4>  bytes to  <BV64 Reverse(mem_c0004326_6540_8{UNINITIALIZED} .. Reverse(mem_c0004327_6541_56{UNINITIALIZED}))>
with expression : <BV32 Reverse(mem_c00049f6_6542_8{UNINITIALIZED} .. Reverse(mem_c00049f7_6543_24{UNINITIALIZED})) + 0xffffffff>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72bf15ca0a
0x7f72bf15ca0a:	push	rbp
0x7f72bf15ca0b:	mov	rbp, rsp
0x7f72bf15ca0e:	sub	rsp, 0x40
0x7f72bf15ca12:	mov	qword ptr [rbp - 0x18], rdi
0x7f72bf15ca16:	mov	qword ptr [rbp - 0x20], rsi
0x7f72bf15ca1a:	mov	qword ptr [rbp - 0x28], rdx
0x7f72bf15ca1e:	mov	qword ptr [rbp - 0x30], rcx
0x7f72bf15ca22:	mov	qword ptr [rbp - 0x38], r8
0x7f72bf15ca26:	mov	qword ptr [rbp - 0x40], r9
0x7f72bf15ca2a:	mov	rax, qword ptr [rbp - 0x28]
0x7f72bf15ca2e:	cmp	rax, qword ptr [rbp - 0x30]
0x7f72bf15ca32:	je	0x7f72bf15cb0f
----------------------------------------------------------------------------------------------------
At  0x7f72c2617f02
0x7f72c2617f02:	push	rbp
0x7f72c2617f03:	mov	rbp, rsp
0x7f72c2617f06:	sub	rsp, 0x20
0x7f72c2617f0a:	mov	qword ptr [rbp - 8], rdi
0x7f72c2617f0e:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2617f12:	mov	qword ptr [rbp - 0x18], rdx
0x7f72c2617f16:	mov	rdx, qword ptr [rbp - 0x18]
0x7f72c2617f1a:	mov	rcx, qword ptr [rbp - 0x10]
0x7f72c2617f1e:	mov	rax, qword ptr [rbp - 8]
0x7f72c2617f22:	mov	rsi, rcx
0x7f72c2617f25:	mov	rdi, rax
0x7f72c2617f28:	call	0x7f72c261a51e
----------------------------------------------------------------------------------------------------
At  0x7f72c2614372
0x7f72c2614372:	push	rbp
0x7f72c2614373:	mov	rbp, rsp
0x7f72c2614376:	sub	rsp, 0x10
0x7f72c261437a:	mov	qword ptr [rbp - 8], rdi
0x7f72c261437e:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2614382:	mov	rcx, qword ptr [rbp - 0x10]
0x7f72c2614386:	mov	rax, qword ptr [rbp - 8]
0x7f72c261438a:	mov	edx, 1
0x7f72c261438f:	mov	rsi, rcx
0x7f72c2614392:	mov	rdi, rax
0x7f72c2614395:	call	0x7f72c2617f02
----------------------------------------------------------------------------------------------------
At  0x7f72c25ed520
0x7f72c25ed520:	push	rbp
0x7f72c25ed521:	mov	rbp, rsp
0x7f72c25ed524:	sub	rsp, 0x30
0x7f72c25ed528:	mov	qword ptr [rbp - 0x28], rdi
0x7f72c25ed52c:	mov	dword ptr [rbp - 0x2c], esi
0x7f72c25ed52f:	mov	rax, qword ptr fs:[0x28]
0x7f72c25ed538:	mov	qword ptr [rbp - 8], rax
0x7f72c25ed53c:	xor	eax, eax
0x7f72c25ed53e:	mov	rax, qword ptr [rbp - 0x28]
0x7f72c25ed542:	mov	byte ptr [rax + 0x38], 1
0x7f72c25ed546:	mov	rax, qword ptr [rbp - 0x28]
0x7f72c25ed54a:	add	rax, 0x30
0x7f72c25ed54e:	mov	rdi, rax
0x7f72c25ed551:	call	0x7f72bf153d90
----------------------------------------------------------------------------------------------------
At  0x7f72c0c42a36
0x7f72c0c42a36:	push	rbp
0x7f72c0c42a37:	mov	rbp, rsp
0x7f72c0c42a3a:	sub	rsp, 0x10
0x7f72c0c42a3e:	mov	qword ptr [rbp - 8], rdi
0x7f72c0c42a42:	mov	dword ptr [rbp - 0xc], esi
0x7f72c0c42a45:	mov	rax, qword ptr [rbp - 8]
0x7f72c0c42a49:	movzx	eax, byte ptr [rax + 0x38]
0x7f72c0c42a4d:	test	al, al
0x7f72c0c42a4f:	jne	0x7f72c0c42a6c
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001061_5541_56{UNINITIALIZED} == 0xc00017>
30  <Bool mem_c0001060_5540_8{UNINITIALIZED} == 15>
31  <Bool mem_c000173f_5572_8{UNINITIALIZED} == 2>
32  <Bool mem_c0001720_5619_56{UNINITIALIZED} == 0xc0001e>
33  <Bool mem_c000171f_5618_8{UNINITIALIZED} == 15>
34  <Bool mem_c0001e2f_5656_8{UNINITIALIZED} == 15>
35  <Bool mem_c0001e30_5657_56{UNINITIALIZED} == 0xc00025>
36  <Bool !(mem_c00039f6_5686_8{UNINITIALIZED}[0:0] == 1)>
37  <Bool mem_c0000331_6423_56{UNINITIALIZED} == 0xc0003b>
38  <Bool mem_c0000330_6422_8{UNINITIALIZED} == 246>
39  <Bool mem_c0003c3f_6463_56{UNINITIALIZED} == 0xc00042>
40  <Bool mem_c0003c3e_6462_8{UNINITIALIZED} == 246>
41  <Bool mem_c000432e_6517_8{UNINITIALIZED} == 0>
42  <Bool mem_c0004327_6541_56{UNINITIALIZED} == 0xc00049>
43  <Bool mem_c0004326_6540_8{UNINITIALIZED} == 246>
44  <Bool mem_c00049f6_6542_8{UNINITIALIZED} == 1>
45  <Bool mem_c00049f7_6543_24{UNINITIALIZED} == 0x0>
46  <Bool mem_c00049fe_6733_8{UNINITIALIZED} == 0>
47  <Bool mem_c00049ff_6735_56{UNINITIALIZED} == 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  7
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x8 + (mem_c0001e18_6439_56{UNINITIALIZED} .. mem_c0001e17_6438_8{UNINITIALIZED})>  r8: <BV64 0x0>
rbx: <BV64 mem_c0001e18_6439_56{UNINITIALIZED} .. mem_c0001e17_6438_8{UNINITIALIZED}>  r9: <BV64 0x7fff6531b410>
rcx: <BV64 0x0>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. (mem_c0005f0f_7515_24{UNINITIALIZED} .. mem_c0005f0e_7514_8{UNINITIALIZED}) | (0 .. mem_c0003a80_7476_24{UNINITIALIZED}[17:17] .. 0 .. mem_c0003a80_7476_24{UNINITIALIZED}[15:15] .. 0x0)>  r11: <BV64 0x1>
rsi: <BV64 0x0 .. mem_c0003a80_7476_24{UNINITIALIZED}[17:17] .. 0 .. mem_c0003a80_7476_24{UNINITIALIZED}[15:15] .. 0x0>  r12: <BV64 0x1>
rdi: <BV64 0x8 + (mem_c0001e18_6439_56{UNINITIALIZED} .. mem_c0001e17_6438_8{UNINITIALIZED})>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b2d0>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b2d0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I32 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64

   00 | ------ IMark(0x7f72c0a1960f, 3, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x0000000000000010)
   03 | t9 = GET:I64(rdx)
   04 | t8 = 64to32(t9)
   05 | STle(t6) = t8
   06 | ------ IMark(0x7f72c0a19612, 1, 0) ------
   07 | PUT(rip) = 0x00007f72c0a19613
   08 | ------ IMark(0x7f72c0a19613, 1, 0) ------
   09 | t2 = GET:I64(rsp)
   10 | t1 = LDle:I64(t2)
   11 | t10 = Add64(t2,0x0000000000000008)
   12 | PUT(rsp) = t10
   13 | PUT(rbp) = t1
   14 | PUT(rip) = 0x00007f72c0a19614
   15 | ------ IMark(0x7f72c0a19614, 1, 0) ------
   16 | t4 = LDle:I64(t10)
   17 | t5 = Add64(t10,0x0000000000000008)
   18 | PUT(rsp) = t5
   19 | t11 = Sub64(t5,0x0000000000000080)
   20 | ====== AbiHint(0xt11, 128, t4) ======
   NEXT: PUT(rip) = t4; Ijk_Ret
}
0x7f72c0a1960f:	mov	dword ptr [rax + 0x10], edx
0x7f72c0a19612:	nop	
0x7f72c0a19613:	pop	rbp
0x7f72c0a19614:	ret	
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x228     OBJ_5        0x0
0x208     OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c0001737_5568_8{UNINITIALIZED}>  0x228
<BV8 mem_c0001727_5622_8{UNINITIALIZED}>  0x218
<BV8 mem_c0001728_5623_8{UNINITIALIZED}>  0x219
<BV8 mem_c000172b_5674_8{UNINITIALIZED}>  0x21c
<BV8 mem_c000172f_5710_8{UNINITIALIZED}>  0x220
<BV8 mem_c0001717_6665_8{UNINITIALIZED}>  0x208

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_12       0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  -------------------
<BV8 mem_c0001e0f_6147_8{UNINITIALIZED}>  0x0
<BV8 mem_c0001e20_6368_8{UNINITIALIZED}>  0x11
<BV8 mem_c0001e17_6438_8{UNINITIALIZED}>  0x8
<BV8 mem_c0001e1f_6459_8{UNINITIALIZED}>  0x10,0x7ffea53196ad

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc0002a0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000252f_6751_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c0f
maximum memory range     [  0xc0002a0f  ,  0xc000310f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x10      OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c27_6793_8{UNINITIALIZED}>  0x18
<BV8 mem_c0002c1f_6961_8{UNINITIALIZED}>  0x10

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc000330f
maximum memory range     [  0xc000310f  ,  0xc000380f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_9        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000336f_7014_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0003a0f
maximum memory range     [  0xc000380f  ,  0xc0003f0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x10      OBJ_10       0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003a3f_7091_8{UNINITIALIZED}>  0x30
<BV8 mem_c0003a1f_7161_8{UNINITIALIZED}>  0x10
<BV8 mem_c0003a7f_7475_8{UNINITIALIZED}>  0x70

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc000410f
maximum memory range     [  0xc0003f0f  ,  0xc000460f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_11       0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000412f_7239_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_11
(possible) base address  0xc000480f
maximum memory range     [  0xc000460f  ,  0xc0005cf6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_12
(possible) base address  0xc0005cf6
maximum memory range     [  0xc0005cf6  ,  0xc00063f6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0005cf6_7272_8{UNINITIALIZED}>  0x0
<BV8 mem_c0005f0e_7514_8{UNINITIALIZED}>  0x218

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001738_5569_56{UNINITIALIZED}>
<BV24 mem_c000172c_5675_24{UNINITIALIZED}>
<BV24 mem_c0001730_5711_24{UNINITIALIZED}>
<BV24 mem_c0001e10_6148_24{UNINITIALIZED}>
<BV56 mem_c0001e18_6439_56{UNINITIALIZED}>
<BV56 mem_c0001718_6666_56{UNINITIALIZED}>
<BV56 mem_c0002530_6752_56{UNINITIALIZED}>
<BV56 mem_c0002c28_6794_56{UNINITIALIZED}>
<BV56 mem_c0002c20_6962_56{UNINITIALIZED}>
<BV56 mem_c0003370_7015_56{UNINITIALIZED}>
<BV56 mem_c0003a20_7162_56{UNINITIALIZED}>
<BV56 mem_c0004130_7240_56{UNINITIALIZED}>
<BV24 mem_c0003a80_7476_24{UNINITIALIZED}>
<BV24 mem_c0005f0f_7515_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130834814479
Write  <BV64 0x4>  bytes to  <BV64 (mem_c0001e18_6439_56{UNINITIALIZED} .. mem_c0001e17_6438_8{UNINITIALIZED}) + 0x18>
with expression : <BV32 Reverse(mem_c0005f0e_7514_8{UNINITIALIZED} .. Reverse(mem_c0005f0f_7515_24{UNINITIALIZED})) | (0 .. mem_c0003a80_7476_24{UNINITIALIZED}[17:17] .. 0 .. mem_c0003a80_7476_24{UNINITIALIZED}[15:15] .. 0x0)>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c0a195f4
0x7f72c0a195f4:	push	rbp
0x7f72c0a195f5:	mov	rbp, rsp
0x7f72c0a195f8:	mov	qword ptr [rbp - 8], rdi
0x7f72c0a195fc:	mov	dword ptr [rbp - 0xc], esi
0x7f72c0a195ff:	mov	rax, qword ptr [rbp - 8]
0x7f72c0a19603:	mov	eax, dword ptr [rax + 0x10]
0x7f72c0a19606:	or	eax, dword ptr [rbp - 0xc]
0x7f72c0a19609:	mov	edx, eax
0x7f72c0a1960b:	mov	rax, qword ptr [rbp - 8]
0x7f72c0a1960f:	mov	dword ptr [rax + 0x10], edx
0x7f72c0a19612:	nop	
0x7f72c0a19613:	pop	rbp
0x7f72c0a19614:	ret	
----------------------------------------------------------------------------------------------------
At  0x7f72c0a1a0ac
0x7f72c0a1a0ac:	push	rbp
0x7f72c0a1a0ad:	mov	rbp, rsp
0x7f72c0a1a0b0:	sub	rsp, 0x10
0x7f72c0a1a0b4:	mov	qword ptr [rbp - 8], rdi
0x7f72c0a1a0b8:	mov	dword ptr [rbp - 0xc], esi
0x7f72c0a1a0bb:	mov	rax, qword ptr [rbp - 8]
0x7f72c0a1a0bf:	lea	rdx, [rax + 8]
0x7f72c0a1a0c3:	mov	eax, dword ptr [rbp - 0xc]
0x7f72c0a1a0c6:	mov	esi, eax
0x7f72c0a1a0c8:	mov	rdi, rdx
0x7f72c0a1a0cb:	call	0x7f72c0a195f4
----------------------------------------------------------------------------------------------------
At  0x7f72c0a1ed5a
0x7f72c0a1ed5a:	push	rbp
0x7f72c0a1ed5b:	mov	rbp, rsp
0x7f72c0a1ed5e:	push	rbx
0x7f72c0a1ed5f:	sub	rsp, 0x58
0x7f72c0a1ed63:	mov	qword ptr [rbp - 0x48], rdi
0x7f72c0a1ed67:	mov	qword ptr [rbp - 0x50], rsi
0x7f72c0a1ed6b:	mov	dword ptr [rbp - 0x54], edx
0x7f72c0a1ed6e:	mov	dword ptr [rbp - 0x58], ecx
0x7f72c0a1ed71:	mov	qword ptr [rbp - 0x60], r8
0x7f72c0a1ed75:	mov	rax, qword ptr fs:[0x28]
0x7f72c0a1ed7e:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0a1ed82:	xor	eax, eax
0x7f72c0a1ed84:	cmp	qword ptr [rbp - 0x60], 0
0x7f72c0a1ed89:	je	0x7f72c0a1eda5
----------------------------------------------------------------------------------------------------
At  0x7f72c0a1f06a
0x7f72c0a1f06a:	push	rbp
0x7f72c0a1f06b:	mov	rbp, rsp
0x7f72c0a1f06e:	push	rbx
0x7f72c0a1f06f:	sub	rsp, 0x58
0x7f72c0a1f073:	mov	qword ptr [rbp - 0x38], rdi
0x7f72c0a1f077:	mov	qword ptr [rbp - 0x40], rsi
0x7f72c0a1f07b:	mov	dword ptr [rbp - 0x44], edx
0x7f72c0a1f07e:	mov	dword ptr [rbp - 0x48], ecx
0x7f72c0a1f081:	mov	qword ptr [rbp - 0x50], r8
0x7f72c0a1f085:	mov	qword ptr [rbp - 0x58], r9
0x7f72c0a1f089:	mov	rax, qword ptr fs:[0x28]
0x7f72c0a1f092:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0a1f096:	xor	eax, eax
0x7f72c0a1f098:	mov	rsi, qword ptr [rbp - 0x40]
0x7f72c0a1f09c:	mov	rdi, qword ptr [rbp - 0x50]
0x7f72c0a1f0a0:	mov	ecx, dword ptr [rbp - 0x48]
0x7f72c0a1f0a3:	mov	edx, dword ptr [rbp - 0x44]
0x7f72c0a1f0a6:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c0a1f0aa:	mov	r8, rdi
0x7f72c0a1f0ad:	mov	rdi, rax
0x7f72c0a1f0b0:	call	0x7f72c0a1ed5a
----------------------------------------------------------------------------------------------------
At  0x7f72c2b8933a
0x7f72c2b8933a:	push	rbp
0x7f72c2b8933b:	mov	rbp, rsp
0x7f72c2b8933e:	push	r12
0x7f72c2b89340:	push	rbx
0x7f72c2b89341:	sub	rsp, 0x50
0x7f72c2b89345:	mov	qword ptr [rbp - 0x48], rdi
0x7f72c2b89349:	mov	qword ptr [rbp - 0x50], rsi
0x7f72c2b8934d:	mov	dword ptr [rbp - 0x54], edx
0x7f72c2b89350:	mov	dword ptr [rbp - 0x58], ecx
0x7f72c2b89353:	mov	qword ptr [rbp - 0x60], r8
0x7f72c2b89357:	mov	rax, qword ptr fs:[0x28]
0x7f72c2b89360:	mov	qword ptr [rbp - 0x18], rax
0x7f72c2b89364:	xor	eax, eax
0x7f72c2b89366:	mov	rax, qword ptr [rbp - 0x48]
0x7f72c2b8936a:	mov	rdi, rax
0x7f72c2b8936d:	call	0x7f72c2bbfce4
----------------------------------------------------------------------------------------------------
At  0x7f72c2b459e4
0x7f72c2b459e4:	push	rbp
0x7f72c2b459e5:	mov	rbp, rsp
0x7f72c2b459e8:	sub	rsp, 0x20
0x7f72c2b459ec:	mov	qword ptr [rbp - 8], rdi
0x7f72c2b459f0:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2b459f4:	mov	dword ptr [rbp - 0x14], edx
0x7f72c2b459f7:	mov	dword ptr [rbp - 0x18], ecx
0x7f72c2b459fa:	mov	rax, qword ptr [rbp - 8]
0x7f72c2b459fe:	mov	rdi, rax
0x7f72c2b45a01:	call	0x7f72c2319bfa
----------------------------------------------------------------------------------------------------
At  0x7f72c2b9b8a6
0x7f72c2b9b8a6:	push	rbp
0x7f72c2b9b8a7:	mov	rbp, rsp
0x7f72c2b9b8aa:	sub	rsp, 0x20
0x7f72c2b9b8ae:	mov	qword ptr [rbp - 8], rdi
0x7f72c2b9b8b2:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2b9b8b6:	mov	dword ptr [rbp - 0x14], edx
0x7f72c2b9b8b9:	mov	rax, qword ptr [rbp - 8]
0x7f72c2b9b8bd:	add	rax, 0x10
0x7f72c2b9b8c1:	mov	rdi, rax
0x7f72c2b9b8c4:	call	0x7f72c0ad135e
----------------------------------------------------------------------------------------------------
At  0x7f72c0a0d3ca
0x7f72c0a0d3ca:	push	rbp
0x7f72c0a0d3cb:	mov	rbp, rsp
0x7f72c0a0d3ce:	sub	rsp, 0x40
0x7f72c0a0d3d2:	mov	qword ptr [rbp - 0x28], rdi
0x7f72c0a0d3d6:	mov	qword ptr [rbp - 0x30], rsi
0x7f72c0a0d3da:	mov	eax, edx
0x7f72c0a0d3dc:	mov	dword ptr [rbp - 0x38], ecx
0x7f72c0a0d3df:	mov	byte ptr [rbp - 0x34], al
0x7f72c0a0d3e2:	mov	rax, qword ptr fs:[0x28]
0x7f72c0a0d3eb:	mov	qword ptr [rbp - 8], rax
0x7f72c0a0d3ef:	xor	eax, eax
0x7f72c0a0d3f1:	mov	rax, qword ptr [rbp - 0x28]
0x7f72c0a0d3f5:	mov	rax, qword ptr [rax + 8]
0x7f72c0a0d3f9:	test	rax, rax
0x7f72c0a0d3fc:	je	0x7f72c0a0d4b3
----------------------------------------------------------------------------------------------------
At  0x7f72c0a0d4d0
0x7f72c0a0d4d0:	push	rbp
0x7f72c0a0d4d1:	mov	rbp, rsp
0x7f72c0a0d4d4:	push	rbx
0x7f72c0a0d4d5:	sub	rsp, 0x78
0x7f72c0a0d4d9:	mov	qword ptr [rbp - 0x78], rdi
0x7f72c0a0d4dd:	mov	rax, qword ptr fs:[0x28]
0x7f72c0a0d4e6:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0a0d4ea:	xor	eax, eax
0x7f72c0a0d4ec:	mov	qword ptr [rbp - 0x68], 0
0x7f72c0a0d4f4:	cmp	qword ptr [rbp - 0x68], 1
0x7f72c0a0d4f9:	ja	0x7f72c0a0d5be
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 15>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0xc00017>
29  <Bool mem_c0001737_5568_8{UNINITIALIZED} == 15>
30  <Bool mem_c0001738_5569_56{UNINITIALIZED} == 0xc0001e>
31  <Bool !(mem_c000172f_5710_8{UNINITIALIZED} == 0) || !(mem_c0001730_5711_24{UNINITIALIZED} == 0x0)>
32  <Bool !(mem_c0001e0f_6147_8{UNINITIALIZED}[7:1] == 0) || !(mem_c0001e10_6148_24{UNINITIALIZED} == 0x0)>
33  <Bool mem_c0001e20_6368_8{UNINITIALIZED} == 0>
34  <Bool mem_c0001717_6665_8{UNINITIALIZED} == 15>
35  <Bool mem_c0001718_6666_56{UNINITIALIZED} == 0xc00025>
36  <Bool mem_c0001e1f_6459_8{UNINITIALIZED} == 28>
37  <Bool mem_c0001e17_6438_8{UNINITIALIZED} == 246>
38  <Bool mem_c0001e18_6439_56{UNINITIALIZED} == 0xc0005e>
39  <Bool mem_c000252f_6751_8{UNINITIALIZED} == 15>
40  <Bool mem_c0002530_6752_56{UNINITIALIZED} == 0xc0002c>
41  <Bool mem_c0002c27_6793_8{UNINITIALIZED}[0:0] == 0>
42  <Bool mem_c0002c20_6962_56{UNINITIALIZED} == 0xc00033>
43  <Bool mem_c0002c1f_6961_8{UNINITIALIZED} == 15>
44  <Bool mem_c000336f_7014_8{UNINITIALIZED} == 15>
45  <Bool mem_c0003370_7015_56{UNINITIALIZED} == 0xc0003a>
46  <Bool !(mem_c0003a3f_7091_8{UNINITIALIZED} == 2)>
47  <Bool mem_c0003a20_7162_56{UNINITIALIZED} == 0xc00041>
48  <Bool mem_c0003a1f_7161_8{UNINITIALIZED} == 15>
49  <Bool mem_c000412f_7239_8{UNINITIALIZED} == 15>
50  <Bool mem_c0004130_7240_56{UNINITIALIZED} == 0xc00048>
51  <Bool mem_c0005cf6_7272_8{UNINITIALIZED}[1:1] == 0>
52  <Bool ~((~mem_c0005f0f_7515_24{UNINITIALIZED} .. ~mem_c0005f0e_7514_8{UNINITIALIZED}) | (63 .. ~mem_c0003a80_7476_24{UNINITIALIZED}[17:17] .. 1 .. ~mem_c0003a80_7476_24{UNINITIALIZED}[15:15] .. 0x7fffff)) == 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  8
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x7f72c9dd27d0>  r8: <BV64 0x8>
rbx: <BV64 (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[55:48] else 190) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[47:40] else 180) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[39:32] else 222) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[31:24] else 192) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[23:16] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[15:8] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[7:0] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049fe_6733_8{UNINITIALIZED} else 0)>  r9: <BV64 0x8>
rcx: <BV64 0x0>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[55:48] else 190) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[47:40] else 180) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[39:32] else 222) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[31:24] else 192) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[23:16] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[15:8] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[7:0] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049fe_6733_8{UNINITIALIZED} else 0)>  r11: <BV64 0x1>
rsi: <BV64 0x8 + (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) + (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED})>  r12: <BV64 0x1>
rdi: <BV64 (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[55:48] else 190) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[47:40] else 180) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[39:32] else 222) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[31:24] else 192) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[23:16] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[15:8] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[7:0] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049fe_6733_8{UNINITIALIZED} else 0)>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b470>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b4c0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I32 t13:Ity_I32 t14:Ity_I32 t15:Ity_I64 t16:Ity_I64 t17:Ity_I64 t18:Ity_I8 t19:Ity_I32 t20:Ity_I32 t21:Ity_I32 t22:Ity_I8 t23:Ity_I8 t24:Ity_I8 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64 t33:Ity_I64 t34:Ity_I64 t35:Ity_I64 t36:Ity_I64 t37:Ity_I64 t38:Ity_I64 t39:Ity_I64 t40:Ity_I64 t41:Ity_I64 t42:Ity_I64 t43:Ity_I64 t44:Ity_I64 t45:Ity_I32 t46:Ity_I64 t47:Ity_I64 t48:Ity_I64 t49:Ity_I8 t50:Ity_I1 t51:Ity_I64 t52:Ity_I64 t53:Ity_I64 t54:Ity_I64 t55:Ity_I64 t56:Ity_I32 t57:Ity_I64 t58:Ity_I64 t59:Ity_I64 t60:Ity_I64 t61:Ity_I1 t62:Ity_I64 t63:Ity_I64 t64:Ity_I64 t65:Ity_I64 t66:Ity_I64 t67:Ity_I64 t68:Ity_I32 t69:Ity_I64 t70:Ity_I64 t71:Ity_I1 t72:Ity_I1 t73:Ity_I8 t74:Ity_I32 t75:Ity_I64 t76:Ity_I64 t77:Ity_I64 t78:Ity_I1 t79:Ity_I64 t80:Ity_I1

   00 | ------ IMark(0x7f72c0b4c25e, 3, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t25 = GET:I64(rdx)
   03 | STle(t0) = t25
   04 | PUT(rip) = 0x00007f72c0b4c261
   05 | ------ IMark(0x7f72c0b4c261, 4, 0) ------
   06 | t27 = GET:I64(rbp)
   07 | t26 = Add64(t27,0xffffffffffffffd0)
   08 | t28 = LDle:I64(t26)
   09 | PUT(rip) = 0x00007f72c0b4c265
   10 | ------ IMark(0x7f72c0b4c265, 3, 0) ------
   11 | t29 = LDle:I64(t28)
   12 | ------ IMark(0x7f72c0b4c268, 4, 0) ------
   13 | t3 = And64(t29,0xfffffffffffffffd)
   14 | ------ IMark(0x7f72c0b4c26c, 3, 0) ------
   15 | PUT(rdx) = t3
   16 | PUT(rip) = 0x00007f72c0b4c26f
   17 | ------ IMark(0x7f72c0b4c26f, 4, 0) ------
   18 | t31 = Add64(t27,0xffffffffffffffd0)
   19 | t33 = LDle:I64(t31)
   20 | PUT(rip) = 0x00007f72c0b4c273
   21 | ------ IMark(0x7f72c0b4c273, 3, 0) ------
   22 | STle(t33) = t3
   23 | PUT(rip) = 0x00007f72c0b4c276
   24 | ------ IMark(0x7f72c0b4c276, 4, 0) ------
   25 | t35 = Add64(t27,0xffffffffffffffd0)
   26 | t37 = LDle:I64(t35)
   27 | PUT(rip) = 0x00007f72c0b4c27a
   28 | ------ IMark(0x7f72c0b4c27a, 4, 0) ------
   29 | t38 = Add64(t27,0xffffffffffffffe8)
   30 | STle(t38) = t37
   31 | PUT(rip) = 0x00007f72c0b4c27e
   32 | ------ IMark(0x7f72c0b4c27e, 4, 0) ------
   33 | t41 = Add64(t27,0xffffffffffffffe8)
   34 | t43 = LDle:I64(t41)
   35 | PUT(rip) = 0x00007f72c0b4c282
   36 | ------ IMark(0x7f72c0b4c282, 3, 0) ------
   37 | t44 = LDle:I64(t43)
   38 | ------ IMark(0x7f72c0b4c285, 3, 0) ------
   39 | t68 = 64to32(t44)
   40 | t45 = t68
   41 | t12 = And32(t45,0x00000001)
   42 | t69 = 32Uto64(t12)
   43 | t48 = t69
   44 | PUT(rax) = t48
   45 | ------ IMark(0x7f72c0b4c288, 3, 0) ------
   46 | ------ IMark(0x7f72c0b4c28b, 3, 0) ------
   47 | t71 = CmpNE64(t48,0x0000000000000000)
   48 | t70 = 1Uto64(t71)
   49 | t55 = t70
   50 | t72 = 64to1(t55)
   51 | t50 = t72
   52 | t73 = 1Uto8(t50)
   53 | t49 = t73
   54 | PUT(al) = t49
   55 | ------ IMark(0x7f72c0b4c28e, 3, 0) ------
   56 | t57 = GET:I64(rax)
   57 | t74 = 64to32(t57)
   58 | t56 = t74
   59 | t19 = Xor32(t56,0x00000001)
   60 | t75 = 32Uto64(t19)
   61 | t59 = t75
   62 | PUT(rax) = t59
   63 | ------ IMark(0x7f72c0b4c291, 2, 0) ------
   64 | t24 = GET:I8(al)
   65 | PUT(cc_op) = 0x0000000000000011
   66 | t76 = 8Uto64(t24)
   67 | t60 = t76
   68 | PUT(cc_dep1) = t60
   69 | PUT(cc_dep2) = 0x0000000000000000
   70 | PUT(rip) = 0x00007f72c0b4c293
   71 | ------ IMark(0x7f72c0b4c293, 2, 0) ------
   72 | t79 = And64(t60,0x00000000000000ff)
   73 | t78 = CmpEQ64(t79,0x0000000000000000)
   74 | t77 = 1Uto64(t78)
   75 | t66 = t77
   76 | t80 = 64to1(t66)
   77 | t61 = t80
   78 | if (t61) { PUT(rip) = 0x7f72c0b4c2c3; Ijk_Boring }
   NEXT: PUT(rip) = 0x00007f72c0b4c295; Ijk_Boring
}
0x7f72c0b4c25e:	mov	qword ptr [rax], rdx
0x7f72c0b4c261:	mov	rax, qword ptr [rbp - 0x30]
0x7f72c0b4c265:	mov	rax, qword ptr [rax]
0x7f72c0b4c268:	and	rax, 0xfffffffffffffffd
0x7f72c0b4c26c:	mov	rdx, rax
0x7f72c0b4c26f:	mov	rax, qword ptr [rbp - 0x30]
0x7f72c0b4c273:	mov	qword ptr [rax], rdx
0x7f72c0b4c276:	mov	rax, qword ptr [rbp - 0x30]
0x7f72c0b4c27a:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0b4c27e:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c0b4c282:	mov	rax, qword ptr [rax]
0x7f72c0b4c285:	and	eax, 1
0x7f72c0b4c288:	test	rax, rax
0x7f72c0b4c28b:	setne	al
0x7f72c0b4c28e:	xor	eax, 1
0x7f72c0b4c291:	test	al, al
0x7f72c0b4c293:	je	0x7f72c0b4c2c3
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
0x130     OBJ_7        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180
<BV8 mem_c0000330_6422_8{UNINITIALIZED}>  0x130

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001060_5540_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x210     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000173f_5572_8{UNINITIALIZED}>  0x230
<BV8 mem_c000171f_5618_8{UNINITIALIZED}>  0x210

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e2f_5656_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc00039f6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc00039f6
maximum memory range     [  0xc00039f6  ,  0xc00040f6  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x248     OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00039f6_5686_8{UNINITIALIZED}>  0x0
<BV8 mem_c0003c3e_6462_8{UNINITIALIZED}>  0x248

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc00042f6
maximum memory range     [  0xc00040f6  ,  0xc00047f6  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x30      OBJ_9        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0004326_6540_8{UNINITIALIZED}>  0x30

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc00049f6
maximum memory range     [  0xc00047f6  ,  0xc0004ef6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00049f6_6542_8{UNINITIALIZED}>  0x0
<BV8 mem_c00049fe_6733_8{UNINITIALIZED}>  0x8
<BV8 mem_c0004a76_6734_8{UNINITIALIZED}>  0x80

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc00050f6
maximum memory range     [  0xc0004ef6  ,  0xc00055f6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00050f6_6815_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001061_5541_56{UNINITIALIZED}>
<BV56 mem_c0001720_5619_56{UNINITIALIZED}>
<BV56 mem_c0001e30_5657_56{UNINITIALIZED}>
<BV56 mem_c0000331_6423_56{UNINITIALIZED}>
<BV56 mem_c0003c3f_6463_56{UNINITIALIZED}>
<BV8 mem_c000432e_6517_8{UNINITIALIZED}>
<BV56 mem_c0004327_6541_56{UNINITIALIZED}>
<BV24 mem_c00049f7_6543_24{UNINITIALIZED}>
<BV56 mem_c00049ff_6735_56{UNINITIALIZED}>
<BV56 mem_c00050f7_6816_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130836071006
Write  <BV64 0x8>  bytes to  <BV64 (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[55:48] else 190) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[47:40] else 180) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[39:32] else 222) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[31:24] else 192) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[23:16] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[15:8] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[7:0] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049fe_6733_8{UNINITIALIZED} else 0)>
with expression : <BV64 Reverse(mem_c00050f6_6815_8{UNINITIALIZED} .. Reverse(mem_c00050f7_6816_56{UNINITIALIZED})) + 0x4>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c0b4c226
0x7f72c0b4c226:	push	rbp
0x7f72c0b4c227:	mov	rbp, rsp
0x7f72c0b4c22a:	push	rbx
0x7f72c0b4c22b:	sub	rsp, 0x48
0x7f72c0b4c22f:	mov	qword ptr [rbp - 0x48], rdi
0x7f72c0b4c233:	mov	rbx, qword ptr [rbp - 0x48]
0x7f72c0b4c237:	call	0x7f72c0b4c3c3
----------------------------------------------------------------------------------------------------
At  0x7f72c0b5b445
0x7f72c0b5b445:	push	rbp
0x7f72c0b5b446:	mov	rbp, rsp
0x7f72c0b5b449:	sub	rsp, 0x10
0x7f72c0b5b44d:	mov	qword ptr [rbp - 8], rdi
0x7f72c0b5b451:	mov	rax, qword ptr [rbp - 8]
0x7f72c0b5b455:	mov	rdi, rax
0x7f72c0b5b458:	call	0x7f72c0b4c226
----------------------------------------------------------------------------------------------------
At  0x7f72c0b587c3
0x7f72c0b587c3:	push	rbp
0x7f72c0b587c4:	mov	rbp, rsp
0x7f72c0b587c7:	sub	rsp, 0x10
0x7f72c0b587cb:	mov	qword ptr [rbp - 8], rdi
0x7f72c0b587cf:	mov	rax, qword ptr [rbp - 8]
0x7f72c0b587d3:	mov	rdi, rax
0x7f72c0b587d6:	call	0x7f72c0b5b445
----------------------------------------------------------------------------------------------------
At  0x7f72c2614336
0x7f72c2614336:	push	rbp
0x7f72c2614337:	mov	rbp, rsp
0x7f72c261433a:	sub	rsp, 0x10
0x7f72c261433e:	mov	qword ptr [rbp - 8], rdi
0x7f72c2614342:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2614346:	mov	rax, qword ptr [rbp - 0x10]
0x7f72c261434a:	mov	rdx, qword ptr [rax]
0x7f72c261434d:	mov	rax, qword ptr [rbp - 8]
0x7f72c2614351:	mov	qword ptr [rax], rdx
0x7f72c2614354:	mov	rax, qword ptr [rbp - 8]
0x7f72c2614358:	mov	rax, qword ptr [rax]
0x7f72c261435b:	test	rax, rax
0x7f72c261435e:	je	0x7f72c261436f
----------------------------------------------------------------------------------------------------
At  0x7f72c25ed520
0x7f72c25ed520:	push	rbp
0x7f72c25ed521:	mov	rbp, rsp
0x7f72c25ed524:	sub	rsp, 0x30
0x7f72c25ed528:	mov	qword ptr [rbp - 0x28], rdi
0x7f72c25ed52c:	mov	dword ptr [rbp - 0x2c], esi
0x7f72c25ed52f:	mov	rax, qword ptr fs:[0x28]
0x7f72c25ed538:	mov	qword ptr [rbp - 8], rax
0x7f72c25ed53c:	xor	eax, eax
0x7f72c25ed53e:	mov	rax, qword ptr [rbp - 0x28]
0x7f72c25ed542:	mov	byte ptr [rax + 0x38], 1
0x7f72c25ed546:	mov	rax, qword ptr [rbp - 0x28]
0x7f72c25ed54a:	add	rax, 0x30
0x7f72c25ed54e:	mov	rdi, rax
0x7f72c25ed551:	call	0x7f72bf153d90
----------------------------------------------------------------------------------------------------
At  0x7f72c0c42a36
0x7f72c0c42a36:	push	rbp
0x7f72c0c42a37:	mov	rbp, rsp
0x7f72c0c42a3a:	sub	rsp, 0x10
0x7f72c0c42a3e:	mov	qword ptr [rbp - 8], rdi
0x7f72c0c42a42:	mov	dword ptr [rbp - 0xc], esi
0x7f72c0c42a45:	mov	rax, qword ptr [rbp - 8]
0x7f72c0c42a49:	movzx	eax, byte ptr [rax + 0x38]
0x7f72c0c42a4d:	test	al, al
0x7f72c0c42a4f:	jne	0x7f72c0c42a6c
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001061_5541_56{UNINITIALIZED} == 0xc00017>
30  <Bool mem_c0001060_5540_8{UNINITIALIZED} == 15>
31  <Bool mem_c000173f_5572_8{UNINITIALIZED} == 2>
32  <Bool mem_c0001720_5619_56{UNINITIALIZED} == 0xc0001e>
33  <Bool mem_c000171f_5618_8{UNINITIALIZED} == 15>
34  <Bool mem_c0001e2f_5656_8{UNINITIALIZED} == 15>
35  <Bool mem_c0001e30_5657_56{UNINITIALIZED} == 0xc00025>
36  <Bool !(mem_c00039f6_5686_8{UNINITIALIZED}[0:0] == 1)>
37  <Bool mem_c0000331_6423_56{UNINITIALIZED} == 0xc0003b>
38  <Bool mem_c0000330_6422_8{UNINITIALIZED} == 246>
39  <Bool mem_c0003c3f_6463_56{UNINITIALIZED} == 0xc00042>
40  <Bool mem_c0003c3e_6462_8{UNINITIALIZED} == 246>
41  <Bool mem_c000432e_6517_8{UNINITIALIZED} == 0>
42  <Bool mem_c0004326_6540_8{UNINITIALIZED} == 246>
43  <Bool mem_c00049f6_6542_8{UNINITIALIZED} == 1>
44  <Bool mem_c0004327_6541_56{UNINITIALIZED} == 0xc00049>
45  <Bool mem_c00049f7_6543_24{UNINITIALIZED} == 0x0>
46  <Bool mem_c00049fe_6733_8{UNINITIALIZED} == 246>
47  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[7:0] == 80>
48  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[15:8] == 0>
49  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[23:16] == 192>
50  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[31:24] == 0>
51  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[39:32] == 0>
52  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[47:40] == 0>
53  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[55:48] == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  9
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x7f72c9dd27d0>  r8: <BV64 0x8>
rbx: <BV64 (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[55:48] else 190) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[47:40] else 180) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[39:32] else 222) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[31:24] else 192) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[23:16] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[15:8] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[7:0] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049fe_6733_8{UNINITIALIZED} else 0)>  r9: <BV64 0x8>
rcx: <BV64 0x0>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x4 + (mem_c00050f7_6816_56{UNINITIALIZED} .. mem_c00050f6_6815_8{UNINITIALIZED})[63:2] .. 0 .. mem_c00050f6_6815_8{UNINITIALIZED}[0:0]>  r11: <BV64 0x1>
rsi: <BV64 0x8 + (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) + (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED})>  r12: <BV64 0x1>
rdi: <BV64 (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[55:48] else 190) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[47:40] else 180) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[39:32] else 222) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[31:24] else 192) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[23:16] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[15:8] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[7:0] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049fe_6733_8{UNINITIALIZED} else 0)>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b470>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b4c0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I32 t6:Ity_I32 t7:Ity_I32 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I8 t12:Ity_I32 t13:Ity_I32 t14:Ity_I32 t15:Ity_I8 t16:Ity_I8 t17:Ity_I8 t18:Ity_I64 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I32 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64 t33:Ity_I8 t34:Ity_I1 t35:Ity_I64 t36:Ity_I64 t37:Ity_I64 t38:Ity_I64 t39:Ity_I64 t40:Ity_I32 t41:Ity_I64 t42:Ity_I64 t43:Ity_I64 t44:Ity_I64 t45:Ity_I1 t46:Ity_I64 t47:Ity_I64 t48:Ity_I64 t49:Ity_I64 t50:Ity_I64 t51:Ity_I64 t52:Ity_I32 t53:Ity_I64 t54:Ity_I64 t55:Ity_I1 t56:Ity_I1 t57:Ity_I8 t58:Ity_I32 t59:Ity_I64 t60:Ity_I64 t61:Ity_I64 t62:Ity_I1 t63:Ity_I64 t64:Ity_I1

   00 | ------ IMark(0x7f72c0b4c273, 3, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t18 = GET:I64(rdx)
   03 | STle(t0) = t18
   04 | PUT(rip) = 0x00007f72c0b4c276
   05 | ------ IMark(0x7f72c0b4c276, 4, 0) ------
   06 | t20 = GET:I64(rbp)
   07 | t19 = Add64(t20,0xffffffffffffffd0)
   08 | t21 = LDle:I64(t19)
   09 | PUT(rip) = 0x00007f72c0b4c27a
   10 | ------ IMark(0x7f72c0b4c27a, 4, 0) ------
   11 | t22 = Add64(t20,0xffffffffffffffe8)
   12 | STle(t22) = t21
   13 | PUT(rip) = 0x00007f72c0b4c27e
   14 | ------ IMark(0x7f72c0b4c27e, 4, 0) ------
   15 | t25 = Add64(t20,0xffffffffffffffe8)
   16 | t27 = LDle:I64(t25)
   17 | PUT(rip) = 0x00007f72c0b4c282
   18 | ------ IMark(0x7f72c0b4c282, 3, 0) ------
   19 | t28 = LDle:I64(t27)
   20 | ------ IMark(0x7f72c0b4c285, 3, 0) ------
   21 | t52 = 64to32(t28)
   22 | t29 = t52
   23 | t5 = And32(t29,0x00000001)
   24 | t53 = 32Uto64(t5)
   25 | t32 = t53
   26 | PUT(rax) = t32
   27 | ------ IMark(0x7f72c0b4c288, 3, 0) ------
   28 | ------ IMark(0x7f72c0b4c28b, 3, 0) ------
   29 | t55 = CmpNE64(t32,0x0000000000000000)
   30 | t54 = 1Uto64(t55)
   31 | t39 = t54
   32 | t56 = 64to1(t39)
   33 | t34 = t56
   34 | t57 = 1Uto8(t34)
   35 | t33 = t57
   36 | PUT(al) = t33
   37 | ------ IMark(0x7f72c0b4c28e, 3, 0) ------
   38 | t41 = GET:I64(rax)
   39 | t58 = 64to32(t41)
   40 | t40 = t58
   41 | t12 = Xor32(t40,0x00000001)
   42 | t59 = 32Uto64(t12)
   43 | t43 = t59
   44 | PUT(rax) = t43
   45 | ------ IMark(0x7f72c0b4c291, 2, 0) ------
   46 | t17 = GET:I8(al)
   47 | PUT(cc_op) = 0x0000000000000011
   48 | t60 = 8Uto64(t17)
   49 | t44 = t60
   50 | PUT(cc_dep1) = t44
   51 | PUT(cc_dep2) = 0x0000000000000000
   52 | PUT(rip) = 0x00007f72c0b4c293
   53 | ------ IMark(0x7f72c0b4c293, 2, 0) ------
   54 | t63 = And64(t44,0x00000000000000ff)
   55 | t62 = CmpEQ64(t63,0x0000000000000000)
   56 | t61 = 1Uto64(t62)
   57 | t50 = t61
   58 | t64 = 64to1(t50)
   59 | t45 = t64
   60 | if (t45) { PUT(rip) = 0x7f72c0b4c2c3; Ijk_Boring }
   NEXT: PUT(rip) = 0x00007f72c0b4c295; Ijk_Boring
}
0x7f72c0b4c273:	mov	qword ptr [rax], rdx
0x7f72c0b4c276:	mov	rax, qword ptr [rbp - 0x30]
0x7f72c0b4c27a:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0b4c27e:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c0b4c282:	mov	rax, qword ptr [rax]
0x7f72c0b4c285:	and	eax, 1
0x7f72c0b4c288:	test	rax, rax
0x7f72c0b4c28b:	setne	al
0x7f72c0b4c28e:	xor	eax, 1
0x7f72c0b4c291:	test	al, al
0x7f72c0b4c293:	je	0x7f72c0b4c2c3
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
0x130     OBJ_7        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180
<BV8 mem_c0000330_6422_8{UNINITIALIZED}>  0x130

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001060_5540_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x210     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000173f_5572_8{UNINITIALIZED}>  0x230
<BV8 mem_c000171f_5618_8{UNINITIALIZED}>  0x210

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e2f_5656_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc00039f6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc00039f6
maximum memory range     [  0xc00039f6  ,  0xc00040f6  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x248     OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00039f6_5686_8{UNINITIALIZED}>  0x0
<BV8 mem_c0003c3e_6462_8{UNINITIALIZED}>  0x248

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc00042f6
maximum memory range     [  0xc00040f6  ,  0xc00047f6  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x30      OBJ_9        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0004326_6540_8{UNINITIALIZED}>  0x30

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc00049f6
maximum memory range     [  0xc00047f6  ,  0xc0004ef6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00049f6_6542_8{UNINITIALIZED}>  0x0
<BV8 mem_c00049fe_6733_8{UNINITIALIZED}>  0x8
<BV8 mem_c0004a76_6734_8{UNINITIALIZED}>  0x80

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc0004ef6
maximum memory range     [  0xc0004ef6  ,  0xc00055f6  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001061_5541_56{UNINITIALIZED}>
<BV56 mem_c0001720_5619_56{UNINITIALIZED}>
<BV56 mem_c0001e30_5657_56{UNINITIALIZED}>
<BV56 mem_c0000331_6423_56{UNINITIALIZED}>
<BV56 mem_c0003c3f_6463_56{UNINITIALIZED}>
<BV8 mem_c000432e_6517_8{UNINITIALIZED}>
<BV56 mem_c0004327_6541_56{UNINITIALIZED}>
<BV24 mem_c00049f7_6543_24{UNINITIALIZED}>
<BV56 mem_c00049ff_6735_56{UNINITIALIZED}>
<BV8 mem_c00050f6_6815_8{UNINITIALIZED}>
<BV56 mem_c00050f7_6816_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130836071027
Write  <BV64 0x8>  bytes to  <BV64 (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[55:48] else 190) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[47:40] else 180) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[39:32] else 222) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[31:24] else 192) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[23:16] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[15:8] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049ff_6735_56{UNINITIALIZED}[7:0] else 0) .. (if (0x0 .. 0xffffffff + (mem_c00049f7_6543_24{UNINITIALIZED} .. mem_c00049f6_6542_8{UNINITIALIZED}) .. 0) == 0xc00049f6 + 0xffffffffffffffff * (mem_c0004327_6541_56{UNINITIALIZED} .. mem_c0004326_6540_8{UNINITIALIZED}) then mem_c00049fe_6733_8{UNINITIALIZED} else 0)>
with expression : <BV64 0x4 + (mem_c00050f7_6816_56{UNINITIALIZED} .. mem_c00050f6_6815_8{UNINITIALIZED}) & 0xfffffffffffffffd>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c0b4c226
0x7f72c0b4c226:	push	rbp
0x7f72c0b4c227:	mov	rbp, rsp
0x7f72c0b4c22a:	push	rbx
0x7f72c0b4c22b:	sub	rsp, 0x48
0x7f72c0b4c22f:	mov	qword ptr [rbp - 0x48], rdi
0x7f72c0b4c233:	mov	rbx, qword ptr [rbp - 0x48]
0x7f72c0b4c237:	call	0x7f72c0b4c3c3
----------------------------------------------------------------------------------------------------
At  0x7f72c0b5b445
0x7f72c0b5b445:	push	rbp
0x7f72c0b5b446:	mov	rbp, rsp
0x7f72c0b5b449:	sub	rsp, 0x10
0x7f72c0b5b44d:	mov	qword ptr [rbp - 8], rdi
0x7f72c0b5b451:	mov	rax, qword ptr [rbp - 8]
0x7f72c0b5b455:	mov	rdi, rax
0x7f72c0b5b458:	call	0x7f72c0b4c226
----------------------------------------------------------------------------------------------------
At  0x7f72c0b587c3
0x7f72c0b587c3:	push	rbp
0x7f72c0b587c4:	mov	rbp, rsp
0x7f72c0b587c7:	sub	rsp, 0x10
0x7f72c0b587cb:	mov	qword ptr [rbp - 8], rdi
0x7f72c0b587cf:	mov	rax, qword ptr [rbp - 8]
0x7f72c0b587d3:	mov	rdi, rax
0x7f72c0b587d6:	call	0x7f72c0b5b445
----------------------------------------------------------------------------------------------------
At  0x7f72c2614336
0x7f72c2614336:	push	rbp
0x7f72c2614337:	mov	rbp, rsp
0x7f72c261433a:	sub	rsp, 0x10
0x7f72c261433e:	mov	qword ptr [rbp - 8], rdi
0x7f72c2614342:	mov	qword ptr [rbp - 0x10], rsi
0x7f72c2614346:	mov	rax, qword ptr [rbp - 0x10]
0x7f72c261434a:	mov	rdx, qword ptr [rax]
0x7f72c261434d:	mov	rax, qword ptr [rbp - 8]
0x7f72c2614351:	mov	qword ptr [rax], rdx
0x7f72c2614354:	mov	rax, qword ptr [rbp - 8]
0x7f72c2614358:	mov	rax, qword ptr [rax]
0x7f72c261435b:	test	rax, rax
0x7f72c261435e:	je	0x7f72c261436f
----------------------------------------------------------------------------------------------------
At  0x7f72c25ed520
0x7f72c25ed520:	push	rbp
0x7f72c25ed521:	mov	rbp, rsp
0x7f72c25ed524:	sub	rsp, 0x30
0x7f72c25ed528:	mov	qword ptr [rbp - 0x28], rdi
0x7f72c25ed52c:	mov	dword ptr [rbp - 0x2c], esi
0x7f72c25ed52f:	mov	rax, qword ptr fs:[0x28]
0x7f72c25ed538:	mov	qword ptr [rbp - 8], rax
0x7f72c25ed53c:	xor	eax, eax
0x7f72c25ed53e:	mov	rax, qword ptr [rbp - 0x28]
0x7f72c25ed542:	mov	byte ptr [rax + 0x38], 1
0x7f72c25ed546:	mov	rax, qword ptr [rbp - 0x28]
0x7f72c25ed54a:	add	rax, 0x30
0x7f72c25ed54e:	mov	rdi, rax
0x7f72c25ed551:	call	0x7f72bf153d90
----------------------------------------------------------------------------------------------------
At  0x7f72c0c42a36
0x7f72c0c42a36:	push	rbp
0x7f72c0c42a37:	mov	rbp, rsp
0x7f72c0c42a3a:	sub	rsp, 0x10
0x7f72c0c42a3e:	mov	qword ptr [rbp - 8], rdi
0x7f72c0c42a42:	mov	dword ptr [rbp - 0xc], esi
0x7f72c0c42a45:	mov	rax, qword ptr [rbp - 8]
0x7f72c0c42a49:	movzx	eax, byte ptr [rax + 0x38]
0x7f72c0c42a4d:	test	al, al
0x7f72c0c42a4f:	jne	0x7f72c0c42a6c
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0x0>
29  <Bool mem_c0001061_5541_56{UNINITIALIZED} == 0xc00017>
30  <Bool mem_c0001060_5540_8{UNINITIALIZED} == 15>
31  <Bool mem_c000173f_5572_8{UNINITIALIZED} == 2>
32  <Bool mem_c0001720_5619_56{UNINITIALIZED} == 0xc0001e>
33  <Bool mem_c000171f_5618_8{UNINITIALIZED} == 15>
34  <Bool mem_c0001e2f_5656_8{UNINITIALIZED} == 15>
35  <Bool mem_c0001e30_5657_56{UNINITIALIZED} == 0xc00025>
36  <Bool !(mem_c00039f6_5686_8{UNINITIALIZED}[0:0] == 1)>
37  <Bool mem_c0000331_6423_56{UNINITIALIZED} == 0xc0003b>
38  <Bool mem_c0000330_6422_8{UNINITIALIZED} == 246>
39  <Bool mem_c0003c3f_6463_56{UNINITIALIZED} == 0xc00042>
40  <Bool mem_c0003c3e_6462_8{UNINITIALIZED} == 246>
41  <Bool mem_c000432e_6517_8{UNINITIALIZED} == 0>
42  <Bool mem_c0004326_6540_8{UNINITIALIZED} == 246>
43  <Bool mem_c00049f6_6542_8{UNINITIALIZED} == 1>
44  <Bool mem_c0004327_6541_56{UNINITIALIZED} == 0xc00049>
45  <Bool mem_c00049f7_6543_24{UNINITIALIZED} == 0x0>
46  <Bool mem_c00049fe_6733_8{UNINITIALIZED} == 246>
47  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[7:0] == 80>
48  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[15:8] == 0>
49  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[23:16] == 192>
50  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[31:24] == 0>
51  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[39:32] == 0>
52  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[47:40] == 0>
53  <Bool mem_c00049ff_6735_56{UNINITIALIZED}[55:48] == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  10
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x1>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x0 .. 0x20 + 0xffffffff * (mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED}[7:7] .. mem_c0001728_5623_8{UNINITIALIZED} .. mem_c0001727_5622_8{UNINITIALIZED})>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x1 + (mem_c0001e48_7712_56{UNINITIALIZED} .. mem_c0001e47_7711_8{UNINITIALIZED})>  r11: <BV64 0x1>
rsi: <BV64 0xffff>  r12: <BV64 0x1>
rdi: <BV64 mem_c0003338_7472_56{UNINITIALIZED} .. mem_c0003337_7471_8{UNINITIALIZED}>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b540>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b560>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64

   00 | ------ IMark(0x7f72c2b88f65, 4, 0) ------
   01 | t5 = GET:I64(rax)
   02 | t4 = Add64(t5,0x0000000000000038)
   03 | t6 = GET:I64(rdx)
   04 | STle(t4) = t6
   05 | PUT(rip) = 0x00007f72c2b88f69
   06 | ------ IMark(0x7f72c2b88f69, 4, 0) ------
   07 | t8 = GET:I64(rbp)
   08 | t7 = Add64(t8,0xffffffffffffffe8)
   09 | t9 = LDle:I64(t7)
   10 | PUT(rax) = t9
   11 | ------ IMark(0x7f72c2b88f6d, 3, 0) ------
   12 | PUT(rdi) = t9
   13 | PUT(rip) = 0x00007f72c2b88f70
   14 | ------ IMark(0x7f72c2b88f70, 5, 0) ------
   15 | t12 = GET:I64(rsp)
   16 | t11 = Sub64(t12,0x0000000000000008)
   17 | PUT(rsp) = t11
   18 | STle(t11) = 0x00007f72c2b88f75
   19 | t13 = Sub64(t11,0x0000000000000080)
   20 | ====== AbiHint(0xt13, 128, 0x00007f72c2b890ee) ======
   NEXT: PUT(rip) = 0x00007f72c2b890ee; Ijk_Call
}
0x7f72c2b88f65:	mov	qword ptr [rax + 0x38], rdx
0x7f72c2b88f69:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c2b88f6d:	mov	rdi, rax
0x7f72c2b88f70:	call	0x7f72c2b890ee
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_4        0x200
0x60      OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x20
<BV8 mem_c0001048_5432_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001060_7135_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c0001737_5568_8{UNINITIALIZED}>  0x228
<BV8 mem_c0001727_5622_8{UNINITIALIZED}>  0x218
<BV8 mem_c0001728_5623_8{UNINITIALIZED}>  0x219
<BV8 mem_c000172b_5674_8{UNINITIALIZED}>  0x21c
<BV8 mem_c000172f_5710_8{UNINITIALIZED}>  0x220
<BV8 mem_c000175f_6457_8{UNINITIALIZED}>  0x250
<BV8 mem_c0001753_6546_8{UNINITIALIZED}>  0x244
<BV8 mem_c0001757_6596_8{UNINITIALIZED}>  0x248

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x10      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e3f_7221_8{UNINITIALIZED}>  0x30
<BV8 mem_c0001e1f_7332_8{UNINITIALIZED}>  0x10
<BV8 mem_c0001e67_7662_8{UNINITIALIZED}>  0x58
<BV8 mem_c0001e47_7711_8{UNINITIALIZED}>  0x38

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc0002a0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000252f_7388_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c0f
maximum memory range     [  0xc0002a0f  ,  0xc000310f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c2f_7415_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc000330f
maximum memory range     [  0xc000310f  ,  0xc000380f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x28      OBJ_9        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003337_7471_8{UNINITIALIZED}>  0x28

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0003a0f
maximum memory range     [  0xc000380f  ,  0xc0003f0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_10       0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003b37_7488_8{UNINITIALIZED}>  0x128
<BV8 mem_c0003a0f_7504_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_10
(possible) base address  0xc000410f
maximum memory range     [  0xc0003f0f  ,  0xc000460f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00043f7_7506_8{UNINITIALIZED}>  0x2e8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0001049_5433_56{UNINITIALIZED}>
<BV56 mem_c0001738_5569_56{UNINITIALIZED}>
<BV24 mem_c000172c_5675_24{UNINITIALIZED}>
<BV24 mem_c0001730_5711_24{UNINITIALIZED}>
<BV56 mem_c0001760_6458_56{UNINITIALIZED}>
<BV24 mem_c0001754_6547_24{UNINITIALIZED}>
<BV24 mem_c0001758_6597_24{UNINITIALIZED}>
<BV56 mem_c0001061_7136_56{UNINITIALIZED}>
<BV56 mem_c0001e20_7333_56{UNINITIALIZED}>
<BV56 mem_c0002530_7389_56{UNINITIALIZED}>
<BV56 mem_c0002c30_7416_56{UNINITIALIZED}>
<BV56 mem_c0003338_7472_56{UNINITIALIZED}>
<BV56 mem_c0003b38_7489_56{UNINITIALIZED}>
<BV56 mem_c0003a10_7505_56{UNINITIALIZED}>
<BV56 mem_c00043f8_7507_56{UNINITIALIZED}>
<BV64 symbolic_call_2>
<BV64 symbolic_return_2_7527_64{UNINITIALIZED}>
<BV56 mem_c0001e48_7712_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130869874533
Write  <BV64 0x8>  bytes to  <BV64 (mem_c0001061_7136_56{UNINITIALIZED} .. mem_c0001060_7135_8{UNINITIALIZED}) + 0x38>
with expression : <BV64 Reverse(mem_c0001e47_7711_8{UNINITIALIZED} .. Reverse(mem_c0001e48_7712_56{UNINITIALIZED})) + 0x1>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2b88eec
0x7f72c2b88eec:	push	rbp
0x7f72c2b88eed:	mov	rbp, rsp
0x7f72c2b88ef0:	sub	rsp, 0x20
0x7f72c2b88ef4:	mov	qword ptr [rbp - 0x18], rdi
0x7f72c2b88ef8:	mov	rax, qword ptr [rbp - 0x18]
0x7f72c2b88efc:	mov	rdi, rax
0x7f72c2b88eff:	call	0x7f72c2bbfda4
----------------------------------------------------------------------------------------------------
At  0x7f72c2bc1806
0x7f72c2bc1806:	push	rbp
0x7f72c2bc1807:	mov	rbp, rsp
0x7f72c2bc180a:	sub	rsp, 0x10
0x7f72c2bc180e:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bc1812:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bc1816:	mov	rdi, rax
0x7f72c2bc1819:	call	0x7f72c2319bfa
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
25  <Bool mem_c0000380_5406_8{UNINITIALIZED} == 0>
26  <Bool mem_c0000381_5407_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0001048_5432_8{UNINITIALIZED} == 15>
28  <Bool mem_c0001049_5433_56{UNINITIALIZED} == 0xc00017>
29  <Bool !(mem_c0001737_5568_8{UNINITIALIZED} == 0) || !(mem_c0001738_5569_56{UNINITIALIZED} == 0x0)>
30  <Bool mem_c000172f_5710_8{UNINITIALIZED} == 0>
31  <Bool mem_c0001730_5711_24{UNINITIALIZED} == 0x0>
32  <Bool mem_c000175f_6457_8{UNINITIALIZED} == 0>
33  <Bool mem_c0001760_6458_56{UNINITIALIZED} == 0x0>
34  <Bool mem_c0001757_6596_8{UNINITIALIZED} == 0>
35  <Bool mem_c0001758_6597_24{UNINITIALIZED} == 0x0>
36  <Bool mem_c0001060_7135_8{UNINITIALIZED} == 15>
37  <Bool mem_c0001061_7136_56{UNINITIALIZED} == 0xc0001e>
38  <Bool !(mem_c0001e3f_7221_8{UNINITIALIZED} == 2)>
39  <Bool mem_c0001e1f_7332_8{UNINITIALIZED} == 15>
40  <Bool mem_c0001e20_7333_56{UNINITIALIZED} == 0xc00025>
41  <Bool mem_c0002530_7389_56{UNINITIALIZED} == 0xc0002c>
42  <Bool mem_c000252f_7388_8{UNINITIALIZED} == 15>
43  <Bool mem_c0002c30_7416_56{UNINITIALIZED} == 0xc00033>
44  <Bool mem_c0002c2f_7415_8{UNINITIALIZED} == 15>
45  <Bool mem_c0003338_7472_56{UNINITIALIZED} == 0xc0003a>
46  <Bool mem_c0003337_7471_8{UNINITIALIZED} == 15>
47  <Bool mem_c0003b38_7489_56{UNINITIALIZED} == 0x0>
48  <Bool mem_c0003b37_7488_8{UNINITIALIZED} == 0>
49  <Bool mem_c0003a10_7505_56{UNINITIALIZED} == 0xc00041>
50  <Bool mem_c0003a0f_7504_8{UNINITIALIZED} == 15>
51  <Bool symbolic_return_2_7527_64{UNINITIALIZED} == 0x0>
52  <Bool symbolic_call_2 == 0x0>
53  <Bool !(mem_c0001e67_7662_8{UNINITIALIZED}[3:3] == 0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
 <BV64 symbolic_return_2_7527_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          call
id              2
call_from       140130836912469
call            <BV64 mem_c00043f8_7507_56{UNINITIALIZED} .. mem_c00043f7_7506_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130870265190
call_id         2
write_to        <BV64 0x7fff6531b338>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_7527_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0000211_7576_56{UNINITIALIZED} .. mem_c0000210_7575_8{UNINITIALIZED}>  r8: <BV64 0x8>
rbx: <BV64 0x0>  r9: <BV64 0x8>
rcx: <BV64 0x0>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x55a780c629b0>  r11: <BV64 0x1>
rsi: <BV64 0x1>  r12: <BV64 0x1>
rdi: <BV64 0x55a780c629b0>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b548>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b560>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000210_7575_8{UNINITIALIZED}>  0x10

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV8 uaf_obj5378_5379_8>
<BV64 free_7134_64{UNINITIALIZED}>
<BV56 mem_c0000211_7576_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130808967693
Calling  <BV64 mem_c0000211_7576_56{UNINITIALIZED} .. mem_c0000210_7575_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72bf1731da
0x7f72bf1731da:	push	rbp
0x7f72bf1731db:	mov	rbp, rsp
0x7f72bf1731de:	sub	rsp, 0x10
0x7f72bf1731e2:	mov	qword ptr [rbp - 8], rdi
0x7f72bf1731e6:	mov	rax, qword ptr [rbp - 8]
0x7f72bf1731ea:	mov	rax, qword ptr [rax]
0x7f72bf1731ed:	test	rax, rax
0x7f72bf1731f0:	je	0x7f72bf17320f
----------------------------------------------------------------------------------------------------
At  0x7f72bf2ca94a
0x7f72bf2ca94a:	push	rbp
0x7f72bf2ca94b:	mov	rbp, rsp
0x7f72bf2ca94e:	sub	rsp, 0x10
0x7f72bf2ca952:	mov	qword ptr [rbp - 8], rdi
0x7f72bf2ca956:	mov	rax, qword ptr [rbp - 8]
0x7f72bf2ca95a:	mov	rdi, rax
0x7f72bf2ca95d:	call	0x7f72bf1731da
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj5351_5352_8[1:1] == 0)>
1  <Bool uaf_obj0_1_8 == 0>
2  <Bool uaf_obj1_2_8 == 2>
3  <Bool uaf_obj2_3_8 == 0>
4  <Bool uaf_obj3_4_8 == 192>
5  <Bool uaf_obj4_5_8 == 0>
6  <Bool uaf_obj5_6_8 == 0>
7  <Bool uaf_obj6_7_8 == 0>
8  <Bool uaf_obj7_8_8 == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x3>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x3>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965478
Calling  <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
10  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x3>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x2>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965517
Calling  <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Control hijack  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000ea9_5419_56{UNINITIALIZED} .. mem_c0000ea8_5418_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x158
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000ea8
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x178
<BV8 mem_c0000ea8_5418_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0000ea9_5419_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965703
Calling  <BV64 mem_c0000ea9_5419_56{UNINITIALIZED} .. mem_c0000ea8_5418_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
25  <Bool !(mem_c0000380_5406_8{UNINITIALIZED} == 0) || !(mem_c0000381_5407_56{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Control hijack  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0002518_5473_56{UNINITIALIZED} .. mem_c0002517_5472_8{UNINITIALIZED}>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c00017d0_5441_56{UNINITIALIZED} .. mem_c00017cf_5440_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 mem_c00017d0_5441_56{UNINITIALIZED} .. mem_c00017cf_5440_8{UNINITIALIZED}>  r12: <BV64 0x1>
rdi: <BV64 mem_c00017d0_5441_56{UNINITIALIZED} .. mem_c00017cf_5440_8{UNINITIALIZED}>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b418>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b430>  r15: <BV64 0x55a780a7f168>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x158
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000ea8
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x178
<BV8 mem_c0000ea8_5418_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x2c0     OBJ_5        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c00017cf_5440_8{UNINITIALIZED}>  0x2c0
<BV8 mem_c00017c9_5448_8{UNINITIALIZED}>  0x2ba

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e0f
maximum memory range     [  0xc0001c0f  ,  0xc000230f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001e0f_5470_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc000250f
maximum memory range     [  0xc000230f  ,  0xc0002a0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002517_5472_8{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
symbol                                                  points to
------------------------------------------------------  -----------
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>  0xc00017c7
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xc0>  0xc00017cf
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xba>  0xc00017c9
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>  0xc00017c7
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>  0xc00017c7
<BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xc0>  0xc00017cf
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  --------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0000ea9_5419_56{UNINITIALIZED}>
<BV64 symbolic_call_2>
<BV64 symbolic_return_2_5424_64{UNINITIALIZED}>
<BV8 mem_c00017c7_5430_8{UNINITIALIZED}>         0x7fff6531b457
<BV56 mem_c00017d0_5441_56{UNINITIALIZED}>
<BV56 mem_c0001e10_5471_56{UNINITIALIZED}>
<BV56 mem_c0002518_5473_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130810375816
Calling  <BV64 mem_c0002518_5473_56{UNINITIALIZED} .. mem_c0002517_5472_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72bf2cae32
0x7f72bf2cae32:	push	rbp
0x7f72bf2cae33:	mov	rbp, rsp
0x7f72bf2cae36:	sub	rsp, 0x10
0x7f72bf2cae3a:	mov	qword ptr [rbp - 8], rdi
0x7f72bf2cae3e:	mov	qword ptr [rbp - 0x10], rsi
0x7f72bf2cae42:	mov	rax, qword ptr [rbp - 8]
0x7f72bf2cae46:	mov	rdx, qword ptr [rbp - 0x10]
0x7f72bf2cae4a:	mov	rsi, rdx
0x7f72bf2cae4d:	mov	rdi, rax
0x7f72bf2cae50:	call	0x7f72bf1731c0
----------------------------------------------------------------------------------------------------
At  0x7f72c25a7056
0x7f72c25a7056:	push	rbp
0x7f72c25a7057:	mov	rbp, rsp
0x7f72c25a705a:	push	rbx
0x7f72c25a705b:	sub	rsp, 0xf8
0x7f72c25a7062:	mov	qword ptr [rbp - 0xf8], rdi
0x7f72c25a7069:	mov	eax, esi
0x7f72c25a706b:	mov	byte ptr [rbp - 0xfc], al
0x7f72c25a7071:	mov	rax, qword ptr fs:[0x28]
0x7f72c25a707a:	mov	qword ptr [rbp - 0x18], rax
0x7f72c25a707e:	xor	eax, eax
0x7f72c25a7080:	mov	rax, qword ptr [rbp - 0xf8]
0x7f72c25a7087:	mov	rax, qword ptr [rax + 0xc0]
0x7f72c25a708e:	test	rax, rax
0x7f72c25a7091:	je	0x7f72c25a779c
----------------------------------------------------------------------------------------------------
At  0x7f72c2319a88
0x7f72c2319a88:	push	rbp
0x7f72c2319a89:	mov	rbp, rsp
0x7f72c2319a8c:	sub	rsp, 0x10
0x7f72c2319a90:	mov	qword ptr [rbp - 8], rdi
0x7f72c2319a94:	mov	rax, qword ptr [rbp - 8]
0x7f72c2319a98:	mov	esi, 0
0x7f72c2319a9d:	mov	rdi, rax
0x7f72c2319aa0:	call	0x7f72c25a7056
----------------------------------------------------------------------------------------------------
At  0x7f72c2319af2
0x7f72c2319af2:	push	rbp
0x7f72c2319af3:	mov	rbp, rsp
0x7f72c2319af6:	sub	rsp, 0x10
0x7f72c2319afa:	mov	qword ptr [rbp - 8], rdi
0x7f72c2319afe:	mov	rax, qword ptr [rbp - 8]
0x7f72c2319b02:	movzx	eax, byte ptr [rax + 0xb8]
0x7f72c2319b09:	xor	eax, 1
0x7f72c2319b0c:	test	al, al
0x7f72c2319b0e:	jne	0x7f72c2319b1e
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj12_13_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj8_9_8 == 0>
5  <Bool uaf_obj10_11_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj15_16_8 == 0>
8  <Bool uaf_obj9_10_8 == 2>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj23_24_8 == 0>
14  <Bool uaf_obj16_17_8 == 0>
15  <Bool uaf_obj20_21_8 == 0>
16  <Bool uaf_obj22_23_8 == 0>
17  <Bool uaf_obj17_18_8 == 16>
18  <Bool uaf_obj19_20_8 == 192>
19  <Bool uaf_obj21_22_8 == 0>
20  <Bool uaf_obj18_19_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
25  <Bool !(mem_c0000380_5406_8{UNINITIALIZED} == 0) || !(mem_c0000381_5407_56{UNINITIALIZED} == 0x0)>
26  <Bool symbolic_return_2_5424_64{UNINITIALIZED} == 0xc000170f>
27  <Bool symbolic_call_2 == 0xc000170f>
28  <Bool mem_c00017c7_5430_8{UNINITIALIZED}[0:0] == 1>
29  <Bool mem_c00017c7_5430_8{UNINITIALIZED}[7:1] == 0>
30  <Bool mem_c00017d0_5441_56{UNINITIALIZED} == 0xc0001e>
31  <Bool mem_c00017cf_5440_8{UNINITIALIZED} == 15>
32  <Bool mem_c00017c9_5448_8{UNINITIALIZED} == 0>
33  <Bool mem_c0001e0f_5470_8{UNINITIALIZED} == 15>
34  <Bool mem_c0001e10_5471_56{UNINITIALIZED} == 0xc00025>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
 <BV64 symbolic_return_2_5424_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          call
id              2
call_from       140130869965703
call            <BV64 mem_c0000ea9_5419_56{UNINITIALIZED} .. mem_c0000ea8_5418_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130861030138
call_id         2
write_to        <BV64 0x7fff6531b578>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_5424_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

4: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130861030146
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>
read_size       1
value           <BV8 mem_c00017c7_5430_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

5: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130861030032
call_id         2
write_to        <BV64 0x7fff6531b558>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_5424_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

6: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140130863706210
call_id         2
write_to        <BV64 0x7fff6531b448>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_2_5424_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

7: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130863706247
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xc0>
read_size       8
value           <BV64 Reverse(mem_c00017cf_5440_8{UNINITIALIZED} .. Reverse(mem_c00017d0_5441_56{UNINITIALIZED}))>
----------------------------------------------------------------------------------------------------

8: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130863706270
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xba>
read_size       1
value           <BV8 mem_c00017c9_5448_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

9: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130863706292
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>
read_size       1
value           <BV8 mem_c00017c7_5430_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

10: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_w
inst            140130863706312
call_id         2
write_to        <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xb8>
write_size      <BV64 0x1>
value           <BV8 0>
----------------------------------------------------------------------------------------------------

11: 
----------------------------------------------------------------------------------------------------
access          deref_ret_val_r
inst            140130863706326
call_id         2
read_from       <BV64 symbolic_return_2_5424_64{UNINITIALIZED} + 0xc0>
read_size       8
value           <BV64 Reverse(mem_c00017cf_5440_8{UNINITIALIZED} .. Reverse(mem_c00017d0_5441_56{UNINITIALIZED}))>
----------------------------------------------------------------------------------------------------


-----end dump executor-----
