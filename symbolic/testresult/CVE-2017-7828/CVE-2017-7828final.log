-----start dump executor-----
Step:  96
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        2
control_hijack (C)        14
active (A)                53
found (F)                  0
unconstrained (U)          0
errored (E)                0
****************************************************************************************************
Some errored states: 
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. mem_c000150f_5393_8{UNINITIALIZED}[7:1] .. 0>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b520>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b560>  r15: <BV64 0x55a780a7f168>
rip: <BV64 0x7f72c2c471c7>  gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I8 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I1 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I1 t24:Ity_I1

   00 | ------ IMark(0x7f72c2c471c7, 6, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x000000000000050f)
   03 | t8 = GET:I8(dl)
   04 | STle(t6) = t8
   05 | PUT(rip) = 0x00007f72c2c471cd
   06 | ------ IMark(0x7f72c2c471cd, 4, 0) ------
   07 | t10 = GET:I64(rbp)
   08 | t9 = Add64(t10,0xffffffffffffffc8)
   09 | t11 = LDle:I64(t9)
   10 | PUT(rip) = 0x00007f72c2c471d1
   11 | ------ IMark(0x7f72c2c471d1, 4, 0) ------
   12 | t12 = Add64(t11,0x0000000000000020)
   13 | t14 = LDle:I64(t12)
   14 | PUT(rax) = t14
   15 | ------ IMark(0x7f72c2c471d5, 3, 0) ------
   16 | PUT(cc_op) = 0x0000000000000014
   17 | PUT(cc_dep1) = t14
   18 | PUT(cc_dep2) = 0x0000000000000000
   19 | PUT(rip) = 0x00007f72c2c471d8
   20 | ------ IMark(0x7f72c2c471d8, 2, 0) ------
   21 | t23 = CmpEQ64(t14,0x0000000000000000)
   22 | t22 = 1Uto64(t23)
   23 | t20 = t22
   24 | t24 = 64to1(t20)
   25 | t15 = t24
   26 | if (t15) { PUT(rip) = 0x7f72c2c47230; Ijk_Boring }
   NEXT: PUT(rip) = 0x00007f72c2c471da; Ijk_Boring
}
0x7f72c2c471c7:	mov	byte ptr [rax + 0x50f], dl
0x7f72c2c471cd:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c471d1:	mov	rax, qword ptr [rax + 0x20]
0x7f72c2c471d5:	test	rax, rax
0x7f72c2c471d8:	je	0x7f72c2c47230
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130870653383
Write  <BV64 0x1>  bytes to  <BV64 (uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8) + 0x50f>
with expression : <BV8 mem_c000150f_5393_8{UNINITIALIZED}[7:1] .. 0>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c2c47198
0x7f72c2c47198:	push	rbp
0x7f72c2c47199:	mov	rbp, rsp
0x7f72c2c4719c:	sub	rsp, 0x40
0x7f72c2c471a0:	mov	qword ptr [rbp - 0x38], rdi
0x7f72c2c471a4:	mov	dword ptr [rbp - 0x3c], esi
0x7f72c2c471a7:	mov	dword ptr [rbp - 0x40], edx
0x7f72c2c471aa:	mov	rax, qword ptr fs:[0x28]
0x7f72c2c471b3:	mov	qword ptr [rbp - 8], rax
0x7f72c2c471b7:	xor	eax, eax
0x7f72c2c471b9:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c471bd:	movzx	edx, byte ptr [rax + 0x50f]
0x7f72c2c471c4:	and	edx, 0xfffffffe
0x7f72c2c471c7:	mov	byte ptr [rax + 0x50f], dl
0x7f72c2c471cd:	mov	rax, qword ptr [rbp - 0x38]
0x7f72c2c471d1:	mov	rax, qword ptr [rax + 0x20]
0x7f72c2c471d5:	test	rax, rax
0x7f72c2c471d8:	je	0x7f72c2c47230
----------------------------------------------------------------------------------------------------
At  0x7f72c2bbc192
0x7f72c2bbc192:	push	rbp
0x7f72c2bbc193:	mov	rbp, rsp
0x7f72c2bbc196:	sub	rsp, 0x10
0x7f72c2bbc19a:	mov	qword ptr [rbp - 8], rdi
0x7f72c2bbc19e:	mov	rax, qword ptr [rbp - 8]
0x7f72c2bbc1a2:	movzx	eax, byte ptr [rax + 0x50f]
0x7f72c2bbc1a9:	and	eax, 1
0x7f72c2bbc1ac:	test	al, al
0x7f72c2bbc1ae:	je	0x7f72c2bbc1c6
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj15_16_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj9_10_8 == 2>
5  <Bool uaf_obj8_9_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj12_13_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj18_19_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj19_20_8 == 192>
18  <Bool uaf_obj16_17_8 == 0>
19  <Bool uaf_obj20_21_8 == 0>
20  <Bool uaf_obj22_23_8 == 0>
21  <Bool !(mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870083994
write_to        140734891144568
write_size      <BV64 0x8>
value           <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870653344
write_to        140734891144488
write_size      <BV64 0x8>
value           <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>
----------------------------------------------------------------------------------------------------


Write primitive  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x1>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 0x0 .. mem_c00003b4_5397_8{UNINITIALIZED}[6:0]>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 0x7fff6531b540>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b520>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b580>  r15: <BV64 0x55a780a7f168>
rip: <BV64 0x7f72c0c3875f>  gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I8 t4:Ity_I64

   00 | ------ IMark(0x7f72c0c3875f, 6, 0) ------
   01 | t2 = GET:I64(rax)
   02 | t1 = Add64(t2,0x00000000000001b4)
   03 | t3 = GET:I8(dl)
   04 | STle(t1) = t3
   05 | ------ IMark(0x7f72c0c38765, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f72c0c38768; Ijk_Boring
}
0x7f72c0c3875f:	mov	byte ptr [rax + 0x1b4], dl
0x7f72c0c38765:	jmp	0x7f72c0c38768
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c00003b4_5397_8{UNINITIALIZED}>  0x1b4
<BV8 mem_c0000488_5414_8{UNINITIALIZED}>  0x288
<BV8 mem_c00003a0_5422_8{UNINITIALIZED}>  0x1a0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f
<BV56 mem_c0000489_5415_56{UNINITIALIZED}>
<BV56 mem_c00003a1_5423_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140130837038943
Write  <BV64 0x1>  bytes to  <BV64 (uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8) + 0x1b4>
with expression : <BV8 (0x0 .. mem_c00003b4_5397_8{UNINITIALIZED}[6:0])[7:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f72c0c38524
0x7f72c0c38524:	push	rbp
0x7f72c0c38525:	mov	rbp, rsp
0x7f72c0c38528:	push	r12
0x7f72c0c3852a:	push	rbx
0x7f72c0c3852b:	sub	rsp, 0x50
0x7f72c0c3852f:	mov	qword ptr [rbp - 0x58], rdi
0x7f72c0c38533:	mov	rax, qword ptr fs:[0x28]
0x7f72c0c3853c:	mov	qword ptr [rbp - 0x18], rax
0x7f72c0c38540:	xor	eax, eax
0x7f72c0c38542:	mov	rax, qword ptr [rbp - 0x58]
0x7f72c0c38546:	movzx	eax, byte ptr [rax + 0x1b5]
0x7f72c0c3854d:	and	eax, 1
0x7f72c0c38550:	xor	eax, 1
0x7f72c0c38553:	test	al, al
0x7f72c0c38555:	jne	0x7f72c0c38767
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj15_16_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj9_10_8 == 2>
5  <Bool uaf_obj8_9_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj12_13_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj18_19_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj19_20_8 == 192>
18  <Bool uaf_obj16_17_8 == 0>
19  <Bool uaf_obj20_21_8 == 0>
20  <Bool uaf_obj22_23_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1>
23  <Bool !(mem_c00003b4_5397_8{UNINITIALIZED}[7:7] == 0)>
24  <Bool !(mem_c0000488_5414_8{UNINITIALIZED} == 0) || !(mem_c0000489_5415_56{UNINITIALIZED} == 0x0)>
25  <Bool mem_c00003a0_5422_8{UNINITIALIZED} == 0>
26  <Bool mem_c00003a1_5423_56{UNINITIALIZED} == 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870083994
write_to        140734891144568
write_size      <BV64 0x8>
value           <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130837038383
write_to        140734891144488
write_size      <BV64 0x8>
value           <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>
----------------------------------------------------------------------------------------------------

4: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130810373540
write_to        140734891144456
write_size      <BV64 0x8>
value           <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>
----------------------------------------------------------------------------------------------------

5: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130810373586
write_to        140734891144424
write_size      <BV64 0x8>
value           <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>
----------------------------------------------------------------------------------------------------

6: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130837177638
write_to        140734891144456
write_size      <BV64 0x8>
value           <BV64 0x1a0 + (uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8)>
----------------------------------------------------------------------------------------------------

7: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130837177816
write_to        140734891144456
write_size      <BV64 0x8>
value           <BV64 0x1a0 + (uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8)>
----------------------------------------------------------------------------------------------------


****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x3>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x3>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
rip: <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>  gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965478
Calling  <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj15_16_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj9_10_8 == 2>
5  <Bool uaf_obj8_9_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj12_13_8 == 0>
9  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
10  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x3>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x2>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
rip: <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>  gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965517
Calling  <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj15_16_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj9_10_8 == 2>
5  <Bool uaf_obj8_9_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj12_13_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Control hijack  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000ea9_5419_56{UNINITIALIZED} .. mem_c0000ea8_5418_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
rip: <BV64 mem_c0000ea9_5419_56{UNINITIALIZED} .. mem_c0000ea8_5418_8{UNINITIALIZED}>  gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x158
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5406_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000ea8
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x178
<BV8 mem_c0000ea8_5418_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0000381_5407_56{UNINITIALIZED}>
<BV56 mem_c0000ea9_5419_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965703
Calling  <BV64 mem_c0000ea9_5419_56{UNINITIALIZED} .. mem_c0000ea8_5418_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj15_16_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj9_10_8 == 2>
5  <Bool uaf_obj8_9_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj12_13_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj18_19_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj19_20_8 == 192>
18  <Bool uaf_obj16_17_8 == 0>
19  <Bool uaf_obj20_21_8 == 0>
20  <Bool uaf_obj22_23_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool mem_c0001021_5399_56{UNINITIALIZED} == 0x0>
24  <Bool mem_c0001020_5398_8{UNINITIALIZED} == 0>
25  <Bool !(mem_c0000380_5406_8{UNINITIALIZED} == 0) || !(mem_c0000381_5407_56{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870083994
write_to        140734891144568
write_size      <BV64 0x8>
value           <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130837038383
write_to        140734891144488
write_size      <BV64 0x8>
value           <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>
----------------------------------------------------------------------------------------------------

4: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870655625
write_to        140734891144520
write_size      <BV64 0x8>
value           <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>
----------------------------------------------------------------------------------------------------

5: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130834317864
write_to        140734891144568
write_size      <BV64 0x8>
value           <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>
----------------------------------------------------------------------------------------------------

6: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130834373304
write_to        140734891144536
write_size      <BV64 0x8>
value           <BV64 0x180 + (uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8)>
----------------------------------------------------------------------------------------------------


Control hijack  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000ea9_5421_56{UNINITIALIZED} .. mem_c0000ea8_5420_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
rip: <BV64 mem_c0000ea9_5421_56{UNINITIALIZED} .. mem_c0000ea8_5420_8{UNINITIALIZED}>  gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x158
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c00003b4_5397_8{UNINITIALIZED}>  0x1b4
<BV8 mem_c0000380_5410_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000ea8
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5400_8{UNINITIALIZED}>  0x178
<BV8 mem_c0000ea8_5420_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>         0xc000150f
<BV56 mem_c0001021_5401_56{UNINITIALIZED}>
<BV56 mem_c0000381_5411_56{UNINITIALIZED}>
<BV56 mem_c0000ea9_5421_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965703
Calling  <BV64 mem_c0000ea9_5421_56{UNINITIALIZED} .. mem_c0000ea8_5420_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj15_16_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj9_10_8 == 2>
5  <Bool uaf_obj8_9_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj12_13_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj18_19_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj19_20_8 == 192>
18  <Bool uaf_obj16_17_8 == 0>
19  <Bool uaf_obj20_21_8 == 0>
20  <Bool uaf_obj22_23_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1>
23  <Bool mem_c00003b4_5397_8{UNINITIALIZED}[7:7] == 0>
24  <Bool mem_c0001021_5401_56{UNINITIALIZED} == 0x0>
25  <Bool mem_c0001020_5400_8{UNINITIALIZED} == 0>
26  <Bool !(mem_c0000380_5410_8{UNINITIALIZED} == 0) || !(mem_c0000381_5411_56{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870083994
write_to        140734891144568
write_size      <BV64 0x8>
value           <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130837038383
write_to        140734891144488
write_size      <BV64 0x8>
value           <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>
----------------------------------------------------------------------------------------------------

4: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870655625
write_to        140734891144520
write_size      <BV64 0x8>
value           <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>
----------------------------------------------------------------------------------------------------

5: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130834317864
write_to        140734891144568
write_size      <BV64 0x8>
value           <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>
----------------------------------------------------------------------------------------------------

6: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130834373304
write_to        140734891144536
write_size      <BV64 0x8>
value           <BV64 0x180 + (uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8)>
----------------------------------------------------------------------------------------------------


Control hijack  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r8: <BV64 0x2>
rbx: <BV64 0x55a780c629b0>  r9: <BV64 0x0>
rcx: <BV64 0x80000000>  r10: <BV64 0x7fff6531b1a0>
rdx: <BV64 mem_c0000ea9_5456_56{UNINITIALIZED} .. mem_c0000ea8_5455_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x7fff6531b560>  r12: <BV64 0x1>
rdi: <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>  r13: <BV64 0x0>
rsp: <BV64 0x7fff6531b588>  r14: <BV64 0xa>
rbp: <BV64 0x7fff6531b5f0>  r15: <BV64 0x55a780a7f168>
rip: <BV64 mem_c0000ea9_5456_56{UNINITIALIZED} .. mem_c0000ea8_5455_8{UNINITIALIZED}>  gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55a780c629b0
maximum memory range     [  0x55a780c629b0  ,  0x55a780c63eb8  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_1        0x0
0x10      OBJ_3        0x158
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x1508
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj5383_5384_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_2        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000200_5385_8{UNINITIALIZED}>  0x0
<BV8 mem_c00003b5_5396_8{UNINITIALIZED}>  0x1b5
<BV8 mem_c0000380_5436_8{UNINITIALIZED}>  0x180

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000d80_5387_8{UNINITIALIZED}>  0x480
<BV8 mem_c0000d78_5390_8{UNINITIALIZED}>  0x478

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0000ea8
maximum memory range     [  0xc0000e00  ,  0xc000150f  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x1c0     OBJ_4        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001020_5398_8{UNINITIALIZED}>  0x178
<BV8 mem_c0001068_5402_8{UNINITIALIZED}>  0x1c0
<BV8 mem_c0000ea8_5455_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc000150f
maximum memory range     [  0xc000150f  ,  0xc0001c0f  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c000150f_5393_8{UNINITIALIZED}>  0x0
<BV8 mem_c000172f_5408_8{UNINITIALIZED}>  0x220

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000201_5386_56{UNINITIALIZED}>
<BV56 mem_c0000d81_5388_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
<BV56 mem_c0000d79_5391_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_5392_64{UNINITIALIZED}>
<BV56 mem_c0001021_5399_56{UNINITIALIZED}>
<BV56 mem_c0001069_5403_56{UNINITIALIZED}>
<BV24 mem_c0001730_5409_24{UNINITIALIZED}>
<BV56 mem_c0000381_5437_56{UNINITIALIZED}>
<BV56 mem_c0000ea9_5456_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140130869965703
Calling  <BV64 mem_c0000ea9_5456_56{UNINITIALIZED} .. mem_c0000ea8_5455_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj5351_5352_8[1:1] == 0>
1  <Bool uaf_obj15_16_8 == 0>
2  <Bool uaf_obj13_14_8 == 0>
3  <Bool uaf_obj14_15_8 == 0>
4  <Bool uaf_obj9_10_8 == 2>
5  <Bool uaf_obj8_9_8 == 0>
6  <Bool uaf_obj11_12_8 == 192>
7  <Bool uaf_obj10_11_8 == 0>
8  <Bool uaf_obj12_13_8 == 0>
9  <Bool mem_c0000201_5386_56{UNINITIALIZED} == 0xc00009>
10  <Bool mem_c0000200_5385_8{UNINITIALIZED} == 0>
11  <Bool symbolic_return_0_5389_64{UNINITIALIZED} == symbolic_call_0>
12  <Bool symbolic_return_1_5392_64{UNINITIALIZED} == symbolic_call_1>
13  <Bool uaf_obj17_18_8 == 16>
14  <Bool uaf_obj21_22_8 == 0>
15  <Bool uaf_obj18_19_8 == 0>
16  <Bool uaf_obj23_24_8 == 0>
17  <Bool uaf_obj19_20_8 == 192>
18  <Bool uaf_obj16_17_8 == 0>
19  <Bool uaf_obj20_21_8 == 0>
20  <Bool uaf_obj22_23_8 == 0>
21  <Bool mem_c000150f_5393_8{UNINITIALIZED}[0:0] == 0>
22  <Bool !(mem_c00003b5_5396_8{UNINITIALIZED}[0:0] == 1)>
23  <Bool !(mem_c0001020_5398_8{UNINITIALIZED} == 0) || !(mem_c0001021_5399_56{UNINITIALIZED} == 0x0)>
24  <Bool mem_c0001069_5403_56{UNINITIALIZED} == 0xc00017>
25  <Bool mem_c0001068_5402_8{UNINITIALIZED} == 15>
26  <Bool mem_c000172f_5408_8{UNINITIALIZED} == 3>
27  <Bool mem_c0001730_5409_24{UNINITIALIZED} == 0x0>
28  <Bool !(mem_c0000380_5436_8{UNINITIALIZED} == 0) || !(mem_c0000381_5437_56{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_5389_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_5392_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140130869965478
call            <BV64 mem_c0000d81_5388_56{UNINITIALIZED} .. mem_c0000d80_5387_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140130869965517
call            <BV64 mem_c0000d79_5391_56{UNINITIALIZED} .. mem_c0000d78_5390_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870083994
write_to        140734891144568
write_size      <BV64 0x8>
value           <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130837038383
write_to        140734891144488
write_size      <BV64 0x8>
value           <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>
----------------------------------------------------------------------------------------------------

4: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870655625
write_to        140734891144520
write_size      <BV64 0x8>
value           <BV64 uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8>
----------------------------------------------------------------------------------------------------

5: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870685992
write_to        140734891144488
write_size      <BV64 0x8>
value           <BV64 0x68 + (uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8)>
----------------------------------------------------------------------------------------------------

6: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130868382832
write_to        140734891144456
write_size      <BV64 0x8>
value           <BV64 0x68 + (uaf_obj23_24_8 .. uaf_obj22_23_8 .. uaf_obj21_22_8 .. uaf_obj20_21_8 .. uaf_obj19_20_8 .. uaf_obj18_19_8 .. uaf_obj17_18_8 .. uaf_obj16_17_8)>
----------------------------------------------------------------------------------------------------

7: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870680504
write_to        140734891144488
write_size      <BV64 0x8>
value           <BV64 mem_c0001069_5403_56{UNINITIALIZED} .. mem_c0001068_5402_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

8: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870684088
write_to        140734891144456
write_size      <BV64 0x8>
value           <BV64 0x10 + (mem_c0001069_5403_56{UNINITIALIZED} .. mem_c0001068_5402_8{UNINITIALIZED})>
----------------------------------------------------------------------------------------------------

9: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130870692246
write_to        140734891144424
write_size      <BV64 0x8>
value           <BV64 0x10 + (mem_c0001069_5403_56{UNINITIALIZED} .. mem_c0001068_5402_8{UNINITIALIZED})>
----------------------------------------------------------------------------------------------------

10: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130808980624
write_to        140734891144392
write_size      <BV64 0x8>
value           <BV64 0x10 + (mem_c0001069_5403_56{UNINITIALIZED} .. mem_c0001068_5402_8{UNINITIALIZED})>
----------------------------------------------------------------------------------------------------

11: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130834317864
write_to        140734891144568
write_size      <BV64 0x8>
value           <BV64 uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8>
----------------------------------------------------------------------------------------------------

12: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140130834373304
write_to        140734891144536
write_size      <BV64 0x8>
value           <BV64 0x180 + (uaf_obj15_16_8 .. uaf_obj14_15_8 .. uaf_obj13_14_8 .. uaf_obj12_13_8 .. uaf_obj11_12_8 .. uaf_obj10_11_8 .. uaf_obj9_10_8 .. uaf_obj8_9_8)>
----------------------------------------------------------------------------------------------------


-----end dump executor-----
