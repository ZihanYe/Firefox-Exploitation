-----start dump executor-----
Step:  100
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        1
control_hijack (C)         1
active (A)               672
errored (E)                0
paths to write primitive:  91
paths to control hijack:  7
****************************************************************************************************
Some errored states: 
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0000921_146_56{UNINITIALIZED} .. mem_c0000920_145_8{UNINITIALIZED}>  r8: <BV64 0x8>
rbx: <BV64 0x558429551e60>  r9: <BV64 0x8>
rcx: <BV64 0x1>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 mem_c0001011_164_56{UNINITIALIZED}[55:5] .. 1 .. mem_c0001011_164_56{UNINITIALIZED}[3:0] .. mem_c0001010_163_8{UNINITIALIZED}>  r11: <BV64 0x2>
rsi: <BV64 0x7ffdf0057ca0>  r12: <BV64 0x7ffdf0058750>
rdi: <BV64 mem_c0000921_146_56{UNINITIALIZED} .. mem_c0000920_145_8{UNINITIALIZED}>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057c70>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf0057c70>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64

   00 | ------ IMark(0x7f68fb647ee0, 4, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x0000000000000010)
   03 | t8 = GET:I64(rdx)
   04 | STle(t6) = t8
   05 | ------ IMark(0x7f68fb647ee4, 1, 0) ------
   06 | PUT(rip) = 0x00007f68fb647ee5
   07 | ------ IMark(0x7f68fb647ee5, 1, 0) ------
   08 | t2 = GET:I64(rsp)
   09 | t1 = LDle:I64(t2)
   10 | t9 = Add64(t2,0x0000000000000008)
   11 | PUT(rsp) = t9
   12 | PUT(rbp) = t1
   13 | PUT(rip) = 0x00007f68fb647ee6
   14 | ------ IMark(0x7f68fb647ee6, 1, 0) ------
   15 | t4 = LDle:I64(t9)
   16 | t5 = Add64(t9,0x0000000000000008)
   17 | PUT(rsp) = t5
   18 | t10 = Sub64(t5,0x0000000000000080)
   19 | ====== AbiHint(0xt10, 128, t4) ======
   NEXT: PUT(rip) = t4; Ijk_Ret
}
0x7f68fb647ee0:	mov	qword ptr [rax + 0x10], rdx
0x7f68fb647ee4:	nop	
0x7f68fb647ee5:	pop	rbp
0x7f68fb647ee6:	ret	
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x28      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c000021c_137_8{UNINITIALIZED}>  0x1c
<BV8 mem_c0000248_139_8{UNINITIALIZED}>  0x48

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000920_145_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001010_163_8{UNINITIALIZED}>  0x10
<BV8 mem_c0001078_203_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001018_287_8{UNINITIALIZED}>  0x18

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                   address
-----------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV24 mem_c000021d_138_24{UNINITIALIZED}>
<BV56 mem_c0000249_140_56{UNINITIALIZED}>
<BV56 mem_c0000921_146_56{UNINITIALIZED}>
<BV56 mem_c0001011_164_56{UNINITIALIZED}>
<BV56 mem_c0001079_204_56{UNINITIALIZED}>
<BV56 mem_c0001019_288_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140088870993632
Write  <BV64 0x8>  bytes to  <BV64 (mem_c0000921_146_56{UNINITIALIZED} .. mem_c0000920_145_8{UNINITIALIZED}) + 0x10>
with expression : <BV64 Reverse(mem_c0001010_163_8{UNINITIALIZED} .. Reverse(mem_c0001011_164_56{UNINITIALIZED})) | 0x1000>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fb647ebe
0x7f68fb647ebe:	push	rbp
0x7f68fb647ebf:	mov	rbp, rsp
0x7f68fb647ec2:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647ec6:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647eca:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647ece:	mov	rdx, qword ptr [rax + 0x10]
0x7f68fb647ed2:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fb647ed6:	mov	rax, qword ptr [rax]
0x7f68fb647ed9:	or	rdx, rax
0x7f68fb647edc:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647ee0:	mov	qword ptr [rax + 0x10], rdx
0x7f68fb647ee4:	nop	
0x7f68fb647ee5:	pop	rbp
0x7f68fb647ee6:	ret	
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj28_29_8[1:1] == 0)>
1  <Bool !(uaf_obj28_29_8[2:2] == 0)>
2  <Bool !(uaf_obj79_80_8 == 0) || (!(uaf_obj78_79_8 == 0) || (!(uaf_obj77_78_8 == 0) || (!(uaf_obj76_77_8 == 0) || (!(uaf_obj75_76_8 == 0) || (!(uaf_obj74_75_8 == 0) || (!(uaf_obj72_73_8 == 0) || !(uaf_obj73_74_8 == 0)))))))>
3  <Bool uaf_obj41_42_8 == 2>
4  <Bool uaf_obj43_44_8 == 192>
5  <Bool uaf_obj40_41_8 == 0>
6  <Bool uaf_obj42_43_8 == 0>
7  <Bool uaf_obj46_47_8 == 0>
8  <Bool uaf_obj45_46_8 == 0>
9  <Bool uaf_obj44_45_8 == 0>
10  <Bool uaf_obj47_48_8 == 0>
11  <Bool !(mem_c000021c_137_8{UNINITIALIZED}[1:1] == 0)>
12  <Bool mem_c0000248_139_8{UNINITIALIZED} == 0>
13  <Bool mem_c0000249_140_56{UNINITIALIZED} == 0xc00009>
14  <Bool mem_c0000921_146_56{UNINITIALIZED} == 0xc00010>
15  <Bool mem_c0000920_145_8{UNINITIALIZED} == 0>
16  <Bool mem_c0001011_164_56{UNINITIALIZED}[28:28] == 0>
17  <Bool mem_c0001011_164_56{UNINITIALIZED}[4:4] == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x7f6901f82680 + (symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[31:24])>  r8: <BV64 0x8>
rbx: <BV64 0x0 .. mem_c0002505_657_8{UNINITIALIZED}>  r9: <BV64 0x8>
rcx: <BV64 0x0>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_1900_32{UNINITIALIZED}[31:24]>  r11: <BV64 0x2>
rsi: <BV64 mem_c0001041_1502_56{UNINITIALIZED} .. mem_c0001040_1501_8{UNINITIALIZED}>  r12: <BV64 0x7ffdf0058750>
rdi: <BV64 0x7ffdf0057b57>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057b10>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf0057b10>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x28      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c000021c_137_8{UNINITIALIZED}>  0x1c
<BV8 mem_c0000248_139_8{UNINITIALIZED}>  0x48

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000920_145_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x90      OBJ_4        0x0
0x40      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001010_163_8{UNINITIALIZED}>   0x10
<BV8 mem_c0001018_193_8{UNINITIALIZED}>   0x18
<BV8 mem_c0001090_211_8{UNINITIALIZED}>   0x90
<BV8 mem_c0001040_1501_8{UNINITIALIZED}>  0x40

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_5        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001754_255_8{UNINITIALIZED}>  0x54
<BV8 mem_c0001748_331_8{UNINITIALIZED}>  0x48

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x18      OBJ_6        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001e78_377_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001e18_561_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0002504_583_8{UNINITIALIZED}>  0x4
<BV8 mem_c0002505_657_8{UNINITIALIZED}>  0x5

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c00
maximum memory range     [  0xc0002a00  ,  0xc0003100  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c04_1839_8{UNINITIALIZED}>  0x4

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0003100
maximum memory range     [  0xc0003100  ,  0x7f69c1f85980  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                   address
---------------------------------------------------------  --------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV24 mem_c000021d_138_24{UNINITIALIZED}>
<BV56 mem_c0000249_140_56{UNINITIALIZED}>
<BV56 mem_c0000921_146_56{UNINITIALIZED}>
<BV56 mem_c0001011_164_56{UNINITIALIZED}>
<BV56 mem_c0001019_194_56{UNINITIALIZED}>
<BV56 mem_c0001091_212_56{UNINITIALIZED}>
<BV24 mem_c0001755_256_24{UNINITIALIZED}>
<BV56 mem_c0001749_332_56{UNINITIALIZED}>
<BV24 mem_c0001e79_378_24{UNINITIALIZED}>
<BV56 mem_c0001e19_562_56{UNINITIALIZED}>
<BV56 mem_c0001041_1502_56{UNINITIALIZED}>
<BV8 mem_7f69c1f85980_1898_8{UNINITIALIZED}>               0x7f69c1f85980
<BV32 symbolic_read_unconstrained_1899_32{UNINITIALIZED}>
<BV32 symbolic_read_unconstrained_1900_32{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are jumping to a controlled address
It happens at:  140088890393803
Jumping to  <BV64 0x7f6901f82680 + SignExt(32, Reverse(symbolic_read_unconstrained_1900_32{UNINITIALIZED}))>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c848a
0x7f68fc8c848a:	push	rbp
0x7f68fc8c848b:	mov	rbp, rsp
0x7f68fc8c848e:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fc8c8492:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fc8c8496:	mov	rax, qword ptr [rbp - 0x20]
0x7f68fc8c849a:	movzx	eax, byte ptr [rax + 4]
0x7f68fc8c849e:	movzx	eax, al
0x7f68fc8c84a1:	cmp	eax, 7
0x7f68fc8c84a4:	ja	0x7f68fc8c8540
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c8458
0x7f68fc8c8458:	push	rbp
0x7f68fc8c8459:	mov	rbp, rsp
0x7f68fc8c845c:	sub	rsp, 0x10
0x7f68fc8c8460:	mov	qword ptr [rbp - 8], rdi
0x7f68fc8c8464:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fc8c8468:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fc8c846c:	mov	rdi, rax
0x7f68fc8c846f:	call	0x7f68fba8fa68
----------------------------------------------------------------------------------------------------
At  0x7f68fd94350e
0x7f68fd94350e:	push	rbp
0x7f68fd94350f:	mov	rbp, rsp
0x7f68fd943512:	push	rbx
0x7f68fd943513:	sub	rsp, 0x28
0x7f68fd943517:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fd94351b:	mov	qword ptr [rbp - 0x30], rsi
0x7f68fd94351f:	mov	rax, qword ptr fs:[0x28]
0x7f68fd943528:	mov	qword ptr [rbp - 0x18], rax
0x7f68fd94352c:	xor	eax, eax
0x7f68fd94352e:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fd943532:	movzx	eax, byte ptr [rax + 4]
0x7f68fd943536:	movzx	eax, al
0x7f68fd943539:	and	eax, 2
0x7f68fd94353c:	test	eax, eax
0x7f68fd94353e:	je	0x7f68fd943560
----------------------------------------------------------------------------------------------------
At  0x7f68fda39494
0x7f68fda39494:	push	rbp
0x7f68fda39495:	mov	rbp, rsp
0x7f68fda39498:	push	rbx
0x7f68fda39499:	sub	rsp, 0x48
0x7f68fda3949d:	mov	qword ptr [rbp - 0x38], rdi
0x7f68fda394a1:	mov	dword ptr [rbp - 0x3c], esi
0x7f68fda394a4:	mov	qword ptr [rbp - 0x48], rdx
0x7f68fda394a8:	mov	rax, qword ptr fs:[0x28]
0x7f68fda394b1:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda394b5:	xor	eax, eax
0x7f68fda394b7:	mov	eax, dword ptr [rbp - 0x3c]
0x7f68fda394ba:	movsxd	rdx, eax
0x7f68fda394bd:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fda394c1:	mov	rsi, rdx
0x7f68fda394c4:	mov	rdi, rax
0x7f68fda394c7:	call	0x7f68fb649f6e
----------------------------------------------------------------------------------------------------
At  0x7f68fb647dc6
0x7f68fb647dc6:	push	rbp
0x7f68fb647dc7:	mov	rbp, rsp
0x7f68fb647dca:	push	rbx
0x7f68fb647dcb:	sub	rsp, 0x28
0x7f68fb647dcf:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb647dd3:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fb647dd6:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fb647dda:	mov	eax, ecx
0x7f68fb647ddc:	mov	byte ptr [rbp - 0x20], al
0x7f68fb647ddf:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb647de3:	mov	ebx, dword ptr [rax + 0x78]
0x7f68fb647de6:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fb647de9:	mov	edi, eax
0x7f68fb647deb:	call	0x7f68fb647daf
----------------------------------------------------------------------------------------------------
At  0x7f68fb647e44
0x7f68fb647e44:	push	rbp
0x7f68fb647e45:	mov	rbp, rsp
0x7f68fb647e48:	sub	rsp, 0x20
0x7f68fb647e4c:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647e50:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647e54:	mov	eax, edx
0x7f68fb647e56:	mov	byte ptr [rbp - 0x14], al
0x7f68fb647e59:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647e5d:	mov	rax, qword ptr [rax + 8]
0x7f68fb647e61:	test	rax, rax
0x7f68fb647e64:	je	0x7f68fb647e85
----------------------------------------------------------------------------------------------------
At  0x7f68fb64cade
0x7f68fb64cade:	push	rbp
0x7f68fb64cadf:	mov	rbp, rsp
0x7f68fb64cae2:	sub	rsp, 0x20
0x7f68fb64cae6:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb64caea:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fb64caee:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb64caf2:	mov	rdi, rax
0x7f68fb64caf5:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj28_29_8[1:1] == 0)>
1  <Bool !(uaf_obj28_29_8[2:2] == 0)>
2  <Bool !(uaf_obj79_80_8 == 0) || (!(uaf_obj78_79_8 == 0) || (!(uaf_obj77_78_8 == 0) || (!(uaf_obj76_77_8 == 0) || (!(uaf_obj75_76_8 == 0) || (!(uaf_obj74_75_8 == 0) || (!(uaf_obj72_73_8 == 0) || !(uaf_obj73_74_8 == 0)))))))>
3  <Bool uaf_obj41_42_8 == 2>
4  <Bool uaf_obj43_44_8 == 192>
5  <Bool uaf_obj40_41_8 == 0>
6  <Bool uaf_obj42_43_8 == 0>
7  <Bool uaf_obj46_47_8 == 0>
8  <Bool uaf_obj45_46_8 == 0>
9  <Bool uaf_obj44_45_8 == 0>
10  <Bool uaf_obj47_48_8 == 0>
11  <Bool !(mem_c000021c_137_8{UNINITIALIZED}[1:1] == 0)>
12  <Bool mem_c0000248_139_8{UNINITIALIZED} == 0>
13  <Bool mem_c0000249_140_56{UNINITIALIZED} == 0xc00009>
14  <Bool mem_c0000921_146_56{UNINITIALIZED} == 0xc00010>
15  <Bool mem_c0000920_145_8{UNINITIALIZED} == 0>
16  <Bool !(mem_c0001011_164_56{UNINITIALIZED}[28:28] == 0)>
17  <Bool mem_c0001019_194_56{UNINITIALIZED} == 0x0>
18  <Bool mem_c0001018_193_8{UNINITIALIZED} == 0>
19  <Bool mem_c0001090_211_8{UNINITIALIZED} == 0>
20  <Bool mem_c0001091_212_56{UNINITIALIZED} == 0xc00017>
21  <Bool !(mem_c0001755_256_24{UNINITIALIZED}[23:23] == 1)>
22  <Bool mem_c0001748_331_8{UNINITIALIZED} == 0>
23  <Bool mem_c0001749_332_56{UNINITIALIZED} == 0xc0001e>
24  <Bool !(mem_c0001e79_378_24{UNINITIALIZED}[4:4] == 0)>
25  <Bool mem_c0001e18_561_8{UNINITIALIZED} == 0>
26  <Bool mem_c0001e19_562_56{UNINITIALIZED} == 0xc00025>
27  <Bool mem_c0002504_583_8{UNINITIALIZED}[1:1] == 0>
28  <Bool !(mem_c0002504_583_8{UNINITIALIZED}[2:2] == 0)>
29  <Bool mem_c0001041_1502_56{UNINITIALIZED} == 0xc0002c>
30  <Bool mem_c0001040_1501_8{UNINITIALIZED} == 0>
31  <Bool False>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

-----end dump executor-----
