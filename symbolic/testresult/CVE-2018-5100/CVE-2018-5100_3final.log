-----start dump executor-----
Step:  576
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        6
control_hijack (C)         2
active (A)                 0
unconstrained (U)          0
errored (E)                0
found                     57
avoided                    0
paths to write primitive:  240
paths to control hijack:  274
first primitive after:  58
total paths:  2389
****************************************************************************************************
Some errored states: 
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0000921_146_56{UNINITIALIZED} .. mem_c0000920_145_8{UNINITIALIZED}>  r8: <BV64 0x8>
rbx: <BV64 0x558429551e60>  r9: <BV64 0x8>
rcx: <BV64 0x1>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 mem_c0001011_164_56{UNINITIALIZED}[55:5] .. 1 .. mem_c0001011_164_56{UNINITIALIZED}[3:0] .. mem_c0001010_163_8{UNINITIALIZED}>  r11: <BV64 0x2>
rsi: <BV64 0x7ffdf0057ca0>  r12: <BV64 0x7ffdf0058750>
rdi: <BV64 mem_c0000921_146_56{UNINITIALIZED} .. mem_c0000920_145_8{UNINITIALIZED}>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057c70>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf0057c70>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64

   00 | ------ IMark(0x7f68fb647ee0, 4, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x0000000000000010)
   03 | t8 = GET:I64(rdx)
   04 | STle(t6) = t8
   05 | ------ IMark(0x7f68fb647ee4, 1, 0) ------
   06 | PUT(rip) = 0x00007f68fb647ee5
   07 | ------ IMark(0x7f68fb647ee5, 1, 0) ------
   08 | t2 = GET:I64(rsp)
   09 | t1 = LDle:I64(t2)
   10 | t9 = Add64(t2,0x0000000000000008)
   11 | PUT(rsp) = t9
   12 | PUT(rbp) = t1
   13 | PUT(rip) = 0x00007f68fb647ee6
   14 | ------ IMark(0x7f68fb647ee6, 1, 0) ------
   15 | t4 = LDle:I64(t9)
   16 | t5 = Add64(t9,0x0000000000000008)
   17 | PUT(rsp) = t5
   18 | t10 = Sub64(t5,0x0000000000000080)
   19 | ====== AbiHint(0xt10, 128, t4) ======
   NEXT: PUT(rip) = t4; Ijk_Ret
}
0x7f68fb647ee0:	mov	qword ptr [rax + 0x10], rdx
0x7f68fb647ee4:	nop	
0x7f68fb647ee5:	pop	rbp
0x7f68fb647ee6:	ret	
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x28      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c000021c_137_8{UNINITIALIZED}>  0x1c
<BV8 mem_c0000248_139_8{UNINITIALIZED}>  0x48

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000920_145_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001010_163_8{UNINITIALIZED}>  0x10
<BV8 mem_c0001078_203_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001018_287_8{UNINITIALIZED}>  0x18

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                   address
-----------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV24 mem_c000021d_138_24{UNINITIALIZED}>
<BV56 mem_c0000249_140_56{UNINITIALIZED}>
<BV56 mem_c0000921_146_56{UNINITIALIZED}>
<BV56 mem_c0001011_164_56{UNINITIALIZED}>
<BV56 mem_c0001079_204_56{UNINITIALIZED}>
<BV56 mem_c0001019_288_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140088870993632
Write  <BV64 0x8>  bytes to  <BV64 (mem_c0000921_146_56{UNINITIALIZED} .. mem_c0000920_145_8{UNINITIALIZED}) + 0x10>
with expression : <BV64 Reverse(mem_c0001010_163_8{UNINITIALIZED} .. Reverse(mem_c0001011_164_56{UNINITIALIZED})) | 0x1000>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fb647ebe
0x7f68fb647ebe:	push	rbp
0x7f68fb647ebf:	mov	rbp, rsp
0x7f68fb647ec2:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647ec6:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647eca:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647ece:	mov	rdx, qword ptr [rax + 0x10]
0x7f68fb647ed2:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fb647ed6:	mov	rax, qword ptr [rax]
0x7f68fb647ed9:	or	rdx, rax
0x7f68fb647edc:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647ee0:	mov	qword ptr [rax + 0x10], rdx
0x7f68fb647ee4:	nop	
0x7f68fb647ee5:	pop	rbp
0x7f68fb647ee6:	ret	
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj28_29_8[1:1] == 0)>
1  <Bool !(uaf_obj28_29_8[2:2] == 0)>
2  <Bool !(uaf_obj79_80_8 == 0) || (!(uaf_obj78_79_8 == 0) || (!(uaf_obj77_78_8 == 0) || (!(uaf_obj76_77_8 == 0) || (!(uaf_obj75_76_8 == 0) || (!(uaf_obj74_75_8 == 0) || (!(uaf_obj72_73_8 == 0) || !(uaf_obj73_74_8 == 0)))))))>
3  <Bool uaf_obj47_48_8 == 0>
4  <Bool uaf_obj46_47_8 == 0>
5  <Bool uaf_obj41_42_8 == 2>
6  <Bool uaf_obj43_44_8 == 192>
7  <Bool uaf_obj44_45_8 == 0>
8  <Bool uaf_obj45_46_8 == 0>
9  <Bool uaf_obj40_41_8 == 0>
10  <Bool uaf_obj42_43_8 == 0>
11  <Bool !(mem_c000021c_137_8{UNINITIALIZED}[1:1] == 0)>
12  <Bool mem_c0000249_140_56{UNINITIALIZED} == 0xc00009>
13  <Bool mem_c0000248_139_8{UNINITIALIZED} == 0>
14  <Bool mem_c0000921_146_56{UNINITIALIZED} == 0xc00010>
15  <Bool mem_c0000920_145_8{UNINITIALIZED} == 0>
16  <Bool mem_c0001011_164_56{UNINITIALIZED}[28:28] == 0>
17  <Bool mem_c0001011_164_56{UNINITIALIZED}[4:4] == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0002501_1014_56{UNINITIALIZED} .. mem_c0002500_1013_8{UNINITIALIZED}>  r8: <BV64 0x8>
rbx: <BV64 0x0 .. mem_c0001e01_622_24{UNINITIALIZED} .. mem_c0001e00_621_8{UNINITIALIZED}>  r9: <BV64 0x8>
rcx: <BV64 mem_c0000991_240_56{UNINITIALIZED} .. mem_c0000990_239_8{UNINITIALIZED}>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 mem_c0000911_176_56{UNINITIALIZED} .. mem_c0000910_175_8{UNINITIALIZED}[7:1] .. 1>  r11: <BV64 0x2>
rsi: <BV64 0x0>  r12: <BV64 0x7ffdf0058750>
rdi: <BV64 mem_c0001041_971_56{UNINITIALIZED} .. mem_c0001040_970_8{UNINITIALIZED}>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057a80>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf0057ab0>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64

   00 | ------ IMark(0x7f68fc8dc6e3, 3, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t2 = GET:I64(rdx)
   03 | STle(t0) = t2
   04 | PUT(rip) = 0x00007f68fc8dc6e6
   05 | ------ IMark(0x7f68fc8dc6e6, 4, 0) ------
   06 | t4 = GET:I64(rbp)
   07 | t3 = Add64(t4,0xfffffffffffffff8)
   08 | t5 = LDle:I64(t3)
   09 | PUT(rax) = t5
   10 | ------ IMark(0x7f68fc8dc6ea, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f68fc8dc709; Ijk_Boring
}
0x7f68fc8dc6e3:	mov	qword ptr [rax], rdx
0x7f68fc8dc6e6:	mov	rax, qword ptr [rbp - 8]
0x7f68fc8dc6ea:	jmp	0x7f68fc8dc709
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000220_155_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x90      OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000910_175_8{UNINITIALIZED}>  0x10
<BV8 mem_c0000918_209_8{UNINITIALIZED}>  0x18
<BV8 mem_c0000990_239_8{UNINITIALIZED}>  0x90
<BV8 mem_c0000920_846_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_4        0x0
0x40      OBJ_6        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001054_303_8{UNINITIALIZED}>  0x54
<BV8 mem_c0001048_396_8{UNINITIALIZED}>  0x48
<BV8 mem_c0001040_970_8{UNINITIALIZED}>  0x40

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x18      OBJ_5        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001778_450_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001718_590_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001e04_603_8{UNINITIALIZED}>  0x4
<BV8 mem_c0001e00_621_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002500_1013_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000221_156_56{UNINITIALIZED}>
<BV56 mem_c0000911_176_56{UNINITIALIZED}>
<BV56 mem_c0000919_210_56{UNINITIALIZED}>
<BV56 mem_c0000991_240_56{UNINITIALIZED}>
<BV24 mem_c0001055_304_24{UNINITIALIZED}>
<BV56 mem_c0001049_397_56{UNINITIALIZED}>
<BV24 mem_c0001779_451_24{UNINITIALIZED}>
<BV56 mem_c0001719_591_56{UNINITIALIZED}>
<BV24 mem_c0001e01_622_24{UNINITIALIZED}>
<BV56 mem_c0000921_847_56{UNINITIALIZED}>
<BV56 mem_c0001041_971_56{UNINITIALIZED}>
<BV56 mem_c0002501_1014_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140088890476259
Write  <BV64 0x8>  bytes to  <BV64 0x10 + (mem_c0000221_156_56{UNINITIALIZED} .. mem_c0000220_155_8{UNINITIALIZED})>
with expression : <BV64 Reverse(mem_c0000910_175_8{UNINITIALIZED} .. Reverse(mem_c0000911_176_56{UNINITIALIZED})) | 0x1>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fc8dc66c
0x7f68fc8dc66c:	push	rbp
0x7f68fc8dc66d:	mov	rbp, rsp
0x7f68fc8dc670:	sub	rsp, 0x30
0x7f68fc8dc674:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fc8dc678:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fc8dc67c:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fc8dc680:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fc8dc684:	mov	rdi, rax
0x7f68fc8dc687:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fc8cfd9e
0x7f68fc8cfd9e:	push	rbp
0x7f68fc8cfd9f:	mov	rbp, rsp
0x7f68fc8cfda2:	sub	rsp, 0x50
0x7f68fc8cfda6:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fc8cfdaa:	mov	rax, qword ptr fs:[0x28]
0x7f68fc8cfdb3:	mov	qword ptr [rbp - 8], rax
0x7f68fc8cfdb7:	xor	eax, eax
0x7f68fc8cfdb9:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fc8cfdbd:	mov	rdi, rax
0x7f68fc8cfdc0:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c8408
0x7f68fc8c8408:	push	rbp
0x7f68fc8c8409:	mov	rbp, rsp
0x7f68fc8c840c:	sub	rsp, 0x10
0x7f68fc8c8410:	mov	qword ptr [rbp - 8], rdi
0x7f68fc8c8414:	mov	rax, qword ptr [rbp - 8]
0x7f68fc8c8418:	mov	rdi, rax
0x7f68fc8c841b:	call	0x7f68fc8cfd9e
----------------------------------------------------------------------------------------------------
At  0x7f68fd94350e
0x7f68fd94350e:	push	rbp
0x7f68fd94350f:	mov	rbp, rsp
0x7f68fd943512:	push	rbx
0x7f68fd943513:	sub	rsp, 0x28
0x7f68fd943517:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fd94351b:	mov	qword ptr [rbp - 0x30], rsi
0x7f68fd94351f:	mov	rax, qword ptr fs:[0x28]
0x7f68fd943528:	mov	qword ptr [rbp - 0x18], rax
0x7f68fd94352c:	xor	eax, eax
0x7f68fd94352e:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fd943532:	movzx	eax, byte ptr [rax + 4]
0x7f68fd943536:	movzx	eax, al
0x7f68fd943539:	and	eax, 2
0x7f68fd94353c:	test	eax, eax
0x7f68fd94353e:	je	0x7f68fd943560
----------------------------------------------------------------------------------------------------
At  0x7f68fda39494
0x7f68fda39494:	push	rbp
0x7f68fda39495:	mov	rbp, rsp
0x7f68fda39498:	push	rbx
0x7f68fda39499:	sub	rsp, 0x48
0x7f68fda3949d:	mov	qword ptr [rbp - 0x38], rdi
0x7f68fda394a1:	mov	dword ptr [rbp - 0x3c], esi
0x7f68fda394a4:	mov	qword ptr [rbp - 0x48], rdx
0x7f68fda394a8:	mov	rax, qword ptr fs:[0x28]
0x7f68fda394b1:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda394b5:	xor	eax, eax
0x7f68fda394b7:	mov	eax, dword ptr [rbp - 0x3c]
0x7f68fda394ba:	movsxd	rdx, eax
0x7f68fda394bd:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fda394c1:	mov	rsi, rdx
0x7f68fda394c4:	mov	rdi, rax
0x7f68fda394c7:	call	0x7f68fb649f6e
----------------------------------------------------------------------------------------------------
At  0x7f68fb647dc6
0x7f68fb647dc6:	push	rbp
0x7f68fb647dc7:	mov	rbp, rsp
0x7f68fb647dca:	push	rbx
0x7f68fb647dcb:	sub	rsp, 0x28
0x7f68fb647dcf:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb647dd3:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fb647dd6:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fb647dda:	mov	eax, ecx
0x7f68fb647ddc:	mov	byte ptr [rbp - 0x20], al
0x7f68fb647ddf:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb647de3:	mov	ebx, dword ptr [rax + 0x78]
0x7f68fb647de6:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fb647de9:	mov	edi, eax
0x7f68fb647deb:	call	0x7f68fb647daf
----------------------------------------------------------------------------------------------------
At  0x7f68fb647e44
0x7f68fb647e44:	push	rbp
0x7f68fb647e45:	mov	rbp, rsp
0x7f68fb647e48:	sub	rsp, 0x20
0x7f68fb647e4c:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647e50:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647e54:	mov	eax, edx
0x7f68fb647e56:	mov	byte ptr [rbp - 0x14], al
0x7f68fb647e59:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647e5d:	mov	rax, qword ptr [rax + 8]
0x7f68fb647e61:	test	rax, rax
0x7f68fb647e64:	je	0x7f68fb647e85
----------------------------------------------------------------------------------------------------
At  0x7f68fb64cade
0x7f68fb64cade:	push	rbp
0x7f68fb64cadf:	mov	rbp, rsp
0x7f68fb64cae2:	sub	rsp, 0x20
0x7f68fb64cae6:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb64caea:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fb64caee:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb64caf2:	mov	rdi, rax
0x7f68fb64caf5:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj28_29_8[1:1] == 0)>
1  <Bool uaf_obj28_29_8[2:2] == 0>
2  <Bool uaf_obj79_80_8 == 0>
3  <Bool uaf_obj76_77_8 == 0>
4  <Bool uaf_obj74_75_8 == 0>
5  <Bool uaf_obj72_73_8 == 0>
6  <Bool uaf_obj77_78_8 == 0>
7  <Bool uaf_obj78_79_8 == 0>
8  <Bool uaf_obj75_76_8 == 192>
9  <Bool uaf_obj73_74_8 == 2>
10  <Bool mem_c0000221_156_56{UNINITIALIZED} == 0xc00009>
11  <Bool mem_c0000220_155_8{UNINITIALIZED} == 0>
12  <Bool !(mem_c0000911_176_56{UNINITIALIZED}[28:28] == 0)>
13  <Bool mem_c0000919_210_56{UNINITIALIZED} == 0x0>
14  <Bool mem_c0000918_209_8{UNINITIALIZED} == 0>
15  <Bool mem_c0000991_240_56{UNINITIALIZED} == 0xc00010>
16  <Bool mem_c0000990_239_8{UNINITIALIZED} == 0>
17  <Bool !(mem_c0001055_304_24{UNINITIALIZED}[23:23] == 1)>
18  <Bool mem_c0001049_397_56{UNINITIALIZED} == 0xc00017>
19  <Bool mem_c0001048_396_8{UNINITIALIZED} == 0>
20  <Bool !(mem_c0001779_451_24{UNINITIALIZED}[4:4] == 0)>
21  <Bool mem_c0001718_590_8{UNINITIALIZED} == 0>
22  <Bool mem_c0001719_591_56{UNINITIALIZED} == 0xc0001e>
23  <Bool !(mem_c0001e04_603_8{UNINITIALIZED}[1:1] == 0)>
24  <Bool mem_c0000921_847_56{UNINITIALIZED} == 0x0>
25  <Bool mem_c0000920_846_8{UNINITIALIZED} == 0>
26  <Bool mem_c0001040_970_8{UNINITIALIZED} == 0>
27  <Bool mem_c0001041_971_56{UNINITIALIZED} == 0xc00025>
28  <Bool !(mem_c0002500_1013_8{UNINITIALIZED} == 0) || !(mem_c0002501_1014_56{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0002521_1045_56{UNINITIALIZED} .. mem_c0002520_1044_8{UNINITIALIZED}>  r8: <BV64 0x8>
rbx: <BV64 0x0 .. mem_c0001e05_653_8{UNINITIALIZED}>  r9: <BV64 0x8>
rcx: <BV64 mem_c0000991_240_56{UNINITIALIZED} .. mem_c0000990_239_8{UNINITIALIZED}>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 mem_c0000911_176_56{UNINITIALIZED} .. mem_c0000910_175_8{UNINITIALIZED}[7:5] .. 1 .. mem_c0000910_175_8{UNINITIALIZED}[3:0]>  r11: <BV64 0x2>
rsi: <BV64 0x4>  r12: <BV64 0x7ffdf0058750>
rdi: <BV64 mem_c0001041_1002_56{UNINITIALIZED} .. mem_c0001040_1001_8{UNINITIALIZED}>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057a60>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf0057a90>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64

   00 | ------ IMark(0x7f68fba991f9, 3, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t2 = GET:I64(rdx)
   03 | STle(t0) = t2
   04 | PUT(rip) = 0x00007f68fba991fc
   05 | ------ IMark(0x7f68fba991fc, 4, 0) ------
   06 | t4 = GET:I64(rbp)
   07 | t3 = Add64(t4,0xfffffffffffffff8)
   08 | t5 = LDle:I64(t3)
   09 | PUT(rax) = t5
   10 | ------ IMark(0x7f68fba99200, 2, 0) ------
   NEXT: PUT(rip) = 0x00007f68fba9921f; Ijk_Boring
}
0x7f68fba991f9:	mov	qword ptr [rax], rdx
0x7f68fba991fc:	mov	rax, qword ptr [rbp - 8]
0x7f68fba99200:	jmp	0x7f68fba9921f
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000220_155_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x90      OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000910_175_8{UNINITIALIZED}>  0x10
<BV8 mem_c0000918_209_8{UNINITIALIZED}>  0x18
<BV8 mem_c0000990_239_8{UNINITIALIZED}>  0x90
<BV8 mem_c0000940_872_8{UNINITIALIZED}>  0x40

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_4        0x0
0x40      OBJ_6        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001054_303_8{UNINITIALIZED}>   0x54
<BV8 mem_c0001048_396_8{UNINITIALIZED}>   0x48
<BV8 mem_c0001040_1001_8{UNINITIALIZED}>  0x40

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x18      OBJ_5        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001778_450_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001718_590_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001e04_603_8{UNINITIALIZED}>  0x4
<BV8 mem_c0001e05_653_8{UNINITIALIZED}>  0x5

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002520_1044_8{UNINITIALIZED}>  0x20

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000221_156_56{UNINITIALIZED}>
<BV56 mem_c0000911_176_56{UNINITIALIZED}>
<BV56 mem_c0000919_210_56{UNINITIALIZED}>
<BV56 mem_c0000991_240_56{UNINITIALIZED}>
<BV24 mem_c0001055_304_24{UNINITIALIZED}>
<BV56 mem_c0001049_397_56{UNINITIALIZED}>
<BV24 mem_c0001779_451_24{UNINITIALIZED}>
<BV56 mem_c0001719_591_56{UNINITIALIZED}>
<BV56 mem_c0000941_873_56{UNINITIALIZED}>
<BV56 mem_c0001041_1002_56{UNINITIALIZED}>
<BV56 mem_c0002521_1045_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140088875520505
Write  <BV64 0x8>  bytes to  <BV64 0x10 + (mem_c0000221_156_56{UNINITIALIZED} .. mem_c0000220_155_8{UNINITIALIZED})>
with expression : <BV64 Reverse(mem_c0000910_175_8{UNINITIALIZED} .. Reverse(mem_c0000911_176_56{UNINITIALIZED})) | 0x10>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fba99182
0x7f68fba99182:	push	rbp
0x7f68fba99183:	mov	rbp, rsp
0x7f68fba99186:	sub	rsp, 0x30
0x7f68fba9918a:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fba9918e:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fba99192:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fba99196:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fba9919a:	mov	rdi, rax
0x7f68fba9919d:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fba942a8
0x7f68fba942a8:	push	rbp
0x7f68fba942a9:	mov	rbp, rsp
0x7f68fba942ac:	sub	rsp, 0x50
0x7f68fba942b0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fba942b4:	mov	rax, qword ptr fs:[0x28]
0x7f68fba942bd:	mov	qword ptr [rbp - 8], rax
0x7f68fba942c1:	xor	eax, eax
0x7f68fba942c3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fba942c7:	mov	rdi, rax
0x7f68fba942ca:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fba8fa68
0x7f68fba8fa68:	push	rbp
0x7f68fba8fa69:	mov	rbp, rsp
0x7f68fba8fa6c:	sub	rsp, 0x10
0x7f68fba8fa70:	mov	qword ptr [rbp - 8], rdi
0x7f68fba8fa74:	mov	rax, qword ptr [rbp - 8]
0x7f68fba8fa78:	mov	rdi, rax
0x7f68fba8fa7b:	call	0x7f68fba942a8
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c8458
0x7f68fc8c8458:	push	rbp
0x7f68fc8c8459:	mov	rbp, rsp
0x7f68fc8c845c:	sub	rsp, 0x10
0x7f68fc8c8460:	mov	qword ptr [rbp - 8], rdi
0x7f68fc8c8464:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fc8c8468:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fc8c846c:	mov	rdi, rax
0x7f68fc8c846f:	call	0x7f68fba8fa68
----------------------------------------------------------------------------------------------------
At  0x7f68fd94350e
0x7f68fd94350e:	push	rbp
0x7f68fd94350f:	mov	rbp, rsp
0x7f68fd943512:	push	rbx
0x7f68fd943513:	sub	rsp, 0x28
0x7f68fd943517:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fd94351b:	mov	qword ptr [rbp - 0x30], rsi
0x7f68fd94351f:	mov	rax, qword ptr fs:[0x28]
0x7f68fd943528:	mov	qword ptr [rbp - 0x18], rax
0x7f68fd94352c:	xor	eax, eax
0x7f68fd94352e:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fd943532:	movzx	eax, byte ptr [rax + 4]
0x7f68fd943536:	movzx	eax, al
0x7f68fd943539:	and	eax, 2
0x7f68fd94353c:	test	eax, eax
0x7f68fd94353e:	je	0x7f68fd943560
----------------------------------------------------------------------------------------------------
At  0x7f68fda39494
0x7f68fda39494:	push	rbp
0x7f68fda39495:	mov	rbp, rsp
0x7f68fda39498:	push	rbx
0x7f68fda39499:	sub	rsp, 0x48
0x7f68fda3949d:	mov	qword ptr [rbp - 0x38], rdi
0x7f68fda394a1:	mov	dword ptr [rbp - 0x3c], esi
0x7f68fda394a4:	mov	qword ptr [rbp - 0x48], rdx
0x7f68fda394a8:	mov	rax, qword ptr fs:[0x28]
0x7f68fda394b1:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda394b5:	xor	eax, eax
0x7f68fda394b7:	mov	eax, dword ptr [rbp - 0x3c]
0x7f68fda394ba:	movsxd	rdx, eax
0x7f68fda394bd:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fda394c1:	mov	rsi, rdx
0x7f68fda394c4:	mov	rdi, rax
0x7f68fda394c7:	call	0x7f68fb649f6e
----------------------------------------------------------------------------------------------------
At  0x7f68fb647dc6
0x7f68fb647dc6:	push	rbp
0x7f68fb647dc7:	mov	rbp, rsp
0x7f68fb647dca:	push	rbx
0x7f68fb647dcb:	sub	rsp, 0x28
0x7f68fb647dcf:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb647dd3:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fb647dd6:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fb647dda:	mov	eax, ecx
0x7f68fb647ddc:	mov	byte ptr [rbp - 0x20], al
0x7f68fb647ddf:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb647de3:	mov	ebx, dword ptr [rax + 0x78]
0x7f68fb647de6:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fb647de9:	mov	edi, eax
0x7f68fb647deb:	call	0x7f68fb647daf
----------------------------------------------------------------------------------------------------
At  0x7f68fb647e44
0x7f68fb647e44:	push	rbp
0x7f68fb647e45:	mov	rbp, rsp
0x7f68fb647e48:	sub	rsp, 0x20
0x7f68fb647e4c:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647e50:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647e54:	mov	eax, edx
0x7f68fb647e56:	mov	byte ptr [rbp - 0x14], al
0x7f68fb647e59:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647e5d:	mov	rax, qword ptr [rax + 8]
0x7f68fb647e61:	test	rax, rax
0x7f68fb647e64:	je	0x7f68fb647e85
----------------------------------------------------------------------------------------------------
At  0x7f68fb64cade
0x7f68fb64cade:	push	rbp
0x7f68fb64cadf:	mov	rbp, rsp
0x7f68fb64cae2:	sub	rsp, 0x20
0x7f68fb64cae6:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb64caea:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fb64caee:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb64caf2:	mov	rdi, rax
0x7f68fb64caf5:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj28_29_8[1:1] == 0)>
1  <Bool uaf_obj28_29_8[2:2] == 0>
2  <Bool uaf_obj79_80_8 == 0>
3  <Bool uaf_obj76_77_8 == 0>
4  <Bool uaf_obj74_75_8 == 0>
5  <Bool uaf_obj72_73_8 == 0>
6  <Bool uaf_obj77_78_8 == 0>
7  <Bool uaf_obj78_79_8 == 0>
8  <Bool uaf_obj75_76_8 == 192>
9  <Bool uaf_obj73_74_8 == 2>
10  <Bool mem_c0000221_156_56{UNINITIALIZED} == 0xc00009>
11  <Bool mem_c0000220_155_8{UNINITIALIZED} == 0>
12  <Bool !(mem_c0000911_176_56{UNINITIALIZED}[28:28] == 0)>
13  <Bool mem_c0000919_210_56{UNINITIALIZED} == 0x0>
14  <Bool mem_c0000918_209_8{UNINITIALIZED} == 0>
15  <Bool mem_c0000991_240_56{UNINITIALIZED} == 0xc00010>
16  <Bool mem_c0000990_239_8{UNINITIALIZED} == 0>
17  <Bool !(mem_c0001055_304_24{UNINITIALIZED}[23:23] == 1)>
18  <Bool mem_c0001049_397_56{UNINITIALIZED} == 0xc00017>
19  <Bool mem_c0001048_396_8{UNINITIALIZED} == 0>
20  <Bool !(mem_c0001779_451_24{UNINITIALIZED}[4:4] == 0)>
21  <Bool mem_c0001718_590_8{UNINITIALIZED} == 0>
22  <Bool mem_c0001719_591_56{UNINITIALIZED} == 0xc0001e>
23  <Bool mem_c0001e04_603_8{UNINITIALIZED}[1:1] == 0>
24  <Bool !(mem_c0001e04_603_8{UNINITIALIZED}[2:2] == 0)>
25  <Bool mem_c0000941_873_56{UNINITIALIZED} == 0x0>
26  <Bool mem_c0000940_872_8{UNINITIALIZED} == 0>
27  <Bool mem_c0001040_1001_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001041_1002_56{UNINITIALIZED} == 0xc00025>
29  <Bool !(mem_c0002520_1044_8{UNINITIALIZED} == 0) || !(mem_c0002521_1045_56{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0004551_2827_56{UNINITIALIZED} .. mem_c0004550_2826_8{UNINITIALIZED}>  r8: <BV64 mem_c0000221_174_56{UNINITIALIZED} .. mem_c0000220_173_8{UNINITIALIZED}>
rbx: <BV64 mem_c0001019_1547_56{UNINITIALIZED} .. mem_c0001018_1546_8{UNINITIALIZED}>  r9: <BV64 0x8>
rcx: <BV64 0xc1>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 0x30 + (mem_c0002c21_2737_56{UNINITIALIZED} .. mem_c0002c20_2736_8{UNINITIALIZED})>  r11: <BV64 0x2>
rsi: <BV64 0xc1>  r12: <BV64 0x7ffdf0057820>
rdi: <BV64 0x1248 + (mem_c0002c21_2737_56{UNINITIALIZED} .. mem_c0002c20_2736_8{UNINITIALIZED})>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057630>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf0057670>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64

   00 | ------ IMark(0x7f68fdb66c15, 4, 0) ------
   01 | t7 = GET:I64(rax)
   02 | t6 = Add64(t7,0x0000000000000010)
   03 | t8 = GET:I64(rdx)
   04 | STle(t6) = t8
   05 | PUT(rip) = 0x00007f68fdb66c19
   06 | ------ IMark(0x7f68fdb66c19, 4, 0) ------
   07 | t10 = GET:I64(rbp)
   08 | t9 = Add64(t10,0xffffffffffffffd8)
   09 | t11 = LDle:I64(t9)
   10 | ------ IMark(0x7f68fdb66c1d, 7, 0) ------
   11 | t12 = Add64(t11,0x00000000000013f8)
   12 | PUT(rdx) = t12
   13 | PUT(rip) = 0x00007f68fdb66c24
   14 | ------ IMark(0x7f68fdb66c24, 4, 0) ------
   15 | t14 = Add64(t10,0xffffffffffffffc8)
   16 | t16 = LDle:I64(t14)
   17 | PUT(rax) = t16
   18 | ------ IMark(0x7f68fdb66c28, 3, 0) ------
   19 | PUT(rsi) = t16
   20 | ------ IMark(0x7f68fdb66c2b, 3, 0) ------
   21 | PUT(rdi) = t12
   22 | PUT(rip) = 0x00007f68fdb66c2e
   23 | ------ IMark(0x7f68fdb66c2e, 5, 0) ------
   24 | t20 = GET:I64(rsp)
   25 | t19 = Sub64(t20,0x0000000000000008)
   26 | PUT(rsp) = t19
   27 | STle(t19) = 0x00007f68fdb66c33
   28 | t21 = Sub64(t19,0x0000000000000080)
   29 | ====== AbiHint(0xt21, 128, 0x00007f68fa1bff08) ======
   NEXT: PUT(rip) = 0x00007f68fa1bff08; Ijk_Call
}
0x7f68fdb66c15:	mov	qword ptr [rax + 0x10], rdx
0x7f68fdb66c19:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fdb66c1d:	lea	rdx, [rax + 0x13f8]
0x7f68fdb66c24:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fdb66c28:	mov	rsi, rax
0x7f68fdb66c2b:	mov	rdi, rdx
0x7f68fdb66c2e:	call	0x7f68fa1bff08
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000220_173_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x90      OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000910_195_8{UNINITIALIZED}>   0x10
<BV8 mem_c0000918_244_8{UNINITIALIZED}>   0x18
<BV8 mem_c0000990_298_8{UNINITIALIZED}>   0x90
<BV8 mem_c0000940_913_8{UNINITIALIZED}>   0x40
<BV8 mem_c0000908_2469_8{UNINITIALIZED}>  0x8
<BV8 mem_c0000900_2642_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_4        0x0
0x40      OBJ_6        0x0
0x18      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001054_388_8{UNINITIALIZED}>   0x54
<BV8 mem_c0001048_493_8{UNINITIALIZED}>   0x48
<BV8 mem_c0001040_1046_8{UNINITIALIZED}>  0x40
<BV8 mem_c0001018_1546_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x18      OBJ_5        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001778_533_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001718_672_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001e04_685_8{UNINITIALIZED}>  0x4
<BV8 mem_c0001e05_736_8{UNINITIALIZED}>  0x5

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002520_1095_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c00
maximum memory range     [  0xc0002a00  ,  0xc0003100  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c20_2736_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0003300
maximum memory range     [  0xc0003100  ,  0xc0004548  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0004548
maximum memory range     [  0xc0004548  ,  0xc0004c48  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_9        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0004548_2814_8{UNINITIALIZED}>  0x0
<BV8 mem_c0004748_2816_8{UNINITIALIZED}>  0x200
<BV8 mem_c0004550_2826_8{UNINITIALIZED}>  0x8
<BV8 mem_c0004558_2859_8{UNINITIALIZED}>  0x10

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000221_174_56{UNINITIALIZED}>
<BV56 mem_c0000911_196_56{UNINITIALIZED}>
<BV56 mem_c0000919_245_56{UNINITIALIZED}>
<BV56 mem_c0000991_299_56{UNINITIALIZED}>
<BV24 mem_c0001055_389_24{UNINITIALIZED}>
<BV56 mem_c0001049_494_56{UNINITIALIZED}>
<BV24 mem_c0001779_534_24{UNINITIALIZED}>
<BV56 mem_c0001719_673_56{UNINITIALIZED}>
<BV56 mem_c0000941_914_56{UNINITIALIZED}>
<BV56 mem_c0001041_1047_56{UNINITIALIZED}>
<BV56 mem_c0002521_1096_56{UNINITIALIZED}>
<BV56 mem_c0001019_1547_56{UNINITIALIZED}>
<BV56 mem_c0000909_2470_56{UNINITIALIZED}>
<BV56 mem_c0000901_2643_56{UNINITIALIZED}>
<BV56 mem_c0002c21_2737_56{UNINITIALIZED}>
<BV56 mem_c0004549_2815_56{UNINITIALIZED}>
<BV24 mem_c0004749_2817_24{UNINITIALIZED}>
<BV56 mem_c0004551_2827_56{UNINITIALIZED}>
<BV56 mem_c0004559_2860_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140088909917205
Write  <BV64 0x8>  bytes to  <BV64 (mem_c0002c21_2737_56{UNINITIALIZED} .. mem_c0002c20_2736_8{UNINITIALIZED}) + 0x1258>
with expression : <BV64 Reverse(mem_c0004558_2859_8{UNINITIALIZED} .. Reverse(mem_c0004559_2860_56{UNINITIALIZED})) + 0x1>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fdb66b2a
0x7f68fdb66b2a:	push	rbp
0x7f68fdb66b2b:	mov	rbp, rsp
0x7f68fdb66b2e:	sub	rsp, 0x40
0x7f68fdb66b32:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fdb66b36:	mov	dword ptr [rbp - 0x2c], esi
0x7f68fdb66b39:	mov	qword ptr [rbp - 0x38], rdx
0x7f68fdb66b3d:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fdb66b41:	mov	rdi, rax
0x7f68fdb66b44:	call	0x7f68fa1bf2f2
----------------------------------------------------------------------------------------------------
At  0x7f68fd931536
0x7f68fd931536:	push	rbp
0x7f68fd931537:	mov	rbp, rsp
0x7f68fd93153a:	sub	rsp, 0x20
0x7f68fd93153e:	mov	qword ptr [rbp - 8], rdi
0x7f68fd931542:	mov	dword ptr [rbp - 0xc], esi
0x7f68fd931545:	mov	qword ptr [rbp - 0x18], rdx
0x7f68fd931549:	mov	rdx, qword ptr [rbp - 0x18]
0x7f68fd93154d:	mov	ecx, dword ptr [rbp - 0xc]
0x7f68fd931550:	mov	rax, qword ptr [rbp - 8]
0x7f68fd931554:	mov	esi, ecx
0x7f68fd931556:	mov	rdi, rax
0x7f68fd931559:	call	0x7f68fdb66b2a
----------------------------------------------------------------------------------------------------
At  0x7f68fd93158c
0x7f68fd93158c:	push	rbp
0x7f68fd93158d:	mov	rbp, rsp
0x7f68fd931590:	sub	rsp, 0x30
0x7f68fd931594:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fd931598:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fd93159b:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fd93159f:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fd9315a3:	lea	rcx, [rax + 0x30]
0x7f68fd9315a7:	mov	rdx, qword ptr [rbp - 0x28]
0x7f68fd9315ab:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fd9315ae:	mov	esi, eax
0x7f68fd9315b0:	mov	rdi, rcx
0x7f68fd9315b3:	call	0x7f68fd931536
----------------------------------------------------------------------------------------------------
At  0x7f68fd931dc3
0x7f68fd931dc3:	push	rbp
0x7f68fd931dc4:	mov	rbp, rsp
0x7f68fd931dc7:	sub	rsp, 0x10
0x7f68fd931dcb:	mov	qword ptr [rbp - 8], rdi
0x7f68fd931dcf:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fd931dd3:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fd931dd7:	mov	rdi, rax
0x7f68fd931dda:	call	0x7f68fb647c64
----------------------------------------------------------------------------------------------------
At  0x7f68fda3d72e
0x7f68fda3d72e:	push	rbp
0x7f68fda3d72f:	mov	rbp, rsp
0x7f68fda3d732:	push	rbx
0x7f68fda3d733:	sub	rsp, 0xf8
0x7f68fda3d73a:	mov	qword ptr [rbp - 0xe8], rdi
0x7f68fda3d741:	mov	dword ptr [rbp - 0xec], esi
0x7f68fda3d747:	mov	qword ptr [rbp - 0xf8], rdx
0x7f68fda3d74e:	mov	rax, qword ptr fs:[0x28]
0x7f68fda3d757:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda3d75b:	xor	eax, eax
0x7f68fda3d75d:	cmp	dword ptr [rbp - 0xec], 0x17
0x7f68fda3d764:	ja	0x7f68fda3e096
----------------------------------------------------------------------------------------------------
At  0x7f68fda3ceac
0x7f68fda3ceac:	push	rbp
0x7f68fda3cead:	mov	rbp, rsp
0x7f68fda3ceb0:	push	r12
0x7f68fda3ceb2:	push	rbx
0x7f68fda3ceb3:	sub	rsp, 0x1a0
0x7f68fda3ceba:	mov	qword ptr [rbp - 0x198], rdi
0x7f68fda3cec1:	mov	dword ptr [rbp - 0x19c], esi
0x7f68fda3cec7:	mov	qword ptr [rbp - 0x1a8], rdx
0x7f68fda3cece:	mov	rax, qword ptr fs:[0x28]
0x7f68fda3ced7:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda3cedb:	xor	eax, eax
0x7f68fda3cedd:	mov	eax, dword ptr [rbp - 0x19c]
0x7f68fda3cee3:	mov	edi, eax
0x7f68fda3cee5:	call	0x7f68fda80fa9
----------------------------------------------------------------------------------------------------
At  0x7f68fba99182
0x7f68fba99182:	push	rbp
0x7f68fba99183:	mov	rbp, rsp
0x7f68fba99186:	sub	rsp, 0x30
0x7f68fba9918a:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fba9918e:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fba99192:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fba99196:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fba9919a:	mov	rdi, rax
0x7f68fba9919d:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fba942a8
0x7f68fba942a8:	push	rbp
0x7f68fba942a9:	mov	rbp, rsp
0x7f68fba942ac:	sub	rsp, 0x50
0x7f68fba942b0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fba942b4:	mov	rax, qword ptr fs:[0x28]
0x7f68fba942bd:	mov	qword ptr [rbp - 8], rax
0x7f68fba942c1:	xor	eax, eax
0x7f68fba942c3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fba942c7:	mov	rdi, rax
0x7f68fba942ca:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fba8fa68
0x7f68fba8fa68:	push	rbp
0x7f68fba8fa69:	mov	rbp, rsp
0x7f68fba8fa6c:	sub	rsp, 0x10
0x7f68fba8fa70:	mov	qword ptr [rbp - 8], rdi
0x7f68fba8fa74:	mov	rax, qword ptr [rbp - 8]
0x7f68fba8fa78:	mov	rdi, rax
0x7f68fba8fa7b:	call	0x7f68fba942a8
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c8458
0x7f68fc8c8458:	push	rbp
0x7f68fc8c8459:	mov	rbp, rsp
0x7f68fc8c845c:	sub	rsp, 0x10
0x7f68fc8c8460:	mov	qword ptr [rbp - 8], rdi
0x7f68fc8c8464:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fc8c8468:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fc8c846c:	mov	rdi, rax
0x7f68fc8c846f:	call	0x7f68fba8fa68
----------------------------------------------------------------------------------------------------
At  0x7f68fd94350e
0x7f68fd94350e:	push	rbp
0x7f68fd94350f:	mov	rbp, rsp
0x7f68fd943512:	push	rbx
0x7f68fd943513:	sub	rsp, 0x28
0x7f68fd943517:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fd94351b:	mov	qword ptr [rbp - 0x30], rsi
0x7f68fd94351f:	mov	rax, qword ptr fs:[0x28]
0x7f68fd943528:	mov	qword ptr [rbp - 0x18], rax
0x7f68fd94352c:	xor	eax, eax
0x7f68fd94352e:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fd943532:	movzx	eax, byte ptr [rax + 4]
0x7f68fd943536:	movzx	eax, al
0x7f68fd943539:	and	eax, 2
0x7f68fd94353c:	test	eax, eax
0x7f68fd94353e:	je	0x7f68fd943560
----------------------------------------------------------------------------------------------------
At  0x7f68fda39494
0x7f68fda39494:	push	rbp
0x7f68fda39495:	mov	rbp, rsp
0x7f68fda39498:	push	rbx
0x7f68fda39499:	sub	rsp, 0x48
0x7f68fda3949d:	mov	qword ptr [rbp - 0x38], rdi
0x7f68fda394a1:	mov	dword ptr [rbp - 0x3c], esi
0x7f68fda394a4:	mov	qword ptr [rbp - 0x48], rdx
0x7f68fda394a8:	mov	rax, qword ptr fs:[0x28]
0x7f68fda394b1:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda394b5:	xor	eax, eax
0x7f68fda394b7:	mov	eax, dword ptr [rbp - 0x3c]
0x7f68fda394ba:	movsxd	rdx, eax
0x7f68fda394bd:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fda394c1:	mov	rsi, rdx
0x7f68fda394c4:	mov	rdi, rax
0x7f68fda394c7:	call	0x7f68fb649f6e
----------------------------------------------------------------------------------------------------
At  0x7f68fb647dc6
0x7f68fb647dc6:	push	rbp
0x7f68fb647dc7:	mov	rbp, rsp
0x7f68fb647dca:	push	rbx
0x7f68fb647dcb:	sub	rsp, 0x28
0x7f68fb647dcf:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb647dd3:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fb647dd6:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fb647dda:	mov	eax, ecx
0x7f68fb647ddc:	mov	byte ptr [rbp - 0x20], al
0x7f68fb647ddf:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb647de3:	mov	ebx, dword ptr [rax + 0x78]
0x7f68fb647de6:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fb647de9:	mov	edi, eax
0x7f68fb647deb:	call	0x7f68fb647daf
----------------------------------------------------------------------------------------------------
At  0x7f68fb647e44
0x7f68fb647e44:	push	rbp
0x7f68fb647e45:	mov	rbp, rsp
0x7f68fb647e48:	sub	rsp, 0x20
0x7f68fb647e4c:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647e50:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647e54:	mov	eax, edx
0x7f68fb647e56:	mov	byte ptr [rbp - 0x14], al
0x7f68fb647e59:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647e5d:	mov	rax, qword ptr [rax + 8]
0x7f68fb647e61:	test	rax, rax
0x7f68fb647e64:	je	0x7f68fb647e85
----------------------------------------------------------------------------------------------------
At  0x7f68fb64cade
0x7f68fb64cade:	push	rbp
0x7f68fb64cadf:	mov	rbp, rsp
0x7f68fb64cae2:	sub	rsp, 0x20
0x7f68fb64cae6:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb64caea:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fb64caee:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb64caf2:	mov	rdi, rax
0x7f68fb64caf5:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj28_29_8[1:1] == 0>
1  <Bool uaf_obj28_29_8[2:2] == 0>
2  <Bool !(uaf_obj25_26_8[3:3] == 0)>
3  <Bool uaf_obj79_80_8 == 0>
4  <Bool uaf_obj76_77_8 == 0>
5  <Bool uaf_obj74_75_8 == 0>
6  <Bool uaf_obj72_73_8 == 0>
7  <Bool uaf_obj77_78_8 == 0>
8  <Bool uaf_obj78_79_8 == 0>
9  <Bool uaf_obj75_76_8 == 192>
10  <Bool uaf_obj73_74_8 == 2>
11  <Bool mem_c0000220_173_8{UNINITIALIZED} == 0>
12  <Bool mem_c0000221_174_56{UNINITIALIZED} == 0xc00009>
13  <Bool !(mem_c0000911_196_56{UNINITIALIZED}[28:28] == 0)>
14  <Bool mem_c0000919_245_56{UNINITIALIZED} == 0x0>
15  <Bool mem_c0000918_244_8{UNINITIALIZED} == 0>
16  <Bool mem_c0000991_299_56{UNINITIALIZED} == 0xc00010>
17  <Bool mem_c0000990_298_8{UNINITIALIZED} == 0>
18  <Bool !(mem_c0001055_389_24{UNINITIALIZED}[23:23] == 1)>
19  <Bool mem_c0001049_494_56{UNINITIALIZED} == 0xc00017>
20  <Bool mem_c0001048_493_8{UNINITIALIZED} == 0>
21  <Bool !(mem_c0001779_534_24{UNINITIALIZED}[4:4] == 0)>
22  <Bool mem_c0001719_673_56{UNINITIALIZED} == 0xc0001e>
23  <Bool mem_c0001718_672_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001e04_685_8{UNINITIALIZED}[1:1] == 0>
25  <Bool !(mem_c0001e04_685_8{UNINITIALIZED}[2:2] == 0)>
26  <Bool mem_c0000941_914_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0000940_913_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001041_1047_56{UNINITIALIZED} == 0xc00025>
29  <Bool mem_c0001040_1046_8{UNINITIALIZED} == 0>
30  <Bool mem_c0002520_1095_8{UNINITIALIZED} == 0>
31  <Bool mem_c0002521_1096_56{UNINITIALIZED} == 0x0>
32  <Bool !(mem_c0001054_388_8{UNINITIALIZED}[4:4] == 0)>
33  <Bool mem_c0000908_2469_8{UNINITIALIZED} == 0>
34  <Bool mem_c0000909_2470_56{UNINITIALIZED} == 0x0>
35  <Bool mem_c0000901_2643_56{UNINITIALIZED} == 0x0>
36  <Bool mem_c0000900_2642_8{UNINITIALIZED} == 0>
37  <Bool mem_c0001019_1547_56{UNINITIALIZED} == 0xc0002c>
38  <Bool mem_c0001018_1546_8{UNINITIALIZED} == 0>
39  <Bool mem_c0002c21_2737_56{UNINITIALIZED} == 0xc00033>
40  <Bool mem_c0002c20_2736_8{UNINITIALIZED} == 0>
41  <Bool mem_c0004548_2814_8{UNINITIALIZED} == 72>
42  <Bool mem_c0004549_2815_56{UNINITIALIZED} == 0xc00047>
43  <Bool !(mem_c0004550_2826_8{UNINITIALIZED} == 0) || !(mem_c0004551_2827_56{UNINITIALIZED} == 0x0)>
44  <Bool mem_c0004749_2817_24{UNINITIALIZED} == 0x0>
45  <Bool mem_c0004748_2816_8{UNINITIALIZED} == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x1>  r8: <BV64 0x8>
rbx: <BV64 mem_c0001019_1547_56{UNINITIALIZED} .. mem_c0001018_1546_8{UNINITIALIZED}>  r9: <BV64 0x8>
rcx: <BV64 0xffffffff>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 0x0 .. 0xffffffff + (mem_c0004749_2817_24{UNINITIALIZED} .. mem_c0004748_2816_8{UNINITIALIZED})>  r11: <BV64 0x2>
rsi: <BV64 0xffffffffffffffff + (0x0 .. mem_c0004749_2817_24{UNINITIALIZED} .. mem_c0004748_2816_8{UNINITIALIZED})>  r12: <BV64 0x7ffdf0057820>
rdi: <BV64 0x1248 + (mem_c0002c21_2737_56{UNINITIALIZED} .. mem_c0002c20_2736_8{UNINITIALIZED})>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057590>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf00575d0>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I32 t5:Ity_I32 t6:Ity_I32 t7:Ity_I32 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I32 t15:Ity_I32 t16:Ity_I64 t17:Ity_I32 t18:Ity_I64 t19:Ity_I64 t20:Ity_I1 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I64 t27:Ity_I32 t28:Ity_I64 t29:Ity_I32 t30:Ity_I64 t31:Ity_I64 t32:Ity_I1 t33:Ity_I32 t34:Ity_I1

   00 | ------ IMark(0x7f68fa09da76, 2, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t8 = GET:I64(rdx)
   03 | t27 = 64to32(t8)
   04 | t7 = t27
   05 | STle(t0) = t7
   06 | PUT(rip) = 0x00007f68fa09da78
   07 | ------ IMark(0x7f68fa09da78, 4, 0) ------
   08 | t10 = GET:I64(rbp)
   09 | t9 = Add64(t10,0xffffffffffffffe8)
   10 | t11 = LDle:I64(t9)
   11 | PUT(rip) = 0x00007f68fa09da7c
   12 | ------ IMark(0x7f68fa09da7c, 3, 0) ------
   13 | t12 = LDle:I64(t11)
   14 | PUT(rip) = 0x00007f68fa09da7f
   15 | ------ IMark(0x7f68fa09da7f, 2, 0) ------
   16 | t14 = LDle:I32(t12)
   17 | t28 = 32Uto64(t14)
   18 | t13 = t28
   19 | PUT(rax) = t13
   20 | ------ IMark(0x7f68fa09da81, 2, 0) ------
   21 | t29 = 64to32(t13)
   22 | t15 = t29
   23 | PUT(cc_op) = 0x0000000000000013
   24 | t30 = 32Uto64(t15)
   25 | t19 = t30
   26 | PUT(cc_dep1) = t19
   27 | PUT(cc_dep2) = 0x0000000000000000
   28 | PUT(rip) = 0x00007f68fa09da83
   29 | ------ IMark(0x7f68fa09da83, 2, 0) ------
   30 | t33 = 64to32(t19)
   31 | t32 = CmpEQ32(t33,0x00000000)
   32 | t31 = 1Uto64(t32)
   33 | t25 = t31
   34 | t34 = 64to1(t25)
   35 | t20 = t34
   36 | if (t20) { PUT(rip) = 0x7f68fa09da85; Ijk_Boring }
   NEXT: PUT(rip) = 0x00007f68fa09da9e; Ijk_Boring
}
0x7f68fa09da76:	mov	dword ptr [rax], edx
0x7f68fa09da78:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fa09da7c:	mov	rax, qword ptr [rax]
0x7f68fa09da7f:	mov	eax, dword ptr [rax]
0x7f68fa09da81:	test	eax, eax
0x7f68fa09da83:	jne	0x7f68fa09da9e
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000220_173_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x90      OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000910_195_8{UNINITIALIZED}>   0x10
<BV8 mem_c0000918_244_8{UNINITIALIZED}>   0x18
<BV8 mem_c0000990_298_8{UNINITIALIZED}>   0x90
<BV8 mem_c0000940_913_8{UNINITIALIZED}>   0x40
<BV8 mem_c0000908_2469_8{UNINITIALIZED}>  0x8
<BV8 mem_c0000900_2642_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_4        0x0
0x40      OBJ_6        0x0
0x18      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001054_388_8{UNINITIALIZED}>   0x54
<BV8 mem_c0001048_493_8{UNINITIALIZED}>   0x48
<BV8 mem_c0001040_1046_8{UNINITIALIZED}>  0x40
<BV8 mem_c0001018_1546_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x18      OBJ_5        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001778_533_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001718_672_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001e04_685_8{UNINITIALIZED}>  0x4
<BV8 mem_c0001e05_736_8{UNINITIALIZED}>  0x5

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002520_1095_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c00
maximum memory range     [  0xc0002a00  ,  0xc0003100  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c20_2736_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0003300
maximum memory range     [  0xc0003100  ,  0xc0004548  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0004548
maximum memory range     [  0xc0004548  ,  0xc0004c48  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_9        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0004548_2814_8{UNINITIALIZED}>  0x0
<BV8 mem_c0004748_2816_8{UNINITIALIZED}>  0x200
<BV8 mem_c0004550_2826_8{UNINITIALIZED}>  0x8
<BV8 mem_c0004750_2974_8{UNINITIALIZED}>  0x208
<BV8 mem_c000474c_2987_8{UNINITIALIZED}>  0x204

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000221_174_56{UNINITIALIZED}>
<BV56 mem_c0000911_196_56{UNINITIALIZED}>
<BV56 mem_c0000919_245_56{UNINITIALIZED}>
<BV56 mem_c0000991_299_56{UNINITIALIZED}>
<BV24 mem_c0001055_389_24{UNINITIALIZED}>
<BV56 mem_c0001049_494_56{UNINITIALIZED}>
<BV24 mem_c0001779_534_24{UNINITIALIZED}>
<BV56 mem_c0001719_673_56{UNINITIALIZED}>
<BV56 mem_c0000941_914_56{UNINITIALIZED}>
<BV56 mem_c0001041_1047_56{UNINITIALIZED}>
<BV56 mem_c0002521_1096_56{UNINITIALIZED}>
<BV56 mem_c0001019_1547_56{UNINITIALIZED}>
<BV56 mem_c0000909_2470_56{UNINITIALIZED}>
<BV56 mem_c0000901_2643_56{UNINITIALIZED}>
<BV56 mem_c0002c21_2737_56{UNINITIALIZED}>
<BV56 mem_c0004549_2815_56{UNINITIALIZED}>
<BV24 mem_c0004749_2817_24{UNINITIALIZED}>
<BV56 mem_c0004551_2827_56{UNINITIALIZED}>
<BV56 mem_c0004751_2975_56{UNINITIALIZED}>
<BV24 mem_c000474d_2988_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140088848276086
Write  <BV64 0x4>  bytes to  <BV64 Reverse(mem_c0004548_2814_8{UNINITIALIZED} .. Reverse(mem_c0004549_2815_56{UNINITIALIZED}))>
with expression : <BV32 Reverse(mem_c0004748_2816_8{UNINITIALIZED} .. Reverse(mem_c0004749_2817_24{UNINITIALIZED})) + 0xffffffff>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fa09da0a
0x7f68fa09da0a:	push	rbp
0x7f68fa09da0b:	mov	rbp, rsp
0x7f68fa09da0e:	sub	rsp, 0x40
0x7f68fa09da12:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fa09da16:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fa09da1a:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fa09da1e:	mov	qword ptr [rbp - 0x30], rcx
0x7f68fa09da22:	mov	qword ptr [rbp - 0x38], r8
0x7f68fa09da26:	mov	qword ptr [rbp - 0x40], r9
0x7f68fa09da2a:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fa09da2e:	cmp	rax, qword ptr [rbp - 0x30]
0x7f68fa09da32:	je	0x7f68fa09db0f
----------------------------------------------------------------------------------------------------
At  0x7f68fa23a606
0x7f68fa23a606:	push	rbp
0x7f68fa23a607:	mov	rbp, rsp
0x7f68fa23a60a:	sub	rsp, 0x20
0x7f68fa23a60e:	mov	qword ptr [rbp - 8], rdi
0x7f68fa23a612:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fa23a616:	mov	qword ptr [rbp - 0x18], rdx
0x7f68fa23a61a:	mov	rdx, qword ptr [rbp - 0x18]
0x7f68fa23a61e:	mov	rcx, qword ptr [rbp - 0x10]
0x7f68fa23a622:	mov	rax, qword ptr [rbp - 8]
0x7f68fa23a626:	mov	rsi, rcx
0x7f68fa23a629:	mov	rdi, rax
0x7f68fa23a62c:	call	0x7f68fa23b8d8
----------------------------------------------------------------------------------------------------
At  0x7f68fa23a9ce
0x7f68fa23a9ce:	push	rbp
0x7f68fa23a9cf:	mov	rbp, rsp
0x7f68fa23a9d2:	sub	rsp, 0x10
0x7f68fa23a9d6:	mov	qword ptr [rbp - 8], rdi
0x7f68fa23a9da:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fa23a9de:	mov	rcx, qword ptr [rbp - 0x10]
0x7f68fa23a9e2:	mov	rax, qword ptr [rbp - 8]
0x7f68fa23a9e6:	mov	edx, 1
0x7f68fa23a9eb:	mov	rsi, rcx
0x7f68fa23a9ee:	mov	rdi, rax
0x7f68fa23a9f1:	call	0x7f68fa23a606
----------------------------------------------------------------------------------------------------
At  0x7f68fdb66b2a
0x7f68fdb66b2a:	push	rbp
0x7f68fdb66b2b:	mov	rbp, rsp
0x7f68fdb66b2e:	sub	rsp, 0x40
0x7f68fdb66b32:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fdb66b36:	mov	dword ptr [rbp - 0x2c], esi
0x7f68fdb66b39:	mov	qword ptr [rbp - 0x38], rdx
0x7f68fdb66b3d:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fdb66b41:	mov	rdi, rax
0x7f68fdb66b44:	call	0x7f68fa1bf2f2
----------------------------------------------------------------------------------------------------
At  0x7f68fd931536
0x7f68fd931536:	push	rbp
0x7f68fd931537:	mov	rbp, rsp
0x7f68fd93153a:	sub	rsp, 0x20
0x7f68fd93153e:	mov	qword ptr [rbp - 8], rdi
0x7f68fd931542:	mov	dword ptr [rbp - 0xc], esi
0x7f68fd931545:	mov	qword ptr [rbp - 0x18], rdx
0x7f68fd931549:	mov	rdx, qword ptr [rbp - 0x18]
0x7f68fd93154d:	mov	ecx, dword ptr [rbp - 0xc]
0x7f68fd931550:	mov	rax, qword ptr [rbp - 8]
0x7f68fd931554:	mov	esi, ecx
0x7f68fd931556:	mov	rdi, rax
0x7f68fd931559:	call	0x7f68fdb66b2a
----------------------------------------------------------------------------------------------------
At  0x7f68fd93158c
0x7f68fd93158c:	push	rbp
0x7f68fd93158d:	mov	rbp, rsp
0x7f68fd931590:	sub	rsp, 0x30
0x7f68fd931594:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fd931598:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fd93159b:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fd93159f:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fd9315a3:	lea	rcx, [rax + 0x30]
0x7f68fd9315a7:	mov	rdx, qword ptr [rbp - 0x28]
0x7f68fd9315ab:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fd9315ae:	mov	esi, eax
0x7f68fd9315b0:	mov	rdi, rcx
0x7f68fd9315b3:	call	0x7f68fd931536
----------------------------------------------------------------------------------------------------
At  0x7f68fd931dc3
0x7f68fd931dc3:	push	rbp
0x7f68fd931dc4:	mov	rbp, rsp
0x7f68fd931dc7:	sub	rsp, 0x10
0x7f68fd931dcb:	mov	qword ptr [rbp - 8], rdi
0x7f68fd931dcf:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fd931dd3:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fd931dd7:	mov	rdi, rax
0x7f68fd931dda:	call	0x7f68fb647c64
----------------------------------------------------------------------------------------------------
At  0x7f68fda3d72e
0x7f68fda3d72e:	push	rbp
0x7f68fda3d72f:	mov	rbp, rsp
0x7f68fda3d732:	push	rbx
0x7f68fda3d733:	sub	rsp, 0xf8
0x7f68fda3d73a:	mov	qword ptr [rbp - 0xe8], rdi
0x7f68fda3d741:	mov	dword ptr [rbp - 0xec], esi
0x7f68fda3d747:	mov	qword ptr [rbp - 0xf8], rdx
0x7f68fda3d74e:	mov	rax, qword ptr fs:[0x28]
0x7f68fda3d757:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda3d75b:	xor	eax, eax
0x7f68fda3d75d:	cmp	dword ptr [rbp - 0xec], 0x17
0x7f68fda3d764:	ja	0x7f68fda3e096
----------------------------------------------------------------------------------------------------
At  0x7f68fda3ceac
0x7f68fda3ceac:	push	rbp
0x7f68fda3cead:	mov	rbp, rsp
0x7f68fda3ceb0:	push	r12
0x7f68fda3ceb2:	push	rbx
0x7f68fda3ceb3:	sub	rsp, 0x1a0
0x7f68fda3ceba:	mov	qword ptr [rbp - 0x198], rdi
0x7f68fda3cec1:	mov	dword ptr [rbp - 0x19c], esi
0x7f68fda3cec7:	mov	qword ptr [rbp - 0x1a8], rdx
0x7f68fda3cece:	mov	rax, qword ptr fs:[0x28]
0x7f68fda3ced7:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda3cedb:	xor	eax, eax
0x7f68fda3cedd:	mov	eax, dword ptr [rbp - 0x19c]
0x7f68fda3cee3:	mov	edi, eax
0x7f68fda3cee5:	call	0x7f68fda80fa9
----------------------------------------------------------------------------------------------------
At  0x7f68fba99182
0x7f68fba99182:	push	rbp
0x7f68fba99183:	mov	rbp, rsp
0x7f68fba99186:	sub	rsp, 0x30
0x7f68fba9918a:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fba9918e:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fba99192:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fba99196:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fba9919a:	mov	rdi, rax
0x7f68fba9919d:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fba942a8
0x7f68fba942a8:	push	rbp
0x7f68fba942a9:	mov	rbp, rsp
0x7f68fba942ac:	sub	rsp, 0x50
0x7f68fba942b0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fba942b4:	mov	rax, qword ptr fs:[0x28]
0x7f68fba942bd:	mov	qword ptr [rbp - 8], rax
0x7f68fba942c1:	xor	eax, eax
0x7f68fba942c3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fba942c7:	mov	rdi, rax
0x7f68fba942ca:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fba8fa68
0x7f68fba8fa68:	push	rbp
0x7f68fba8fa69:	mov	rbp, rsp
0x7f68fba8fa6c:	sub	rsp, 0x10
0x7f68fba8fa70:	mov	qword ptr [rbp - 8], rdi
0x7f68fba8fa74:	mov	rax, qword ptr [rbp - 8]
0x7f68fba8fa78:	mov	rdi, rax
0x7f68fba8fa7b:	call	0x7f68fba942a8
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c8458
0x7f68fc8c8458:	push	rbp
0x7f68fc8c8459:	mov	rbp, rsp
0x7f68fc8c845c:	sub	rsp, 0x10
0x7f68fc8c8460:	mov	qword ptr [rbp - 8], rdi
0x7f68fc8c8464:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fc8c8468:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fc8c846c:	mov	rdi, rax
0x7f68fc8c846f:	call	0x7f68fba8fa68
----------------------------------------------------------------------------------------------------
At  0x7f68fd94350e
0x7f68fd94350e:	push	rbp
0x7f68fd94350f:	mov	rbp, rsp
0x7f68fd943512:	push	rbx
0x7f68fd943513:	sub	rsp, 0x28
0x7f68fd943517:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fd94351b:	mov	qword ptr [rbp - 0x30], rsi
0x7f68fd94351f:	mov	rax, qword ptr fs:[0x28]
0x7f68fd943528:	mov	qword ptr [rbp - 0x18], rax
0x7f68fd94352c:	xor	eax, eax
0x7f68fd94352e:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fd943532:	movzx	eax, byte ptr [rax + 4]
0x7f68fd943536:	movzx	eax, al
0x7f68fd943539:	and	eax, 2
0x7f68fd94353c:	test	eax, eax
0x7f68fd94353e:	je	0x7f68fd943560
----------------------------------------------------------------------------------------------------
At  0x7f68fda39494
0x7f68fda39494:	push	rbp
0x7f68fda39495:	mov	rbp, rsp
0x7f68fda39498:	push	rbx
0x7f68fda39499:	sub	rsp, 0x48
0x7f68fda3949d:	mov	qword ptr [rbp - 0x38], rdi
0x7f68fda394a1:	mov	dword ptr [rbp - 0x3c], esi
0x7f68fda394a4:	mov	qword ptr [rbp - 0x48], rdx
0x7f68fda394a8:	mov	rax, qword ptr fs:[0x28]
0x7f68fda394b1:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda394b5:	xor	eax, eax
0x7f68fda394b7:	mov	eax, dword ptr [rbp - 0x3c]
0x7f68fda394ba:	movsxd	rdx, eax
0x7f68fda394bd:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fda394c1:	mov	rsi, rdx
0x7f68fda394c4:	mov	rdi, rax
0x7f68fda394c7:	call	0x7f68fb649f6e
----------------------------------------------------------------------------------------------------
At  0x7f68fb647dc6
0x7f68fb647dc6:	push	rbp
0x7f68fb647dc7:	mov	rbp, rsp
0x7f68fb647dca:	push	rbx
0x7f68fb647dcb:	sub	rsp, 0x28
0x7f68fb647dcf:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb647dd3:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fb647dd6:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fb647dda:	mov	eax, ecx
0x7f68fb647ddc:	mov	byte ptr [rbp - 0x20], al
0x7f68fb647ddf:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb647de3:	mov	ebx, dword ptr [rax + 0x78]
0x7f68fb647de6:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fb647de9:	mov	edi, eax
0x7f68fb647deb:	call	0x7f68fb647daf
----------------------------------------------------------------------------------------------------
At  0x7f68fb647e44
0x7f68fb647e44:	push	rbp
0x7f68fb647e45:	mov	rbp, rsp
0x7f68fb647e48:	sub	rsp, 0x20
0x7f68fb647e4c:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647e50:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647e54:	mov	eax, edx
0x7f68fb647e56:	mov	byte ptr [rbp - 0x14], al
0x7f68fb647e59:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647e5d:	mov	rax, qword ptr [rax + 8]
0x7f68fb647e61:	test	rax, rax
0x7f68fb647e64:	je	0x7f68fb647e85
----------------------------------------------------------------------------------------------------
At  0x7f68fb64cade
0x7f68fb64cade:	push	rbp
0x7f68fb64cadf:	mov	rbp, rsp
0x7f68fb64cae2:	sub	rsp, 0x20
0x7f68fb64cae6:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb64caea:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fb64caee:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb64caf2:	mov	rdi, rax
0x7f68fb64caf5:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj28_29_8[1:1] == 0>
1  <Bool uaf_obj28_29_8[2:2] == 0>
2  <Bool !(uaf_obj25_26_8[3:3] == 0)>
3  <Bool uaf_obj79_80_8 == 0>
4  <Bool uaf_obj76_77_8 == 0>
5  <Bool uaf_obj74_75_8 == 0>
6  <Bool uaf_obj72_73_8 == 0>
7  <Bool uaf_obj77_78_8 == 0>
8  <Bool uaf_obj78_79_8 == 0>
9  <Bool uaf_obj75_76_8 == 192>
10  <Bool uaf_obj73_74_8 == 2>
11  <Bool mem_c0000220_173_8{UNINITIALIZED} == 0>
12  <Bool mem_c0000221_174_56{UNINITIALIZED} == 0xc00009>
13  <Bool !(mem_c0000911_196_56{UNINITIALIZED}[28:28] == 0)>
14  <Bool mem_c0000919_245_56{UNINITIALIZED} == 0x0>
15  <Bool mem_c0000918_244_8{UNINITIALIZED} == 0>
16  <Bool mem_c0000991_299_56{UNINITIALIZED} == 0xc00010>
17  <Bool mem_c0000990_298_8{UNINITIALIZED} == 0>
18  <Bool !(mem_c0001055_389_24{UNINITIALIZED}[23:23] == 1)>
19  <Bool mem_c0001049_494_56{UNINITIALIZED} == 0xc00017>
20  <Bool mem_c0001048_493_8{UNINITIALIZED} == 0>
21  <Bool !(mem_c0001779_534_24{UNINITIALIZED}[4:4] == 0)>
22  <Bool mem_c0001719_673_56{UNINITIALIZED} == 0xc0001e>
23  <Bool mem_c0001718_672_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001e04_685_8{UNINITIALIZED}[1:1] == 0>
25  <Bool !(mem_c0001e04_685_8{UNINITIALIZED}[2:2] == 0)>
26  <Bool mem_c0000941_914_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0000940_913_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001041_1047_56{UNINITIALIZED} == 0xc00025>
29  <Bool mem_c0001040_1046_8{UNINITIALIZED} == 0>
30  <Bool mem_c0002520_1095_8{UNINITIALIZED} == 0>
31  <Bool mem_c0002521_1096_56{UNINITIALIZED} == 0x0>
32  <Bool !(mem_c0001054_388_8{UNINITIALIZED}[4:4] == 0)>
33  <Bool mem_c0000908_2469_8{UNINITIALIZED} == 0>
34  <Bool mem_c0000909_2470_56{UNINITIALIZED} == 0x0>
35  <Bool mem_c0000901_2643_56{UNINITIALIZED} == 0x0>
36  <Bool mem_c0000900_2642_8{UNINITIALIZED} == 0>
37  <Bool mem_c0001019_1547_56{UNINITIALIZED} == 0xc0002c>
38  <Bool mem_c0001018_1546_8{UNINITIALIZED} == 0>
39  <Bool mem_c0002c21_2737_56{UNINITIALIZED} == 0xc00033>
40  <Bool mem_c0002c20_2736_8{UNINITIALIZED} == 0>
41  <Bool mem_c0004548_2814_8{UNINITIALIZED} == 72>
42  <Bool mem_c0004549_2815_56{UNINITIALIZED} == 0xc00047>
43  <Bool mem_c0004749_2817_24{UNINITIALIZED} == 0x0>
44  <Bool mem_c0004748_2816_8{UNINITIALIZED} == 1>
45  <Bool !(mem_c0004550_2826_8{UNINITIALIZED} == 0) || !(mem_c0004551_2827_56{UNINITIALIZED} == 0x0)>
46  <Bool !(mem_c000474d_2988_24{UNINITIALIZED}[22:1] == 0x0) || !((mem_c000474d_2988_24{UNINITIALIZED}[0:0] .. mem_c000474c_2987_8{UNINITIALIZED}) <= 500)>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Write primitive  5
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0004549_2815_56{UNINITIALIZED} .. mem_c0004548_2814_8{UNINITIALIZED}>  r8: <BV64 mem_c0000221_174_56{UNINITIALIZED} .. mem_c0000220_173_8{UNINITIALIZED}>
rbx: <BV64 mem_c0001019_1547_56{UNINITIALIZED} .. mem_c0001018_1546_8{UNINITIALIZED}>  r9: <BV64 0x8>
rcx: <BV64 0xffffffffffffffff + (0x0 .. mem_c0004749_2817_24{UNINITIALIZED} .. mem_c0004748_2816_8{UNINITIALIZED})>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 0xffffffffffffffff + (0x0 .. mem_c0004749_2817_24{UNINITIALIZED} .. mem_c0004748_2816_8{UNINITIALIZED})>  r11: <BV64 0x2>
rsi: <BV64 0xffffffffffffffff + (0x0 .. mem_c0004749_2817_24{UNINITIALIZED} .. mem_c0004748_2816_8{UNINITIALIZED})>  r12: <BV64 0x7ffdf0057820>
rdi: <BV64 0x8 + (0x1fffffffffffffff + (0x0 .. mem_c0004749_2817_24{UNINITIALIZED} .. mem_c0004748_2816_8{UNINITIALIZED}) .. 0) + (mem_c0004549_2815_56{UNINITIALIZED} .. mem_c0004548_2814_8{UNINITIALIZED})>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057600>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf0057620>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I32 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64

   00 | ------ IMark(0x7f68fdb7a31f, 2, 0) ------
   01 | t0 = GET:I64(rax)
   02 | t7 = GET:I64(rdx)
   03 | t6 = 64to32(t7)
   04 | STle(t0) = t6
   05 | PUT(rip) = 0x00007f68fdb7a321
   06 | ------ IMark(0x7f68fdb7a321, 1, 0) ------
   07 | t1 = GET:I64(rbp)
   08 | PUT(rsp) = t1
   09 | t2 = LDle:I64(t1)
   10 | PUT(rbp) = t2
   11 | t8 = Add64(t1,0x0000000000000008)
   12 | PUT(rsp) = t8
   13 | PUT(rip) = 0x00007f68fdb7a322
   14 | ------ IMark(0x7f68fdb7a322, 1, 0) ------
   15 | t4 = LDle:I64(t8)
   16 | t5 = Add64(t8,0x0000000000000008)
   17 | PUT(rsp) = t5
   18 | t9 = Sub64(t5,0x0000000000000080)
   19 | ====== AbiHint(0xt9, 128, t4) ======
   NEXT: PUT(rip) = t4; Ijk_Ret
}
0x7f68fdb7a31f:	mov	dword ptr [rax], edx
0x7f68fdb7a321:	leave	
0x7f68fdb7a322:	ret	
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000220_173_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x90      OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000910_195_8{UNINITIALIZED}>   0x10
<BV8 mem_c0000918_244_8{UNINITIALIZED}>   0x18
<BV8 mem_c0000990_298_8{UNINITIALIZED}>   0x90
<BV8 mem_c0000940_913_8{UNINITIALIZED}>   0x40
<BV8 mem_c0000908_2469_8{UNINITIALIZED}>  0x8
<BV8 mem_c0000900_2642_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_4        0x0
0x40      OBJ_6        0x0
0x18      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001054_388_8{UNINITIALIZED}>   0x54
<BV8 mem_c0001048_493_8{UNINITIALIZED}>   0x48
<BV8 mem_c0001040_1046_8{UNINITIALIZED}>  0x40
<BV8 mem_c0001018_1546_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x18      OBJ_5        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001778_533_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001718_672_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001e04_685_8{UNINITIALIZED}>  0x4
<BV8 mem_c0001e05_736_8{UNINITIALIZED}>  0x5

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002520_1095_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c00
maximum memory range     [  0xc0002a00  ,  0xc0003100  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c20_2736_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0003300
maximum memory range     [  0xc0003100  ,  0xc0004548  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_9
(possible) base address  0xc0004548
maximum memory range     [  0xc0004548  ,  0xc0004c48  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_9        0x200
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0004548_2814_8{UNINITIALIZED}>  0x0
<BV8 mem_c0004748_2816_8{UNINITIALIZED}>  0x200
<BV8 mem_c0004550_2826_8{UNINITIALIZED}>  0x8
<BV8 mem_c0004750_2974_8{UNINITIALIZED}>  0x208
<BV8 mem_c000474c_2987_8{UNINITIALIZED}>  0x204

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000221_174_56{UNINITIALIZED}>
<BV56 mem_c0000911_196_56{UNINITIALIZED}>
<BV56 mem_c0000919_245_56{UNINITIALIZED}>
<BV56 mem_c0000991_299_56{UNINITIALIZED}>
<BV24 mem_c0001055_389_24{UNINITIALIZED}>
<BV56 mem_c0001049_494_56{UNINITIALIZED}>
<BV24 mem_c0001779_534_24{UNINITIALIZED}>
<BV56 mem_c0001719_673_56{UNINITIALIZED}>
<BV56 mem_c0000941_914_56{UNINITIALIZED}>
<BV56 mem_c0001041_1047_56{UNINITIALIZED}>
<BV56 mem_c0002521_1096_56{UNINITIALIZED}>
<BV56 mem_c0001019_1547_56{UNINITIALIZED}>
<BV56 mem_c0000909_2470_56{UNINITIALIZED}>
<BV56 mem_c0000901_2643_56{UNINITIALIZED}>
<BV56 mem_c0002c21_2737_56{UNINITIALIZED}>
<BV56 mem_c0004549_2815_56{UNINITIALIZED}>
<BV24 mem_c0004749_2817_24{UNINITIALIZED}>
<BV56 mem_c0004551_2827_56{UNINITIALIZED}>
<BV56 mem_c0004751_2975_56{UNINITIALIZED}>
<BV24 mem_c000474d_2988_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140088909996831
Write  <BV64 0x4>  bytes to  <BV64 Reverse(mem_c0004548_2814_8{UNINITIALIZED} .. Reverse(mem_c0004549_2815_56{UNINITIALIZED}))>
with expression : <BV32 0xffffffffffffffff + (0x0 .. mem_c0004749_2817_24{UNINITIALIZED} .. mem_c0004748_2816_8{UNINITIALIZED})[31:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fdb7a2a2
0x7f68fdb7a2a2:	push	rbp
0x7f68fdb7a2a3:	mov	rbp, rsp
0x7f68fdb7a2a6:	sub	rsp, 0x20
0x7f68fdb7a2aa:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fdb7a2ae:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fdb7a2b2:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fdb7a2b6:	mov	rdi, rax
0x7f68fdb7a2b9:	call	0x7f68fa094d90
----------------------------------------------------------------------------------------------------
At  0x7f68fdb66b2a
0x7f68fdb66b2a:	push	rbp
0x7f68fdb66b2b:	mov	rbp, rsp
0x7f68fdb66b2e:	sub	rsp, 0x40
0x7f68fdb66b32:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fdb66b36:	mov	dword ptr [rbp - 0x2c], esi
0x7f68fdb66b39:	mov	qword ptr [rbp - 0x38], rdx
0x7f68fdb66b3d:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fdb66b41:	mov	rdi, rax
0x7f68fdb66b44:	call	0x7f68fa1bf2f2
----------------------------------------------------------------------------------------------------
At  0x7f68fd931536
0x7f68fd931536:	push	rbp
0x7f68fd931537:	mov	rbp, rsp
0x7f68fd93153a:	sub	rsp, 0x20
0x7f68fd93153e:	mov	qword ptr [rbp - 8], rdi
0x7f68fd931542:	mov	dword ptr [rbp - 0xc], esi
0x7f68fd931545:	mov	qword ptr [rbp - 0x18], rdx
0x7f68fd931549:	mov	rdx, qword ptr [rbp - 0x18]
0x7f68fd93154d:	mov	ecx, dword ptr [rbp - 0xc]
0x7f68fd931550:	mov	rax, qword ptr [rbp - 8]
0x7f68fd931554:	mov	esi, ecx
0x7f68fd931556:	mov	rdi, rax
0x7f68fd931559:	call	0x7f68fdb66b2a
----------------------------------------------------------------------------------------------------
At  0x7f68fd93158c
0x7f68fd93158c:	push	rbp
0x7f68fd93158d:	mov	rbp, rsp
0x7f68fd931590:	sub	rsp, 0x30
0x7f68fd931594:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fd931598:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fd93159b:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fd93159f:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fd9315a3:	lea	rcx, [rax + 0x30]
0x7f68fd9315a7:	mov	rdx, qword ptr [rbp - 0x28]
0x7f68fd9315ab:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fd9315ae:	mov	esi, eax
0x7f68fd9315b0:	mov	rdi, rcx
0x7f68fd9315b3:	call	0x7f68fd931536
----------------------------------------------------------------------------------------------------
At  0x7f68fd931dc3
0x7f68fd931dc3:	push	rbp
0x7f68fd931dc4:	mov	rbp, rsp
0x7f68fd931dc7:	sub	rsp, 0x10
0x7f68fd931dcb:	mov	qword ptr [rbp - 8], rdi
0x7f68fd931dcf:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fd931dd3:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fd931dd7:	mov	rdi, rax
0x7f68fd931dda:	call	0x7f68fb647c64
----------------------------------------------------------------------------------------------------
At  0x7f68fda3d72e
0x7f68fda3d72e:	push	rbp
0x7f68fda3d72f:	mov	rbp, rsp
0x7f68fda3d732:	push	rbx
0x7f68fda3d733:	sub	rsp, 0xf8
0x7f68fda3d73a:	mov	qword ptr [rbp - 0xe8], rdi
0x7f68fda3d741:	mov	dword ptr [rbp - 0xec], esi
0x7f68fda3d747:	mov	qword ptr [rbp - 0xf8], rdx
0x7f68fda3d74e:	mov	rax, qword ptr fs:[0x28]
0x7f68fda3d757:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda3d75b:	xor	eax, eax
0x7f68fda3d75d:	cmp	dword ptr [rbp - 0xec], 0x17
0x7f68fda3d764:	ja	0x7f68fda3e096
----------------------------------------------------------------------------------------------------
At  0x7f68fda3ceac
0x7f68fda3ceac:	push	rbp
0x7f68fda3cead:	mov	rbp, rsp
0x7f68fda3ceb0:	push	r12
0x7f68fda3ceb2:	push	rbx
0x7f68fda3ceb3:	sub	rsp, 0x1a0
0x7f68fda3ceba:	mov	qword ptr [rbp - 0x198], rdi
0x7f68fda3cec1:	mov	dword ptr [rbp - 0x19c], esi
0x7f68fda3cec7:	mov	qword ptr [rbp - 0x1a8], rdx
0x7f68fda3cece:	mov	rax, qword ptr fs:[0x28]
0x7f68fda3ced7:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda3cedb:	xor	eax, eax
0x7f68fda3cedd:	mov	eax, dword ptr [rbp - 0x19c]
0x7f68fda3cee3:	mov	edi, eax
0x7f68fda3cee5:	call	0x7f68fda80fa9
----------------------------------------------------------------------------------------------------
At  0x7f68fba99182
0x7f68fba99182:	push	rbp
0x7f68fba99183:	mov	rbp, rsp
0x7f68fba99186:	sub	rsp, 0x30
0x7f68fba9918a:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fba9918e:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fba99192:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fba99196:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fba9919a:	mov	rdi, rax
0x7f68fba9919d:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fba942a8
0x7f68fba942a8:	push	rbp
0x7f68fba942a9:	mov	rbp, rsp
0x7f68fba942ac:	sub	rsp, 0x50
0x7f68fba942b0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fba942b4:	mov	rax, qword ptr fs:[0x28]
0x7f68fba942bd:	mov	qword ptr [rbp - 8], rax
0x7f68fba942c1:	xor	eax, eax
0x7f68fba942c3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fba942c7:	mov	rdi, rax
0x7f68fba942ca:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fba8fa68
0x7f68fba8fa68:	push	rbp
0x7f68fba8fa69:	mov	rbp, rsp
0x7f68fba8fa6c:	sub	rsp, 0x10
0x7f68fba8fa70:	mov	qword ptr [rbp - 8], rdi
0x7f68fba8fa74:	mov	rax, qword ptr [rbp - 8]
0x7f68fba8fa78:	mov	rdi, rax
0x7f68fba8fa7b:	call	0x7f68fba942a8
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c8458
0x7f68fc8c8458:	push	rbp
0x7f68fc8c8459:	mov	rbp, rsp
0x7f68fc8c845c:	sub	rsp, 0x10
0x7f68fc8c8460:	mov	qword ptr [rbp - 8], rdi
0x7f68fc8c8464:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fc8c8468:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fc8c846c:	mov	rdi, rax
0x7f68fc8c846f:	call	0x7f68fba8fa68
----------------------------------------------------------------------------------------------------
At  0x7f68fd94350e
0x7f68fd94350e:	push	rbp
0x7f68fd94350f:	mov	rbp, rsp
0x7f68fd943512:	push	rbx
0x7f68fd943513:	sub	rsp, 0x28
0x7f68fd943517:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fd94351b:	mov	qword ptr [rbp - 0x30], rsi
0x7f68fd94351f:	mov	rax, qword ptr fs:[0x28]
0x7f68fd943528:	mov	qword ptr [rbp - 0x18], rax
0x7f68fd94352c:	xor	eax, eax
0x7f68fd94352e:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fd943532:	movzx	eax, byte ptr [rax + 4]
0x7f68fd943536:	movzx	eax, al
0x7f68fd943539:	and	eax, 2
0x7f68fd94353c:	test	eax, eax
0x7f68fd94353e:	je	0x7f68fd943560
----------------------------------------------------------------------------------------------------
At  0x7f68fda39494
0x7f68fda39494:	push	rbp
0x7f68fda39495:	mov	rbp, rsp
0x7f68fda39498:	push	rbx
0x7f68fda39499:	sub	rsp, 0x48
0x7f68fda3949d:	mov	qword ptr [rbp - 0x38], rdi
0x7f68fda394a1:	mov	dword ptr [rbp - 0x3c], esi
0x7f68fda394a4:	mov	qword ptr [rbp - 0x48], rdx
0x7f68fda394a8:	mov	rax, qword ptr fs:[0x28]
0x7f68fda394b1:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda394b5:	xor	eax, eax
0x7f68fda394b7:	mov	eax, dword ptr [rbp - 0x3c]
0x7f68fda394ba:	movsxd	rdx, eax
0x7f68fda394bd:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fda394c1:	mov	rsi, rdx
0x7f68fda394c4:	mov	rdi, rax
0x7f68fda394c7:	call	0x7f68fb649f6e
----------------------------------------------------------------------------------------------------
At  0x7f68fb647dc6
0x7f68fb647dc6:	push	rbp
0x7f68fb647dc7:	mov	rbp, rsp
0x7f68fb647dca:	push	rbx
0x7f68fb647dcb:	sub	rsp, 0x28
0x7f68fb647dcf:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb647dd3:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fb647dd6:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fb647dda:	mov	eax, ecx
0x7f68fb647ddc:	mov	byte ptr [rbp - 0x20], al
0x7f68fb647ddf:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb647de3:	mov	ebx, dword ptr [rax + 0x78]
0x7f68fb647de6:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fb647de9:	mov	edi, eax
0x7f68fb647deb:	call	0x7f68fb647daf
----------------------------------------------------------------------------------------------------
At  0x7f68fb647e44
0x7f68fb647e44:	push	rbp
0x7f68fb647e45:	mov	rbp, rsp
0x7f68fb647e48:	sub	rsp, 0x20
0x7f68fb647e4c:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647e50:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647e54:	mov	eax, edx
0x7f68fb647e56:	mov	byte ptr [rbp - 0x14], al
0x7f68fb647e59:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647e5d:	mov	rax, qword ptr [rax + 8]
0x7f68fb647e61:	test	rax, rax
0x7f68fb647e64:	je	0x7f68fb647e85
----------------------------------------------------------------------------------------------------
At  0x7f68fb64cade
0x7f68fb64cade:	push	rbp
0x7f68fb64cadf:	mov	rbp, rsp
0x7f68fb64cae2:	sub	rsp, 0x20
0x7f68fb64cae6:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb64caea:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fb64caee:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb64caf2:	mov	rdi, rax
0x7f68fb64caf5:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj28_29_8[1:1] == 0>
1  <Bool uaf_obj28_29_8[2:2] == 0>
2  <Bool !(uaf_obj25_26_8[3:3] == 0)>
3  <Bool uaf_obj79_80_8 == 0>
4  <Bool uaf_obj76_77_8 == 0>
5  <Bool uaf_obj74_75_8 == 0>
6  <Bool uaf_obj72_73_8 == 0>
7  <Bool uaf_obj77_78_8 == 0>
8  <Bool uaf_obj78_79_8 == 0>
9  <Bool uaf_obj75_76_8 == 192>
10  <Bool uaf_obj73_74_8 == 2>
11  <Bool mem_c0000220_173_8{UNINITIALIZED} == 0>
12  <Bool mem_c0000221_174_56{UNINITIALIZED} == 0xc00009>
13  <Bool !(mem_c0000911_196_56{UNINITIALIZED}[28:28] == 0)>
14  <Bool mem_c0000919_245_56{UNINITIALIZED} == 0x0>
15  <Bool mem_c0000918_244_8{UNINITIALIZED} == 0>
16  <Bool mem_c0000991_299_56{UNINITIALIZED} == 0xc00010>
17  <Bool mem_c0000990_298_8{UNINITIALIZED} == 0>
18  <Bool !(mem_c0001055_389_24{UNINITIALIZED}[23:23] == 1)>
19  <Bool mem_c0001049_494_56{UNINITIALIZED} == 0xc00017>
20  <Bool mem_c0001048_493_8{UNINITIALIZED} == 0>
21  <Bool !(mem_c0001779_534_24{UNINITIALIZED}[4:4] == 0)>
22  <Bool mem_c0001719_673_56{UNINITIALIZED} == 0xc0001e>
23  <Bool mem_c0001718_672_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001e04_685_8{UNINITIALIZED}[1:1] == 0>
25  <Bool !(mem_c0001e04_685_8{UNINITIALIZED}[2:2] == 0)>
26  <Bool mem_c0000941_914_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0000940_913_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001041_1047_56{UNINITIALIZED} == 0xc00025>
29  <Bool mem_c0001040_1046_8{UNINITIALIZED} == 0>
30  <Bool mem_c0002520_1095_8{UNINITIALIZED} == 0>
31  <Bool mem_c0002521_1096_56{UNINITIALIZED} == 0x0>
32  <Bool !(mem_c0001054_388_8{UNINITIALIZED}[4:4] == 0)>
33  <Bool mem_c0000908_2469_8{UNINITIALIZED} == 0>
34  <Bool mem_c0000909_2470_56{UNINITIALIZED} == 0x0>
35  <Bool mem_c0000901_2643_56{UNINITIALIZED} == 0x0>
36  <Bool mem_c0000900_2642_8{UNINITIALIZED} == 0>
37  <Bool mem_c0001019_1547_56{UNINITIALIZED} == 0xc0002c>
38  <Bool mem_c0001018_1546_8{UNINITIALIZED} == 0>
39  <Bool mem_c0002c21_2737_56{UNINITIALIZED} == 0xc00033>
40  <Bool mem_c0002c20_2736_8{UNINITIALIZED} == 0>
41  <Bool mem_c0004548_2814_8{UNINITIALIZED} == 72>
42  <Bool mem_c0004549_2815_56{UNINITIALIZED} == 0xc00047>
43  <Bool mem_c0004749_2817_24{UNINITIALIZED} == 0x0>
44  <Bool mem_c0004748_2816_8{UNINITIALIZED} == 1>
45  <Bool !(mem_c0004550_2826_8{UNINITIALIZED} == 0) || !(mem_c0004551_2827_56{UNINITIALIZED} == 0x0)>
46  <Bool mem_c000474d_2988_24{UNINITIALIZED}[22:1] == 0x0>
47  <Bool (mem_c000474d_2988_24{UNINITIALIZED}[0:0] .. mem_c000474c_2987_8{UNINITIALIZED}) <= 500>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x7f6901f82680 + (symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[31:24])>  r8: <BV64 0x8>
rbx: <BV64 0x0 .. mem_c0001e05_653_8{UNINITIALIZED}>  r9: <BV64 0x8>
rcx: <BV64 0x0>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:7] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[7:0] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[15:8] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[23:16] .. symbolic_read_unconstrained_939_32{UNINITIALIZED}[31:24]>  r11: <BV64 0x2>
rsi: <BV64 mem_c0000941_873_56{UNINITIALIZED} .. mem_c0000940_872_8{UNINITIALIZED}>  r12: <BV64 0x7ffdf0058750>
rdi: <BV64 0x7ffdf0057b57>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057b10>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf0057b10>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000220_155_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x90      OBJ_3        0x0
0x40      OBJ_6        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000910_175_8{UNINITIALIZED}>  0x10
<BV8 mem_c0000918_209_8{UNINITIALIZED}>  0x18
<BV8 mem_c0000990_239_8{UNINITIALIZED}>  0x90
<BV8 mem_c0000940_872_8{UNINITIALIZED}>  0x40

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_4        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001054_303_8{UNINITIALIZED}>  0x54
<BV8 mem_c0001048_396_8{UNINITIALIZED}>  0x48

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x18      OBJ_5        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001778_450_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001718_590_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001e04_603_8{UNINITIALIZED}>  0x4
<BV8 mem_c0001e05_653_8{UNINITIALIZED}>  0x5

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0002504_926_8{UNINITIALIZED}>  0x4

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002a00
maximum memory range     [  0xc0002a00  ,  0x7f69c1f85280  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                                  address
--------------------------------------------------------  --------------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000221_156_56{UNINITIALIZED}>
<BV56 mem_c0000911_176_56{UNINITIALIZED}>
<BV56 mem_c0000919_210_56{UNINITIALIZED}>
<BV56 mem_c0000991_240_56{UNINITIALIZED}>
<BV24 mem_c0001055_304_24{UNINITIALIZED}>
<BV56 mem_c0001049_397_56{UNINITIALIZED}>
<BV24 mem_c0001779_451_24{UNINITIALIZED}>
<BV56 mem_c0001719_591_56{UNINITIALIZED}>
<BV56 mem_c0000941_873_56{UNINITIALIZED}>
<BV8 mem_7f69c1f85280_937_8{UNINITIALIZED}>               0x7f69c1f85280
<BV32 symbolic_read_unconstrained_938_32{UNINITIALIZED}>
<BV32 symbolic_read_unconstrained_939_32{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are jumping to a controlled address
It happens at:  140088890393803
Jumping to  <BV64 0x7f6901f82680 + SignExt(32, Reverse(symbolic_read_unconstrained_939_32{UNINITIALIZED}))>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c848a
0x7f68fc8c848a:	push	rbp
0x7f68fc8c848b:	mov	rbp, rsp
0x7f68fc8c848e:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fc8c8492:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fc8c8496:	mov	rax, qword ptr [rbp - 0x20]
0x7f68fc8c849a:	movzx	eax, byte ptr [rax + 4]
0x7f68fc8c849e:	movzx	eax, al
0x7f68fc8c84a1:	cmp	eax, 7
0x7f68fc8c84a4:	ja	0x7f68fc8c8540
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c8458
0x7f68fc8c8458:	push	rbp
0x7f68fc8c8459:	mov	rbp, rsp
0x7f68fc8c845c:	sub	rsp, 0x10
0x7f68fc8c8460:	mov	qword ptr [rbp - 8], rdi
0x7f68fc8c8464:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fc8c8468:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fc8c846c:	mov	rdi, rax
0x7f68fc8c846f:	call	0x7f68fba8fa68
----------------------------------------------------------------------------------------------------
At  0x7f68fd94350e
0x7f68fd94350e:	push	rbp
0x7f68fd94350f:	mov	rbp, rsp
0x7f68fd943512:	push	rbx
0x7f68fd943513:	sub	rsp, 0x28
0x7f68fd943517:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fd94351b:	mov	qword ptr [rbp - 0x30], rsi
0x7f68fd94351f:	mov	rax, qword ptr fs:[0x28]
0x7f68fd943528:	mov	qword ptr [rbp - 0x18], rax
0x7f68fd94352c:	xor	eax, eax
0x7f68fd94352e:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fd943532:	movzx	eax, byte ptr [rax + 4]
0x7f68fd943536:	movzx	eax, al
0x7f68fd943539:	and	eax, 2
0x7f68fd94353c:	test	eax, eax
0x7f68fd94353e:	je	0x7f68fd943560
----------------------------------------------------------------------------------------------------
At  0x7f68fda39494
0x7f68fda39494:	push	rbp
0x7f68fda39495:	mov	rbp, rsp
0x7f68fda39498:	push	rbx
0x7f68fda39499:	sub	rsp, 0x48
0x7f68fda3949d:	mov	qword ptr [rbp - 0x38], rdi
0x7f68fda394a1:	mov	dword ptr [rbp - 0x3c], esi
0x7f68fda394a4:	mov	qword ptr [rbp - 0x48], rdx
0x7f68fda394a8:	mov	rax, qword ptr fs:[0x28]
0x7f68fda394b1:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda394b5:	xor	eax, eax
0x7f68fda394b7:	mov	eax, dword ptr [rbp - 0x3c]
0x7f68fda394ba:	movsxd	rdx, eax
0x7f68fda394bd:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fda394c1:	mov	rsi, rdx
0x7f68fda394c4:	mov	rdi, rax
0x7f68fda394c7:	call	0x7f68fb649f6e
----------------------------------------------------------------------------------------------------
At  0x7f68fb647dc6
0x7f68fb647dc6:	push	rbp
0x7f68fb647dc7:	mov	rbp, rsp
0x7f68fb647dca:	push	rbx
0x7f68fb647dcb:	sub	rsp, 0x28
0x7f68fb647dcf:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb647dd3:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fb647dd6:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fb647dda:	mov	eax, ecx
0x7f68fb647ddc:	mov	byte ptr [rbp - 0x20], al
0x7f68fb647ddf:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb647de3:	mov	ebx, dword ptr [rax + 0x78]
0x7f68fb647de6:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fb647de9:	mov	edi, eax
0x7f68fb647deb:	call	0x7f68fb647daf
----------------------------------------------------------------------------------------------------
At  0x7f68fb647e44
0x7f68fb647e44:	push	rbp
0x7f68fb647e45:	mov	rbp, rsp
0x7f68fb647e48:	sub	rsp, 0x20
0x7f68fb647e4c:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647e50:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647e54:	mov	eax, edx
0x7f68fb647e56:	mov	byte ptr [rbp - 0x14], al
0x7f68fb647e59:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647e5d:	mov	rax, qword ptr [rax + 8]
0x7f68fb647e61:	test	rax, rax
0x7f68fb647e64:	je	0x7f68fb647e85
----------------------------------------------------------------------------------------------------
At  0x7f68fb64cade
0x7f68fb64cade:	push	rbp
0x7f68fb64cadf:	mov	rbp, rsp
0x7f68fb64cae2:	sub	rsp, 0x20
0x7f68fb64cae6:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb64caea:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fb64caee:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb64caf2:	mov	rdi, rax
0x7f68fb64caf5:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj28_29_8[1:1] == 0)>
1  <Bool uaf_obj28_29_8[2:2] == 0>
2  <Bool uaf_obj79_80_8 == 0>
3  <Bool uaf_obj76_77_8 == 0>
4  <Bool uaf_obj74_75_8 == 0>
5  <Bool uaf_obj72_73_8 == 0>
6  <Bool uaf_obj77_78_8 == 0>
7  <Bool uaf_obj78_79_8 == 0>
8  <Bool uaf_obj75_76_8 == 192>
9  <Bool uaf_obj73_74_8 == 2>
10  <Bool mem_c0000221_156_56{UNINITIALIZED} == 0xc00009>
11  <Bool mem_c0000220_155_8{UNINITIALIZED} == 0>
12  <Bool !(mem_c0000911_176_56{UNINITIALIZED}[28:28] == 0)>
13  <Bool mem_c0000919_210_56{UNINITIALIZED} == 0x0>
14  <Bool mem_c0000918_209_8{UNINITIALIZED} == 0>
15  <Bool mem_c0000991_240_56{UNINITIALIZED} == 0xc00010>
16  <Bool mem_c0000990_239_8{UNINITIALIZED} == 0>
17  <Bool !(mem_c0001055_304_24{UNINITIALIZED}[23:23] == 1)>
18  <Bool mem_c0001049_397_56{UNINITIALIZED} == 0xc00017>
19  <Bool mem_c0001048_396_8{UNINITIALIZED} == 0>
20  <Bool !(mem_c0001779_451_24{UNINITIALIZED}[4:4] == 0)>
21  <Bool mem_c0001718_590_8{UNINITIALIZED} == 0>
22  <Bool mem_c0001719_591_56{UNINITIALIZED} == 0xc0001e>
23  <Bool mem_c0001e04_603_8{UNINITIALIZED}[1:1] == 0>
24  <Bool !(mem_c0001e04_603_8{UNINITIALIZED}[2:2] == 0)>
25  <Bool mem_c0000941_873_56{UNINITIALIZED} == 0xc00025>
26  <Bool mem_c0000940_872_8{UNINITIALIZED} == 0>
27  <Bool False>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0003319_2136_56{UNINITIALIZED} .. mem_c0003318_2135_8{UNINITIALIZED}>  r8: <BV64 mem_c0000221_174_56{UNINITIALIZED} .. mem_c0000220_173_8{UNINITIALIZED}>
rbx: <BV64 mem_c0001019_1547_56{UNINITIALIZED} .. mem_c0001018_1546_8{UNINITIALIZED}>  r9: <BV64 0x8>
rcx: <BV64 0x7ffdf0057940>  r10: <BV64 0x5584295c37a0>
rdx: <BV64 mem_c0001029_2092_56{UNINITIALIZED} .. mem_c0001028_2091_8{UNINITIALIZED}>  r11: <BV64 0x2>
rsi: <BV64 0x7ffdf0057940>  r12: <BV64 0x7ffdf0057820>
rdi: <BV64 mem_c0001029_2092_56{UNINITIALIZED} .. mem_c0001028_2091_8{UNINITIALIZED}>  r13: <BV64 0x558426a572b0>
rsp: <BV64 0x7ffdf0057818>  r14: <BV64 0x7f68fa169ac4>
rbp: <BV64 0x7ffdf0057a50>  r15: <BV64 0x7ffdf005a1f0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x55842953a790
maximum memory range     [  0x55842953a790  ,  0x55842953a818  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x88
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj135_136_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000220_173_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x90      OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000910_195_8{UNINITIALIZED}>  0x10
<BV8 mem_c0000918_244_8{UNINITIALIZED}>  0x18
<BV8 mem_c0000990_298_8{UNINITIALIZED}>  0x90
<BV8 mem_c0000940_913_8{UNINITIALIZED}>  0x40

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x48      OBJ_4        0x0
0x40      OBJ_6        0x0
0x28      OBJ_7        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001054_388_8{UNINITIALIZED}>   0x54
<BV8 mem_c0001048_493_8{UNINITIALIZED}>   0x48
<BV8 mem_c0001040_1046_8{UNINITIALIZED}>  0x40
<BV8 mem_c0001018_1546_8{UNINITIALIZED}>  0x18
<BV8 mem_c0001050_1994_8{UNINITIALIZED}>  0x50
<BV8 mem_c0001028_2091_8{UNINITIALIZED}>  0x28

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x18      OBJ_5        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001778_533_8{UNINITIALIZED}>  0x78
<BV8 mem_c0001718_672_8{UNINITIALIZED}>  0x18

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001e04_685_8{UNINITIALIZED}>  0x4
<BV8 mem_c0001e05_736_8{UNINITIALIZED}>  0x5

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002520_1095_8{UNINITIALIZED}>  0x20

****************************************************************************************************
object:                  OBJ_7
(possible) base address  0xc0002c00
maximum memory range     [  0xc0002a00  ,  0xc0003100  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_8        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0002c00_2133_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_8
(possible) base address  0xc0003300
maximum memory range     [  0xc0003100  ,  0xc0003800  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0003318_2135_8{UNINITIALIZED}>  0x18

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV56 mem_c0000221_174_56{UNINITIALIZED}>
<BV56 mem_c0000911_196_56{UNINITIALIZED}>
<BV56 mem_c0000919_245_56{UNINITIALIZED}>
<BV56 mem_c0000991_299_56{UNINITIALIZED}>
<BV24 mem_c0001055_389_24{UNINITIALIZED}>
<BV56 mem_c0001049_494_56{UNINITIALIZED}>
<BV24 mem_c0001779_534_24{UNINITIALIZED}>
<BV56 mem_c0001719_673_56{UNINITIALIZED}>
<BV56 mem_c0000941_914_56{UNINITIALIZED}>
<BV56 mem_c0001041_1047_56{UNINITIALIZED}>
<BV56 mem_c0002521_1096_56{UNINITIALIZED}>
<BV56 mem_c0001019_1547_56{UNINITIALIZED}>
<BV24 mem_c0001051_1995_24{UNINITIALIZED}>
<BV56 mem_c0001029_2092_56{UNINITIALIZED}>
<BV56 mem_c0002c01_2134_56{UNINITIALIZED}>
<BV56 mem_c0003319_2136_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140088908697909
Calling  <BV64 mem_c0003319_2136_56{UNINITIALIZED} .. mem_c0003318_2135_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f68fda3ceac
0x7f68fda3ceac:	push	rbp
0x7f68fda3cead:	mov	rbp, rsp
0x7f68fda3ceb0:	push	r12
0x7f68fda3ceb2:	push	rbx
0x7f68fda3ceb3:	sub	rsp, 0x1a0
0x7f68fda3ceba:	mov	qword ptr [rbp - 0x198], rdi
0x7f68fda3cec1:	mov	dword ptr [rbp - 0x19c], esi
0x7f68fda3cec7:	mov	qword ptr [rbp - 0x1a8], rdx
0x7f68fda3cece:	mov	rax, qword ptr fs:[0x28]
0x7f68fda3ced7:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda3cedb:	xor	eax, eax
0x7f68fda3cedd:	mov	eax, dword ptr [rbp - 0x19c]
0x7f68fda3cee3:	mov	edi, eax
0x7f68fda3cee5:	call	0x7f68fda80fa9
----------------------------------------------------------------------------------------------------
At  0x7f68fba99182
0x7f68fba99182:	push	rbp
0x7f68fba99183:	mov	rbp, rsp
0x7f68fba99186:	sub	rsp, 0x30
0x7f68fba9918a:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fba9918e:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fba99192:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fba99196:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fba9919a:	mov	rdi, rax
0x7f68fba9919d:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fba942a8
0x7f68fba942a8:	push	rbp
0x7f68fba942a9:	mov	rbp, rsp
0x7f68fba942ac:	sub	rsp, 0x50
0x7f68fba942b0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fba942b4:	mov	rax, qword ptr fs:[0x28]
0x7f68fba942bd:	mov	qword ptr [rbp - 8], rax
0x7f68fba942c1:	xor	eax, eax
0x7f68fba942c3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fba942c7:	mov	rdi, rax
0x7f68fba942ca:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fba8fa68
0x7f68fba8fa68:	push	rbp
0x7f68fba8fa69:	mov	rbp, rsp
0x7f68fba8fa6c:	sub	rsp, 0x10
0x7f68fba8fa70:	mov	qword ptr [rbp - 8], rdi
0x7f68fba8fa74:	mov	rax, qword ptr [rbp - 8]
0x7f68fba8fa78:	mov	rdi, rax
0x7f68fba8fa7b:	call	0x7f68fba942a8
----------------------------------------------------------------------------------------------------
At  0x7f68fc8c8458
0x7f68fc8c8458:	push	rbp
0x7f68fc8c8459:	mov	rbp, rsp
0x7f68fc8c845c:	sub	rsp, 0x10
0x7f68fc8c8460:	mov	qword ptr [rbp - 8], rdi
0x7f68fc8c8464:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fc8c8468:	mov	rax, qword ptr [rbp - 0x10]
0x7f68fc8c846c:	mov	rdi, rax
0x7f68fc8c846f:	call	0x7f68fba8fa68
----------------------------------------------------------------------------------------------------
At  0x7f68fd94350e
0x7f68fd94350e:	push	rbp
0x7f68fd94350f:	mov	rbp, rsp
0x7f68fd943512:	push	rbx
0x7f68fd943513:	sub	rsp, 0x28
0x7f68fd943517:	mov	qword ptr [rbp - 0x28], rdi
0x7f68fd94351b:	mov	qword ptr [rbp - 0x30], rsi
0x7f68fd94351f:	mov	rax, qword ptr fs:[0x28]
0x7f68fd943528:	mov	qword ptr [rbp - 0x18], rax
0x7f68fd94352c:	xor	eax, eax
0x7f68fd94352e:	mov	rax, qword ptr [rbp - 0x28]
0x7f68fd943532:	movzx	eax, byte ptr [rax + 4]
0x7f68fd943536:	movzx	eax, al
0x7f68fd943539:	and	eax, 2
0x7f68fd94353c:	test	eax, eax
0x7f68fd94353e:	je	0x7f68fd943560
----------------------------------------------------------------------------------------------------
At  0x7f68fda39494
0x7f68fda39494:	push	rbp
0x7f68fda39495:	mov	rbp, rsp
0x7f68fda39498:	push	rbx
0x7f68fda39499:	sub	rsp, 0x48
0x7f68fda3949d:	mov	qword ptr [rbp - 0x38], rdi
0x7f68fda394a1:	mov	dword ptr [rbp - 0x3c], esi
0x7f68fda394a4:	mov	qword ptr [rbp - 0x48], rdx
0x7f68fda394a8:	mov	rax, qword ptr fs:[0x28]
0x7f68fda394b1:	mov	qword ptr [rbp - 0x18], rax
0x7f68fda394b5:	xor	eax, eax
0x7f68fda394b7:	mov	eax, dword ptr [rbp - 0x3c]
0x7f68fda394ba:	movsxd	rdx, eax
0x7f68fda394bd:	mov	rax, qword ptr [rbp - 0x38]
0x7f68fda394c1:	mov	rsi, rdx
0x7f68fda394c4:	mov	rdi, rax
0x7f68fda394c7:	call	0x7f68fb649f6e
----------------------------------------------------------------------------------------------------
At  0x7f68fb647dc6
0x7f68fb647dc6:	push	rbp
0x7f68fb647dc7:	mov	rbp, rsp
0x7f68fb647dca:	push	rbx
0x7f68fb647dcb:	sub	rsp, 0x28
0x7f68fb647dcf:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb647dd3:	mov	dword ptr [rbp - 0x1c], esi
0x7f68fb647dd6:	mov	qword ptr [rbp - 0x28], rdx
0x7f68fb647dda:	mov	eax, ecx
0x7f68fb647ddc:	mov	byte ptr [rbp - 0x20], al
0x7f68fb647ddf:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb647de3:	mov	ebx, dword ptr [rax + 0x78]
0x7f68fb647de6:	mov	eax, dword ptr [rbp - 0x1c]
0x7f68fb647de9:	mov	edi, eax
0x7f68fb647deb:	call	0x7f68fb647daf
----------------------------------------------------------------------------------------------------
At  0x7f68fb647e44
0x7f68fb647e44:	push	rbp
0x7f68fb647e45:	mov	rbp, rsp
0x7f68fb647e48:	sub	rsp, 0x20
0x7f68fb647e4c:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647e50:	mov	qword ptr [rbp - 0x10], rsi
0x7f68fb647e54:	mov	eax, edx
0x7f68fb647e56:	mov	byte ptr [rbp - 0x14], al
0x7f68fb647e59:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647e5d:	mov	rax, qword ptr [rax + 8]
0x7f68fb647e61:	test	rax, rax
0x7f68fb647e64:	je	0x7f68fb647e85
----------------------------------------------------------------------------------------------------
At  0x7f68fb64cade
0x7f68fb64cade:	push	rbp
0x7f68fb64cadf:	mov	rbp, rsp
0x7f68fb64cae2:	sub	rsp, 0x20
0x7f68fb64cae6:	mov	qword ptr [rbp - 0x18], rdi
0x7f68fb64caea:	mov	qword ptr [rbp - 0x20], rsi
0x7f68fb64caee:	mov	rax, qword ptr [rbp - 0x18]
0x7f68fb64caf2:	mov	rdi, rax
0x7f68fb64caf5:	call	0x7f68fb647e8c
----------------------------------------------------------------------------------------------------
At  0x7f68fb649f98
0x7f68fb649f98:	push	rbp
0x7f68fb649f99:	mov	rbp, rsp
0x7f68fb649f9c:	sub	rsp, 0x50
0x7f68fb649fa0:	mov	qword ptr [rbp - 0x48], rdi
0x7f68fb649fa4:	mov	rax, qword ptr fs:[0x28]
0x7f68fb649fad:	mov	qword ptr [rbp - 8], rax
0x7f68fb649fb1:	xor	eax, eax
0x7f68fb649fb3:	mov	rax, qword ptr [rbp - 0x48]
0x7f68fb649fb7:	mov	rdi, rax
0x7f68fb649fba:	call	0x7f68fb647f28
----------------------------------------------------------------------------------------------------
At  0x7f68fb647f5a
0x7f68fb647f5a:	push	rbp
0x7f68fb647f5b:	mov	rbp, rsp
0x7f68fb647f5e:	sub	rsp, 0x10
0x7f68fb647f62:	mov	qword ptr [rbp - 8], rdi
0x7f68fb647f66:	mov	rax, qword ptr [rbp - 8]
0x7f68fb647f6a:	mov	rdi, rax
0x7f68fb647f6d:	call	0x7f68fb649f98
----------------------------------------------------------------------------------------------------
At  0x7f68fb648316
0x7f68fb648316:	push	rbp
0x7f68fb648317:	mov	rbp, rsp
0x7f68fb64831a:	sub	rsp, 0x10
0x7f68fb64831e:	mov	qword ptr [rbp - 8], rdi
0x7f68fb648322:	mov	rax, qword ptr [rbp - 8]
0x7f68fb648326:	mov	rax, qword ptr [rax + 0x20]
0x7f68fb64832a:	mov	rdi, rax
0x7f68fb64832d:	call	0x7f68fb647f5a
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj28_29_8[1:1] == 0>
1  <Bool uaf_obj28_29_8[2:2] == 0>
2  <Bool !(uaf_obj25_26_8[3:3] == 0)>
3  <Bool uaf_obj79_80_8 == 0>
4  <Bool uaf_obj76_77_8 == 0>
5  <Bool uaf_obj74_75_8 == 0>
6  <Bool uaf_obj72_73_8 == 0>
7  <Bool uaf_obj77_78_8 == 0>
8  <Bool uaf_obj78_79_8 == 0>
9  <Bool uaf_obj75_76_8 == 192>
10  <Bool uaf_obj73_74_8 == 2>
11  <Bool mem_c0000220_173_8{UNINITIALIZED} == 0>
12  <Bool mem_c0000221_174_56{UNINITIALIZED} == 0xc00009>
13  <Bool !(mem_c0000911_196_56{UNINITIALIZED}[28:28] == 0)>
14  <Bool mem_c0000919_245_56{UNINITIALIZED} == 0x0>
15  <Bool mem_c0000918_244_8{UNINITIALIZED} == 0>
16  <Bool mem_c0000991_299_56{UNINITIALIZED} == 0xc00010>
17  <Bool mem_c0000990_298_8{UNINITIALIZED} == 0>
18  <Bool !(mem_c0001055_389_24{UNINITIALIZED}[23:23] == 1)>
19  <Bool mem_c0001049_494_56{UNINITIALIZED} == 0xc00017>
20  <Bool mem_c0001048_493_8{UNINITIALIZED} == 0>
21  <Bool !(mem_c0001779_534_24{UNINITIALIZED}[4:4] == 0)>
22  <Bool mem_c0001719_673_56{UNINITIALIZED} == 0xc0001e>
23  <Bool mem_c0001718_672_8{UNINITIALIZED} == 0>
24  <Bool mem_c0001e04_685_8{UNINITIALIZED}[1:1] == 0>
25  <Bool !(mem_c0001e04_685_8{UNINITIALIZED}[2:2] == 0)>
26  <Bool mem_c0000941_914_56{UNINITIALIZED} == 0x0>
27  <Bool mem_c0000940_913_8{UNINITIALIZED} == 0>
28  <Bool mem_c0001041_1047_56{UNINITIALIZED} == 0xc00025>
29  <Bool mem_c0001040_1046_8{UNINITIALIZED} == 0>
30  <Bool mem_c0002520_1095_8{UNINITIALIZED} == 0>
31  <Bool mem_c0002521_1096_56{UNINITIALIZED} == 0x0>
32  <Bool mem_c0001054_388_8{UNINITIALIZED}[4:4] == 0>
33  <Bool mem_c0001050_1994_8{UNINITIALIZED}[4:4] == 0>
34  <Bool mem_c0001029_2092_56{UNINITIALIZED} == 0xc0002c>
35  <Bool mem_c0001028_2091_8{UNINITIALIZED} == 0>
36  <Bool mem_c0002c00_2133_8{UNINITIALIZED} == 0>
37  <Bool mem_c0002c01_2134_56{UNINITIALIZED} == 0xc00033>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

-----end dump executor-----
