-----start dump executor-----
Step:  59
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        0
control_hijack (C)         1
active (A)                11
unconstrained (U)          0
errored (E)                0
found                      0
avoided                    0
paths to write primitive:  0
paths to control hijack:  1
first primitive after:  59
total paths:  11
****************************************************************************************************
Some errored states: 
****************************************************************************************************
Some write primitives: 
****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0000200_53_64{UNINITIALIZED}>  r8: <BV64 0x3>
rbx: <BV64 0x0>  r9: <BV64 0x0>
rcx: <BV64 0x6>  r10: <BV64 0x12>
rdx: <BV64 0x6>  r11: <BV64 0x7f947118d550>
rsi: <BV64 mem_c0001008_46_64{UNINITIALIZED}>  r12: <BV64 0x55fa51b905d0>
rdi: <BV64 0x6>  r13: <BV64 0x7ffca613eb40>
rsp: <BV64 0x7ffca613ea08>  r14: <BV64 0x0>
rbp: <BV64 0x7ffca613ea60>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x56384708b260
maximum memory range     [  0x56384708b260  ,  0x56384708b288  ]
 
contains pointers:      
   No pointers     
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x28
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj39_40_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_2        0x0
0x10      OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000218_42_8{UNINITIALIZED}>    0x18
<BV64 mem_c0000208_43_64{UNINITIALIZED}>  0x8
<BV64 mem_c0000210_45_64{UNINITIALIZED}>  0x10
<BV64 mem_c0000200_53_64{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                offsets
--------------------------------------  ---------
<BV8 mem_c0000910_44_8{UNINITIALIZED}>  0x10

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_4        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV64 mem_c0001008_46_64{UNINITIALIZED}>  0x8

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                offsets
--------------------------------------  ---------
<BV8 mem_c0001700_47_8{UNINITIALIZED}>  0x0
<BV8 mem_c0001701_48_8{UNINITIALIZED}>  0x1
<BV8 mem_c0001702_49_8{UNINITIALIZED}>  0x2
<BV8 mem_c0001703_50_8{UNINITIALIZED}>  0x3
<BV8 mem_c0001704_51_8{UNINITIALIZED}>  0x4
<BV8 mem_c0001705_52_8{UNINITIALIZED}>  0x5

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                 address
---------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_41_64{UNINITIALIZED}>
<BV64 depth_limit_0>
<BV64 depth_limit_1>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  94533601265962
Calling  <BV64 mem_c0000200_53_64{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool depth_limit_0 == 0xc0000200>
1  <Bool mem_c0000218_42_8{UNINITIALIZED} == 97>
2  <Bool mem_c0000208_43_64{UNINITIALIZED} == 0xc0000900>
3  <Bool mem_c0000910_44_8{UNINITIALIZED} == 97>
4  <Bool mem_c0000210_45_64{UNINITIALIZED} == 0xc0001000>
5  <Bool mem_c0001008_46_64{UNINITIALIZED} == 0xc0001700>
6  <Bool mem_c0001700_47_8{UNINITIALIZED} == 97>
7  <Bool mem_c0001701_48_8{UNINITIALIZED} == 97>
8  <Bool mem_c0001702_49_8{UNINITIALIZED} == 97>
9  <Bool mem_c0001703_50_8{UNINITIALIZED} == 97>
10  <Bool mem_c0001704_51_8{UNINITIALIZED} == 97>
11  <Bool mem_c0001705_52_8{UNINITIALIZED} == 97>
12  <Bool depth_limit_1[31:0] == 0xf>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

-----end dump executor-----
