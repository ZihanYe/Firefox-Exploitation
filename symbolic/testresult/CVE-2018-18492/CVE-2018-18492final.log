-----start dump executor-----
Step:  213
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        5
control_hijack (C)         2
active (A)               109
found (F)                 47
unconstrained (U)          0
errored (E)                0
****************************************************************************************************
Some errored states: 
****************************************************************************************************
Some write primitives: 
Write primitive  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x0 .. 0x1 + (mem_c0000de1_544_24{UNINITIALIZED} .. mem_c0000de0_543_8{UNINITIALIZED})>  r8: <BV64 0x0>
rbx: <BV64 0x563f3e474240>  r9: <BV64 0x0>
rcx: <BV64 0x100000000000>  r10: <BV64 0x0>
rdx: <BV64 0x0>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>
rdi: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>  r13: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>
rsp: <BV64 0x7fff42ec13a0>  r14: <BV64 0x563f3eae4ef0>
rbp: <BV64 0x563f3d81f200>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I32 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64

   00 | ------ IMark(0x7fbb8dede7d8, 8, 0) ------
   01 | t4 = GET:I64(r12)
   02 | t3 = Add64(t4,0x00000000000004e0)
   03 | t6 = GET:I64(rax)
   04 | t5 = 64to32(t6)
   05 | STle(t3) = t5
   06 | PUT(rip) = 0x00007fbb8dede7e0
   07 | ------ IMark(0x7fbb8dede7e0, 5, 0) ------
   08 | t8 = GET:I64(rsp)
   09 | t7 = Sub64(t8,0x0000000000000008)
   10 | PUT(rsp) = t7
   11 | STle(t7) = 0x00007fbb8dede7e5
   12 | t9 = Sub64(t7,0x0000000000000080)
   13 | ====== AbiHint(0xt9, 128, 0x00007fbb8dda6830) ======
   NEXT: PUT(rip) = 0x00007fbb8dda6830; Ijk_Call
}
0x7fbb8dede7d8:	mov	dword ptr [r12 + 0x4e0], eax
0x7fbb8dede7e0:	call	0x7fbb8dda6830
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x563f3d81f200
maximum memory range     [  0x563f3d81f200  ,  0x563f3d81f318  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x118
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj279_280_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000208_522_8{UNINITIALIZED}>  0x8

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000900_527_8{UNINITIALIZED}>  0x0
<BV8 mem_c0000de0_543_8{UNINITIALIZED}>  0x4e0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001008_529_8{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                        address
----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_506_64{UNINITIALIZED}>
<BV56 mem_c0000209_523_56{UNINITIALIZED}>
<BV56 mem_c0000901_528_56{UNINITIALIZED}>
<BV56 mem_c0001009_530_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_538_64{UNINITIALIZED}>
<BV24 mem_c0000de1_544_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140443516790744
Write  <BV64 0x4>  bytes to  <BV64 (mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}) + 0x4e0>
with expression : <BV32 (mem_c0000de1_544_24{UNINITIALIZED} .. mem_c0000de0_543_8{UNINITIALIZED}) + 0x1>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7fbb8dede7a0
0x7fbb8dede7a0:	push	r12
0x7fbb8dede7a2:	push	rbp
0x7fbb8dede7a3:	mov	r12, rdi
0x7fbb8dede7a6:	push	rbx
0x7fbb8dede7a7:	sub	rsp, 0x20
0x7fbb8dede7ab:	mov	rax, qword ptr fs:[0x28]
0x7fbb8dede7b4:	mov	qword ptr [rsp + 0x18], rax
0x7fbb8dede7b9:	xor	eax, eax
0x7fbb8dede7bb:	mov	eax, dword ptr [rdi + 0x4e0]
0x7fbb8dede7c1:	test	eax, eax
0x7fbb8dede7c3:	jne	0x7fbb8dede7d5
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj47_48_8 == 0) || (!(uaf_obj46_47_8 == 0) || (!(uaf_obj45_46_8 == 0) || (!(uaf_obj44_45_8 == 0) || (!(uaf_obj43_44_8 == 0) || (!(uaf_obj42_43_8 == 0) || (!(uaf_obj40_41_8 == 0) || !(uaf_obj41_42_8 == 0)))))))>
1  <Bool !(uaf_obj28_29_8[2:2] == 0)>
2  <Bool uaf_obj33_34_8 == 2>
3  <Bool uaf_obj38_39_8 == 0>
4  <Bool uaf_obj35_36_8 == 192>
5  <Bool uaf_obj32_33_8 == 0>
6  <Bool uaf_obj37_38_8 == 0>
7  <Bool uaf_obj34_35_8 == 0>
8  <Bool uaf_obj36_37_8 == 0>
9  <Bool uaf_obj39_40_8 == 0>
10  <Bool mem_c0000208_522_8{UNINITIALIZED} == 0>
11  <Bool mem_c0000209_523_56{UNINITIALIZED} == 0xc00009>
12  <Bool mem_c0000901_528_56{UNINITIALIZED} == 0xc00010>
13  <Bool mem_c0000900_527_8{UNINITIALIZED} == 0>
14  <Bool symbolic_return_0_538_64{UNINITIALIZED} == symbolic_call_0>
15  <Bool Reverse(mem_c0000de0_543_8{UNINITIALIZED} .. Reverse(mem_c0000de1_544_24{UNINITIALIZED})) != 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_538_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140443517049999
call            <BV64 mem_c0001009_530_56{UNINITIALIZED} .. mem_c0001008_529_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x0 .. mem_c0000de1_544_24{UNINITIALIZED} .. mem_c0000de0_543_8{UNINITIALIZED}>  r8: <BV64 0x0>
rbx: <BV64 0x563f3e474240>  r9: <BV64 0x0>
rcx: <BV64 0x100000000000>  r10: <BV64 0x0>
rdx: <BV64 0x0 .. mem_c0000b9f_548_8{UNINITIALIZED}[7:2] .. 1 .. mem_c0000b9f_548_8{UNINITIALIZED}[0:0]>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>
rdi: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>  r13: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>
rsp: <BV64 0x7fff42ec13a0>  r14: <BV64 0x563f3eae4ef0>
rbp: <BV64 0x563f3d81f200>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I8 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I32 t17:Ity_I64 t18:Ity_I64 t19:Ity_I32 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I32 t25:Ity_I64

   00 | ------ IMark(0x7fbb8dede8da, 6, 0) ------
   01 | t7 = GET:I64(rdi)
   02 | t6 = Add64(t7,0x000000000000029f)
   03 | t8 = GET:I8(dl)
   04 | STle(t6) = t8
   05 | PUT(rip) = 0x00007fbb8dede8e0
   06 | ------ IMark(0x7fbb8dede8e0, 4, 0) ------
   07 | t10 = GET:I64(rax)
   08 | t9 = Add64(t10,0x0000000000000060)
   09 | t11 = LDle:I64(t9)
   10 | PUT(rip) = 0x00007fbb8dede8e4
   11 | ------ IMark(0x7fbb8dede8e4, 4, 0) ------
   12 | t12 = Add64(t11,0x0000000000000030)
   13 | t14 = LDle:I64(t12)
   14 | PUT(rip) = 0x00007fbb8dede8e8
   15 | ------ IMark(0x7fbb8dede8e8, 2, 0) ------
   16 | t16 = LDle:I32(t14)
   17 | t15 = 32Uto64(t16)
   18 | PUT(rdx) = t15
   19 | PUT(rip) = 0x00007fbb8dede8ea
   20 | ------ IMark(0x7fbb8dede8ea, 3, 0) ------
   21 | t17 = Add64(t11,0x000000000000003c)
   22 | t19 = 64to32(t15)
   23 | STle(t17) = t19
   24 | PUT(rip) = 0x00007fbb8dede8ed
   25 | ------ IMark(0x7fbb8dede8ed, 6, 0) ------
   26 | t21 = Add64(t7,0x00000000000004e0)
   27 | t24 = LDle:I32(t21)
   28 | t23 = 32Uto64(t24)
   29 | PUT(rax) = t23
   30 | ------ IMark(0x7fbb8dede8f3, 5, 0) ------
   NEXT: PUT(rip) = 0x00007fbb8dede7d5; Ijk_Boring
}
0x7fbb8dede8da:	mov	byte ptr [rdi + 0x29f], dl
0x7fbb8dede8e0:	mov	rax, qword ptr [rax + 0x60]
0x7fbb8dede8e4:	mov	rdx, qword ptr [rax + 0x30]
0x7fbb8dede8e8:	mov	edx, dword ptr [rdx]
0x7fbb8dede8ea:	mov	dword ptr [rax + 0x3c], edx
0x7fbb8dede8ed:	mov	eax, dword ptr [rdi + 0x4e0]
0x7fbb8dede8f3:	jmp	0x7fbb8dede7d5
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x563f3d81f200
maximum memory range     [  0x563f3d81f200  ,  0x563f3d81f318  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x118
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj279_280_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000208_522_8{UNINITIALIZED}>  0x8

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000900_527_8{UNINITIALIZED}>  0x0
<BV8 mem_c0000de0_543_8{UNINITIALIZED}>  0x4e0
<BV8 mem_c0000b9f_548_8{UNINITIALIZED}>  0x29f
<BV8 mem_c0000a78_555_8{UNINITIALIZED}>  0x178

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001008_529_8{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                        address
----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_506_64{UNINITIALIZED}>
<BV56 mem_c0000209_523_56{UNINITIALIZED}>
<BV56 mem_c0000901_528_56{UNINITIALIZED}>
<BV56 mem_c0001009_530_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_538_64{UNINITIALIZED}>
<BV24 mem_c0000de1_544_24{UNINITIALIZED}>
<BV56 mem_c0000a79_556_56{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140443516791002
Write  <BV64 0x1>  bytes to  <BV64 (mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}) + 0x29f>
with expression : <BV8 mem_c0000b9f_548_8{UNINITIALIZED}[7:2] .. 1 .. mem_c0000b9f_548_8{UNINITIALIZED}[0:0]>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7fbb8dede7a0
0x7fbb8dede7a0:	push	r12
0x7fbb8dede7a2:	push	rbp
0x7fbb8dede7a3:	mov	r12, rdi
0x7fbb8dede7a6:	push	rbx
0x7fbb8dede7a7:	sub	rsp, 0x20
0x7fbb8dede7ab:	mov	rax, qword ptr fs:[0x28]
0x7fbb8dede7b4:	mov	qword ptr [rsp + 0x18], rax
0x7fbb8dede7b9:	xor	eax, eax
0x7fbb8dede7bb:	mov	eax, dword ptr [rdi + 0x4e0]
0x7fbb8dede7c1:	test	eax, eax
0x7fbb8dede7c3:	jne	0x7fbb8dede7d5
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj47_48_8 == 0) || (!(uaf_obj46_47_8 == 0) || (!(uaf_obj45_46_8 == 0) || (!(uaf_obj44_45_8 == 0) || (!(uaf_obj43_44_8 == 0) || (!(uaf_obj42_43_8 == 0) || (!(uaf_obj40_41_8 == 0) || !(uaf_obj41_42_8 == 0)))))))>
1  <Bool !(uaf_obj28_29_8[2:2] == 0)>
2  <Bool uaf_obj33_34_8 == 2>
3  <Bool uaf_obj38_39_8 == 0>
4  <Bool uaf_obj35_36_8 == 192>
5  <Bool uaf_obj32_33_8 == 0>
6  <Bool uaf_obj37_38_8 == 0>
7  <Bool uaf_obj34_35_8 == 0>
8  <Bool uaf_obj36_37_8 == 0>
9  <Bool uaf_obj39_40_8 == 0>
10  <Bool mem_c0000208_522_8{UNINITIALIZED} == 0>
11  <Bool mem_c0000209_523_56{UNINITIALIZED} == 0xc00009>
12  <Bool mem_c0000901_528_56{UNINITIALIZED} == 0xc00010>
13  <Bool mem_c0000900_527_8{UNINITIALIZED} == 0>
14  <Bool symbolic_return_0_538_64{UNINITIALIZED} == symbolic_call_0>
15  <Bool mem_c0000de1_544_24{UNINITIALIZED} == 0x0>
16  <Bool mem_c0000de0_543_8{UNINITIALIZED} == 0>
17  <Bool mem_c0000b9f_548_8{UNINITIALIZED}[1:1] == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_538_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140443517049999
call            <BV64 mem_c0001009_530_56{UNINITIALIZED} .. mem_c0001008_529_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Write primitive  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 0x0 .. mem_c0000de1_544_24{UNINITIALIZED} .. mem_c0000de0_543_8{UNINITIALIZED}>  r8: <BV64 0x0>
rbx: <BV64 0x563f3e474240>  r9: <BV64 0x0>
rcx: <BV64 0x100000000000>  r10: <BV64 0x0>
rdx: <BV64 0x0 .. mem_c0002501_562_24{UNINITIALIZED} .. mem_c0002500_561_8{UNINITIALIZED}>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>
rdi: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>  r13: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>
rsp: <BV64 0x7fff42ec13a0>  r14: <BV64 0x563f3eae4ef0>
rbp: <BV64 0x563f3d81f200>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
IRSB {
   t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I32 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I32 t10:Ity_I64

   00 | ------ IMark(0x7fbb8dede8ea, 3, 0) ------
   01 | t3 = GET:I64(rax)
   02 | t2 = Add64(t3,0x000000000000003c)
   03 | t5 = GET:I64(rdx)
   04 | t4 = 64to32(t5)
   05 | STle(t2) = t4
   06 | PUT(rip) = 0x00007fbb8dede8ed
   07 | ------ IMark(0x7fbb8dede8ed, 6, 0) ------
   08 | t7 = GET:I64(rdi)
   09 | t6 = Add64(t7,0x00000000000004e0)
   10 | t9 = LDle:I32(t6)
   11 | t8 = 32Uto64(t9)
   12 | PUT(rax) = t8
   13 | ------ IMark(0x7fbb8dede8f3, 5, 0) ------
   NEXT: PUT(rip) = 0x00007fbb8dede7d5; Ijk_Boring
}
0x7fbb8dede8ea:	mov	dword ptr [rax + 0x3c], edx
0x7fbb8dede8ed:	mov	eax, dword ptr [rdi + 0x4e0]
0x7fbb8dede8f3:	jmp	0x7fbb8dede7d5
-----end dump state-----
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x563f3d81f200
maximum memory range     [  0x563f3d81f200  ,  0x563f3d81f318  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x118
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj279_280_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000208_522_8{UNINITIALIZED}>  0x8

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
0x178     OBJ_4        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000900_527_8{UNINITIALIZED}>  0x0
<BV8 mem_c0000de0_543_8{UNINITIALIZED}>  0x4e0
<BV8 mem_c0000a78_555_8{UNINITIALIZED}>  0x178

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001008_529_8{UNINITIALIZED}>  0x8

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001700
maximum memory range     [  0xc0001500  ,  0xc0001c00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x60      OBJ_5        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001760_557_8{UNINITIALIZED}>  0x60

****************************************************************************************************
object:                  OBJ_5
(possible) base address  0xc0001e00
maximum memory range     [  0xc0001c00  ,  0xc0002300  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x30      OBJ_6        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001e30_559_8{UNINITIALIZED}>  0x30

****************************************************************************************************
object:                  OBJ_6
(possible) base address  0xc0002500
maximum memory range     [  0xc0002300  ,  0xc0002a00  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0002500_561_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                        address
----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_506_64{UNINITIALIZED}>
<BV56 mem_c0000209_523_56{UNINITIALIZED}>
<BV56 mem_c0000901_528_56{UNINITIALIZED}>
<BV56 mem_c0001009_530_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_538_64{UNINITIALIZED}>
<BV24 mem_c0000de1_544_24{UNINITIALIZED}>
<BV8 mem_c0000b9f_548_8{UNINITIALIZED}>
<BV56 mem_c0000a79_556_56{UNINITIALIZED}>
<BV56 mem_c0001761_558_56{UNINITIALIZED}>
<BV56 mem_c0001e31_560_56{UNINITIALIZED}>
<BV24 mem_c0002501_562_24{UNINITIALIZED}>

****************************************************************************************************
This is a write primitive
You have full control of what and where to write
It happens at:  140443516791018
Write  <BV64 0x4>  bytes to  <BV64 Reverse(mem_c0001760_557_8{UNINITIALIZED} .. Reverse(mem_c0001761_558_56{UNINITIALIZED})) + 0x3c>
with expression : <BV32 Reverse(mem_c0002500_561_8{UNINITIALIZED} .. Reverse(mem_c0002501_562_24{UNINITIALIZED}))>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7fbb8dede7a0
0x7fbb8dede7a0:	push	r12
0x7fbb8dede7a2:	push	rbp
0x7fbb8dede7a3:	mov	r12, rdi
0x7fbb8dede7a6:	push	rbx
0x7fbb8dede7a7:	sub	rsp, 0x20
0x7fbb8dede7ab:	mov	rax, qword ptr fs:[0x28]
0x7fbb8dede7b4:	mov	qword ptr [rsp + 0x18], rax
0x7fbb8dede7b9:	xor	eax, eax
0x7fbb8dede7bb:	mov	eax, dword ptr [rdi + 0x4e0]
0x7fbb8dede7c1:	test	eax, eax
0x7fbb8dede7c3:	jne	0x7fbb8dede7d5
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj47_48_8 == 0) || (!(uaf_obj46_47_8 == 0) || (!(uaf_obj45_46_8 == 0) || (!(uaf_obj44_45_8 == 0) || (!(uaf_obj43_44_8 == 0) || (!(uaf_obj42_43_8 == 0) || (!(uaf_obj40_41_8 == 0) || !(uaf_obj41_42_8 == 0)))))))>
1  <Bool !(uaf_obj28_29_8[2:2] == 0)>
2  <Bool uaf_obj33_34_8 == 2>
3  <Bool uaf_obj38_39_8 == 0>
4  <Bool uaf_obj35_36_8 == 192>
5  <Bool uaf_obj32_33_8 == 0>
6  <Bool uaf_obj37_38_8 == 0>
7  <Bool uaf_obj34_35_8 == 0>
8  <Bool uaf_obj36_37_8 == 0>
9  <Bool uaf_obj39_40_8 == 0>
10  <Bool mem_c0000208_522_8{UNINITIALIZED} == 0>
11  <Bool mem_c0000209_523_56{UNINITIALIZED} == 0xc00009>
12  <Bool mem_c0000901_528_56{UNINITIALIZED} == 0xc00010>
13  <Bool mem_c0000900_527_8{UNINITIALIZED} == 0>
14  <Bool symbolic_return_0_538_64{UNINITIALIZED} == symbolic_call_0>
15  <Bool mem_c0000de1_544_24{UNINITIALIZED} == 0x0>
16  <Bool mem_c0000de0_543_8{UNINITIALIZED} == 0>
17  <Bool mem_c0000b9f_548_8{UNINITIALIZED}[1:1] == 0>
18  <Bool mem_c0000a78_555_8{UNINITIALIZED} == 0>
19  <Bool mem_c0000a79_556_56{UNINITIALIZED} == 0xc00017>
20  <Bool mem_c0001760_557_8{UNINITIALIZED} == 0>
21  <Bool mem_c0001761_558_56{UNINITIALIZED} == 0xc0001e>
22  <Bool mem_c0001e30_559_8{UNINITIALIZED} == 0>
23  <Bool mem_c0001e31_560_56{UNINITIALIZED} == 0xc00025>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_538_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140443517049999
call            <BV64 mem_c0001009_530_56{UNINITIALIZED} .. mem_c0001008_529_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          taint_mem
inst            140443516791002
write_to        3221228447
write_size      <BV64 0x1>
value           <BV8 mem_c0000b9f_548_8{UNINITIALIZED}[7:2] .. 1 .. mem_c0000b9f_548_8{UNINITIALIZED}[0:0]>
----------------------------------------------------------------------------------------------------


****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0000901_528_56{UNINITIALIZED} .. mem_c0000900_527_8{UNINITIALIZED}>  r8: <BV64 0x0>
rbx: <BV64 0x563f3e474240>  r9: <BV64 0x0>
rcx: <BV64 0x100000000000>  r10: <BV64 0x0>
rdx: <BV64 0x0>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 0x0>
rdi: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>  r13: <BV64 mem_c0000209_523_56{UNINITIALIZED} .. mem_c0000208_522_8{UNINITIALIZED}>
rsp: <BV64 0x7fff42ec13d8>  r14: <BV64 0x563f3eae4ef0>
rbp: <BV64 0x563f3d81f200>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x563f3d81f200
maximum memory range     [  0x563f3d81f200  ,  0x563f3d81f318  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x118
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj279_280_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000208_522_8{UNINITIALIZED}>  0x8

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000900_527_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001008_529_8{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                   address
-----------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_506_64{UNINITIALIZED}>
<BV56 mem_c0000209_523_56{UNINITIALIZED}>
<BV56 mem_c0000901_528_56{UNINITIALIZED}>
<BV56 mem_c0001009_530_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140443517049999
Calling  <BV64 mem_c0001009_530_56{UNINITIALIZED} .. mem_c0001008_529_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool !(uaf_obj47_48_8 == 0) || (!(uaf_obj46_47_8 == 0) || (!(uaf_obj45_46_8 == 0) || (!(uaf_obj44_45_8 == 0) || (!(uaf_obj43_44_8 == 0) || (!(uaf_obj42_43_8 == 0) || (!(uaf_obj40_41_8 == 0) || !(uaf_obj41_42_8 == 0)))))))>
1  <Bool !(uaf_obj28_29_8[2:2] == 0)>
2  <Bool uaf_obj33_34_8 == 2>
3  <Bool uaf_obj38_39_8 == 0>
4  <Bool uaf_obj35_36_8 == 192>
5  <Bool uaf_obj32_33_8 == 0>
6  <Bool uaf_obj37_38_8 == 0>
7  <Bool uaf_obj34_35_8 == 0>
8  <Bool uaf_obj36_37_8 == 0>
9  <Bool uaf_obj39_40_8 == 0>
10  <Bool mem_c0000208_522_8{UNINITIALIZED} == 0>
11  <Bool mem_c0000209_523_56{UNINITIALIZED} == 0xc00009>
12  <Bool mem_c0000900_527_8{UNINITIALIZED} == 0>
13  <Bool mem_c0000901_528_56{UNINITIALIZED} == 0xc00010>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0000901_532_56{UNINITIALIZED} .. mem_c0000900_531_8{UNINITIALIZED}>  r8: <BV64 0x0>
rbx: <BV64 0x563f3e474240>  r9: <BV64 0x0>
rcx: <BV64 0x100000000000>  r10: <BV64 0x0>
rdx: <BV64 0x0>  r11: <BV64 0x1>
rsi: <BV64 0x0>  r12: <BV64 0x0>
rdi: <BV64 mem_c0000209_525_56{UNINITIALIZED} .. mem_c0000208_524_8{UNINITIALIZED}>  r13: <BV64 mem_c0000209_525_56{UNINITIALIZED} .. mem_c0000208_524_8{UNINITIALIZED}>
rsp: <BV64 0x7fff42ec13d8>  r14: <BV64 0x563f3eae4ef0>
rbp: <BV64 0x563f3d81f200>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x563f3d81f200
maximum memory range     [  0x563f3d81f200  ,  0x563f3d81f318  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x20      OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x118
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj279_280_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000700  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x8       OBJ_2        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000208_524_8{UNINITIALIZED}>  0x8

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000900
maximum memory range     [  0xc0000700  ,  0xc0000e00  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_3        0x0
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0000900_531_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001000
maximum memory range     [  0xc0000e00  ,  0xc0001500  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                 offsets
---------------------------------------  ---------
<BV8 mem_c0001008_533_8{UNINITIALIZED}>  0x8

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                   address
-----------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV64 reg_cc_ndep_507_64{UNINITIALIZED}>
<BV56 mem_c0000209_525_56{UNINITIALIZED}>
<BV56 mem_c0000901_532_56{UNINITIALIZED}>
<BV56 mem_c0001009_534_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140443517049999
Calling  <BV64 mem_c0001009_534_56{UNINITIALIZED} .. mem_c0001008_533_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj40_41_8 == 0>
1  <Bool uaf_obj41_42_8 == 0>
2  <Bool uaf_obj42_43_8 == 0>
3  <Bool uaf_obj43_44_8 == 0>
4  <Bool uaf_obj44_45_8 == 0>
5  <Bool uaf_obj45_46_8 == 0>
6  <Bool uaf_obj46_47_8 == 0>
7  <Bool uaf_obj47_48_8 == 0>
8  <Bool uaf_obj28_29_8[1:1] == 0>
9  <Bool !(uaf_obj28_29_8[2:2] == 0)>
10  <Bool uaf_obj33_34_8 == 2>
11  <Bool uaf_obj38_39_8 == 0>
12  <Bool uaf_obj35_36_8 == 192>
13  <Bool uaf_obj32_33_8 == 0>
14  <Bool uaf_obj37_38_8 == 0>
15  <Bool uaf_obj34_35_8 == 0>
16  <Bool uaf_obj36_37_8 == 0>
17  <Bool uaf_obj39_40_8 == 0>
18  <Bool mem_c0000209_525_56{UNINITIALIZED} == 0xc00009>
19  <Bool mem_c0000208_524_8{UNINITIALIZED} == 0>
20  <Bool mem_c0000900_531_8{UNINITIALIZED} == 0>
21  <Bool mem_c0000901_532_56{UNINITIALIZED} == 0xc00010>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

-----end dump executor-----
