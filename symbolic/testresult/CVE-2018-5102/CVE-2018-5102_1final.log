-----start dump executor-----
Step:  231
State stats:
****************************************************************************************************
Type                   Count
-------------------  -------
write primitive (W)        0
control_hijack (C)         6
active (A)                 0
unconstrained (U)          0
errored (E)                0
found                    251
avoided                    0
paths to write primitive:  0
paths to control hijack:  297
first primitive after:  41
total paths:  2072
****************************************************************************************************
Some errored states: 
****************************************************************************************************
Some write primitives: 
****************************************************************************************************
Some control hijacks: 
Control hijack  0
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0000881_1410_56{UNINITIALIZED} .. mem_c0000880_1409_8{UNINITIALIZED}>  r8: <BV64 0x0>
rbx: <BV64 0x0>  r9: <BV64 0x0>
rcx: <BV64 0x0>  r10: <BV64 0x7ffc8fb50410>
rdx: <BV64 0x562c9ba05900>  r11: <BV64 0x3c5890c0>
rsi: <BV64 0x0>  r12: <BV64 0x7f6ea2ec8ac4>
rdi: <BV64 0x562c9ba05900>  r13: <BV64 0x7f6ea2f8b1dc>
rsp: <BV64 0x7ffc8fb50568>  r14: <BV64 0x0>
rbp: <BV64 0x7ffc8fb505b0>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x562c9ba05900
maximum memory range     [  0x562c9ba05900  ,  0x562c9ba05e80  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_1        0x0
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x580
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj1407_1408_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000880  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                    address
------------------------------------------  ----------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV8 uaf_obj256_257_8>
<BV8 mem_c0000880_1409_8{UNINITIALIZED}>    0xc0000880
<BV56 mem_c0000881_1410_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140113201037564
Calling  <BV64 mem_c0000881_1410_56{UNINITIALIZED} .. mem_c0000880_1409_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f6ea5938034
0x7f6ea5938034:	push	rbp
0x7f6ea5938035:	mov	rbp, rsp
0x7f6ea5938038:	push	r13
0x7f6ea593803a:	push	r12
0x7f6ea593803c:	push	rbx
0x7f6ea593803d:	sub	rsp, 0x28
0x7f6ea5938041:	mov	qword ptr [rbp - 0x38], rdi
0x7f6ea5938045:	mov	qword ptr [rbp - 0x40], rsi
0x7f6ea5938049:	mov	rax, qword ptr [rbp - 0x38]
0x7f6ea593804d:	add	rax, 0xf8
0x7f6ea5938053:	mov	rdi, rax
0x7f6ea5938056:	call	0x7f6ea4c22e78
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj251_252_8 == 155>
1  <Bool uaf_obj248_249_8 == 80>
2  <Bool uaf_obj255_256_8 == 0>
3  <Bool uaf_obj254_255_8 == 0>
4  <Bool uaf_obj253_254_8 == 86>
5  <Bool uaf_obj249_250_8 == 119>
6  <Bool uaf_obj250_251_8 == 157>
7  <Bool uaf_obj252_253_8 == 44>
8  <Bool uaf_obj0_1_8 == 0>
9  <Bool uaf_obj1_2_8 == 2>
10  <Bool uaf_obj2_3_8 == 0>
11  <Bool uaf_obj3_4_8 == 192>
12  <Bool uaf_obj4_5_8 == 0>
13  <Bool uaf_obj5_6_8 == 0>
14  <Bool uaf_obj6_7_8 == 0>
15  <Bool uaf_obj7_8_8 == 0>

****************************************************************************************************
Variables used as return values of symbolic calls: 

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        

Control hijack  1
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0000891_1454_56{UNINITIALIZED} .. mem_c0000890_1453_8{UNINITIALIZED}>  r8: <BV64 0x0>
rbx: <BV64 0x0>  r9: <BV64 0x0>
rcx: <BV64 0x0>  r10: <BV64 0x7ffc8fb50410>
rdx: <BV64 0x562c9ba05900>  r11: <BV64 0x3c5890c0>
rsi: <BV64 0x0>  r12: <BV64 0x7f6ea2ec8ac4>
rdi: <BV64 0x562c9ba05900>  r13: <BV64 0x7f6ea2f8b1dc>
rsp: <BV64 0x7ffc8fb50568>  r14: <BV64 0x0>
rbp: <BV64 0x7ffc8fb505b0>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x562c9ba05900
maximum memory range     [  0x562c9ba05900  ,  0x562c9ba05e80  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_1        0x0
0x4c8     OBJ_2        0x200
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x580
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj1407_1408_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000880  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000880
maximum memory range     [  0xc0000880  ,  0xc0000f80  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x260     OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000880_1409_8{UNINITIALIZED}>  0x0
<BV8 mem_c0000ae0_1422_8{UNINITIALIZED}>  0x260
<BV8 mem_c0000890_1453_8{UNINITIALIZED}>  0x10

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001180
maximum memory range     [  0xc0000f80  ,  0xc0001680  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001180_1424_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV8 uaf_obj256_257_8>
<BV56 mem_c0000881_1410_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_1411_64{UNINITIALIZED}>
<BV56 mem_c0000ae1_1423_56{UNINITIALIZED}>
<BV24 mem_c0001181_1425_24{UNINITIALIZED}>
<BV56 mem_c0000891_1454_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140113201037655
Calling  <BV64 mem_c0000891_1454_56{UNINITIALIZED} .. mem_c0000890_1453_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f6ea5938034
0x7f6ea5938034:	push	rbp
0x7f6ea5938035:	mov	rbp, rsp
0x7f6ea5938038:	push	r13
0x7f6ea593803a:	push	r12
0x7f6ea593803c:	push	rbx
0x7f6ea593803d:	sub	rsp, 0x28
0x7f6ea5938041:	mov	qword ptr [rbp - 0x38], rdi
0x7f6ea5938045:	mov	qword ptr [rbp - 0x40], rsi
0x7f6ea5938049:	mov	rax, qword ptr [rbp - 0x38]
0x7f6ea593804d:	add	rax, 0xf8
0x7f6ea5938053:	mov	rdi, rax
0x7f6ea5938056:	call	0x7f6ea4c22e78
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj251_252_8 == 155>
1  <Bool uaf_obj248_249_8 == 80>
2  <Bool uaf_obj255_256_8 == 0>
3  <Bool uaf_obj254_255_8 == 0>
4  <Bool uaf_obj253_254_8 == 86>
5  <Bool uaf_obj249_250_8 == 119>
6  <Bool uaf_obj250_251_8 == 157>
7  <Bool uaf_obj252_253_8 == 44>
8  <Bool uaf_obj0_1_8 == 0>
9  <Bool uaf_obj2_3_8 == 0>
10  <Bool uaf_obj1_2_8 == 2>
11  <Bool uaf_obj6_7_8 == 0>
12  <Bool uaf_obj3_4_8 == 192>
13  <Bool uaf_obj4_5_8 == 0>
14  <Bool uaf_obj5_6_8 == 0>
15  <Bool uaf_obj7_8_8 == 0>
16  <Bool symbolic_return_0_1411_64{UNINITIALIZED} == symbolic_call_0>
17  <Bool !(symbolic_return_0_1411_64{UNINITIALIZED}[7:0] == 0)>
18  <Bool (uaf_obj795_796_8 .. uaf_obj794_795_8 .. uaf_obj793_794_8 .. uaf_obj792_793_8) <=s 0x0>
19  <Bool uaf_obj1230_1231_8 == 0>
20  <Bool uaf_obj1229_1230_8 == 0>
21  <Bool uaf_obj1224_1225_8 == 128>
22  <Bool uaf_obj1227_1228_8 == 192>
23  <Bool uaf_obj1231_1232_8 == 0>
24  <Bool uaf_obj1225_1226_8 == 10>
25  <Bool uaf_obj1228_1229_8 == 0>
26  <Bool uaf_obj1226_1227_8 == 0>
27  <Bool mem_c0000ae0_1422_8{UNINITIALIZED} == 128>
28  <Bool mem_c0000ae1_1423_56{UNINITIALIZED} == 0xc00011>
29  <Bool !(mem_c0001180_1424_8{UNINITIALIZED} == 0) || !(mem_c0001181_1425_24{UNINITIALIZED} == 0x0)>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_1411_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140113201037564
call            <BV64 mem_c0000881_1410_56{UNINITIALIZED} .. mem_c0000880_1409_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Control hijack  2
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0001bf1_1429_56{UNINITIALIZED} .. mem_c0001bf0_1428_8{UNINITIALIZED}>  r8: <BV64 0x0>
rbx: <BV64 0x0>  r9: <BV64 0x0>
rcx: <BV64 0x0>  r10: <BV64 0x7ffc8fb50410>
rdx: <BV64 mem_c0000a89_1415_56{UNINITIALIZED} .. mem_c0000a88_1414_8{UNINITIALIZED}>  r11: <BV64 0x3c5890c0>
rsi: <BV64 0x0>  r12: <BV64 0x7f6ea2ec8ac4>
rdi: <BV64 mem_c0000a89_1415_56{UNINITIALIZED} .. mem_c0000a88_1414_8{UNINITIALIZED}>  r13: <BV64 0x7f6ea2f8b1dc>
rsp: <BV64 0x7ffc8fb504f8>  r14: <BV64 0x0>
rbp: <BV64 0x7ffc8fb50510>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x562c9ba05900
maximum memory range     [  0x562c9ba05900  ,  0x562c9ba05e80  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_1        0x0
0x20      OBJ_2        0x200
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x580
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj1407_1408_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000880  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000880
maximum memory range     [  0xc0000880  ,  0xc0000f80  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x208     OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000880_1409_8{UNINITIALIZED}>  0x0
<BV8 mem_c0000a88_1414_8{UNINITIALIZED}>  0x208

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001180
maximum memory range     [  0xc0000f80  ,  0xc0001680  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_4        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001180_1426_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001880
maximum memory range     [  0xc0001680  ,  0xc0001d80  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001bf0_1428_8{UNINITIALIZED}>  0x370

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV8 uaf_obj256_257_8>
<BV56 mem_c0000881_1410_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_1411_64{UNINITIALIZED}>
<BV56 mem_c0000a89_1415_56{UNINITIALIZED}>
<BV56 mem_c0001181_1427_56{UNINITIALIZED}>
<BV56 mem_c0001bf1_1429_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140113181647677
Calling  <BV64 mem_c0001bf1_1429_56{UNINITIALIZED} .. mem_c0001bf0_1428_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f6ea46ba31a
0x7f6ea46ba31a:	push	rbp
0x7f6ea46ba31b:	mov	rbp, rsp
0x7f6ea46ba31e:	sub	rsp, 0x10
0x7f6ea46ba322:	mov	qword ptr [rbp - 8], rdi
0x7f6ea46ba326:	mov	rax, qword ptr [rbp - 8]
0x7f6ea46ba32a:	mov	rax, qword ptr [rax]
0x7f6ea46ba32d:	add	rax, 0x370
0x7f6ea46ba333:	mov	rax, qword ptr [rax]
0x7f6ea46ba336:	mov	rdx, qword ptr [rbp - 8]
0x7f6ea46ba33a:	mov	rdi, rdx
0x7f6ea46ba33d:	call	rax
----------------------------------------------------------------------------------------------------
At  0x7f6ea594973a
0x7f6ea594973a:	push	rbp
0x7f6ea594973b:	mov	rbp, rsp
0x7f6ea594973e:	push	r12
0x7f6ea5949740:	push	rbx
0x7f6ea5949741:	sub	rsp, 0x30
0x7f6ea5949745:	mov	qword ptr [rbp - 0x38], rdi
0x7f6ea5949749:	mov	rax, qword ptr fs:[0x28]
0x7f6ea5949752:	mov	qword ptr [rbp - 0x18], rax
0x7f6ea5949756:	xor	eax, eax
0x7f6ea5949758:	mov	rax, qword ptr [rbp - 0x38]
0x7f6ea594975c:	add	rax, 0x4c8
0x7f6ea5949762:	mov	rdi, rax
0x7f6ea5949765:	call	0x7f6ea5964612
----------------------------------------------------------------------------------------------------
At  0x7f6ea5938034
0x7f6ea5938034:	push	rbp
0x7f6ea5938035:	mov	rbp, rsp
0x7f6ea5938038:	push	r13
0x7f6ea593803a:	push	r12
0x7f6ea593803c:	push	rbx
0x7f6ea593803d:	sub	rsp, 0x28
0x7f6ea5938041:	mov	qword ptr [rbp - 0x38], rdi
0x7f6ea5938045:	mov	qword ptr [rbp - 0x40], rsi
0x7f6ea5938049:	mov	rax, qword ptr [rbp - 0x38]
0x7f6ea593804d:	add	rax, 0xf8
0x7f6ea5938053:	mov	rdi, rax
0x7f6ea5938056:	call	0x7f6ea4c22e78
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj251_252_8 == 155>
1  <Bool uaf_obj248_249_8 == 80>
2  <Bool uaf_obj255_256_8 == 0>
3  <Bool uaf_obj254_255_8 == 0>
4  <Bool uaf_obj253_254_8 == 86>
5  <Bool uaf_obj249_250_8 == 119>
6  <Bool uaf_obj250_251_8 == 157>
7  <Bool uaf_obj252_253_8 == 44>
8  <Bool uaf_obj0_1_8 == 0>
9  <Bool uaf_obj2_3_8 == 0>
10  <Bool uaf_obj1_2_8 == 2>
11  <Bool uaf_obj6_7_8 == 0>
12  <Bool uaf_obj3_4_8 == 192>
13  <Bool uaf_obj4_5_8 == 0>
14  <Bool uaf_obj5_6_8 == 0>
15  <Bool uaf_obj7_8_8 == 0>
16  <Bool symbolic_return_0_1411_64{UNINITIALIZED} == symbolic_call_0>
17  <Bool !(symbolic_return_0_1411_64{UNINITIALIZED}[7:0] == 0)>
18  <Bool (uaf_obj795_796_8 .. uaf_obj794_795_8 .. uaf_obj793_794_8 .. uaf_obj792_793_8) <=s 0x0>
19  <Bool uaf_obj1230_1231_8 == 0>
20  <Bool uaf_obj1229_1230_8 == 0>
21  <Bool uaf_obj1224_1225_8 == 0>
22  <Bool uaf_obj1227_1228_8 == 0>
23  <Bool uaf_obj1231_1232_8 == 0>
24  <Bool uaf_obj1225_1226_8 == 0>
25  <Bool uaf_obj1228_1229_8 == 0>
26  <Bool uaf_obj1226_1227_8 == 0>
27  <Bool uaf_obj36_37_8 == 0>
28  <Bool uaf_obj35_36_8 == 192>
29  <Bool uaf_obj39_40_8 == 0>
30  <Bool uaf_obj32_33_8 == 128>
31  <Bool uaf_obj38_39_8 == 0>
32  <Bool uaf_obj34_35_8 == 0>
33  <Bool uaf_obj37_38_8 == 0>
34  <Bool uaf_obj33_34_8 == 10>
35  <Bool mem_c0000a88_1414_8{UNINITIALIZED} == 128>
36  <Bool mem_c0000a89_1415_56{UNINITIALIZED} == 0xc00011>
37  <Bool mem_c0001180_1426_8{UNINITIALIZED} == 128>
38  <Bool mem_c0001181_1427_56{UNINITIALIZED} == 0xc00018>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_1411_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140113201037564
call            <BV64 mem_c0000881_1410_56{UNINITIALIZED} .. mem_c0000880_1409_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Control hijack  3
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0001881_1496_56{UNINITIALIZED} .. mem_c0001880_1495_8{UNINITIALIZED}>  r8: <BV64 0x0>
rbx: <BV64 0x0>  r9: <BV64 0x0>
rcx: <BV64 0x0>  r10: <BV64 0x7ffc8fb50410>
rdx: <BV64 mem_c0000a89_1419_56{UNINITIALIZED} .. mem_c0000a88_1418_8{UNINITIALIZED}>  r11: <BV64 0x3c5890c0>
rsi: <BV64 0x0>  r12: <BV64 0x7f6ea594483e>
rdi: <BV64 mem_c0000a89_1419_56{UNINITIALIZED} .. mem_c0000a88_1418_8{UNINITIALIZED}>  r13: <BV64 0x0>
rsp: <BV64 0x7ffc8fb50528>  r14: <BV64 0x0>
rbp: <BV64 0x7ffc8fb50560>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x562c9ba05900
maximum memory range     [  0x562c9ba05900  ,  0x562c9ba05e80  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_1        0x0
0xd0      OBJ_2        0x200
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x580
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj1407_1408_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000880  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
   No variables    

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000880
maximum memory range     [  0xc0000880  ,  0xc0000f80  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x208     OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000880_1409_8{UNINITIALIZED}>  0x0
<BV8 mem_c0000a80_1412_8{UNINITIALIZED}>  0x200
<BV8 mem_c0000a88_1418_8{UNINITIALIZED}>  0x208

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001180
maximum memory range     [  0xc0000f80  ,  0xc0001680  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_4        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c00011b0_1439_8{UNINITIALIZED}>  0x30
<BV8 mem_c00011b8_1450_8{UNINITIALIZED}>  0x38
<BV8 mem_c0001180_1493_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001880
maximum memory range     [  0xc0001680  ,  0xc0001d80  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001880_1495_8{UNINITIALIZED}>  0x0

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV8 uaf_obj256_257_8>
<BV56 mem_c0000881_1410_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_1411_64{UNINITIALIZED}>
<BV24 mem_c0000a81_1413_24{UNINITIALIZED}>
<BV56 mem_c0000a89_1419_56{UNINITIALIZED}>
<BV56 mem_c00011b1_1440_56{UNINITIALIZED}>
<BV56 mem_c00011b9_1451_56{UNINITIALIZED}>
<BV56 mem_c0001181_1494_56{UNINITIALIZED}>
<BV56 mem_c0001881_1496_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140113201209653
Calling  <BV64 mem_c0001881_1496_56{UNINITIALIZED} .. mem_c0001880_1495_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f6ea59620ec
0x7f6ea59620ec:	push	rbp
0x7f6ea59620ed:	mov	rbp, rsp
0x7f6ea59620f0:	sub	rsp, 0x30
0x7f6ea59620f4:	mov	qword ptr [rbp - 0x18], rdi
0x7f6ea59620f8:	mov	rax, rsi
0x7f6ea59620fb:	mov	rcx, rdx
0x7f6ea59620fe:	mov	rdx, rcx
0x7f6ea5962101:	mov	qword ptr [rbp - 0x30], rax
0x7f6ea5962105:	mov	qword ptr [rbp - 0x28], rdx
0x7f6ea5962109:	mov	rcx, qword ptr [rbp - 0x30]
0x7f6ea596210d:	mov	rdx, qword ptr [rbp - 0x28]
0x7f6ea5962111:	mov	rax, qword ptr [rbp - 0x18]
0x7f6ea5962115:	mov	rsi, rcx
0x7f6ea5962118:	mov	rdi, rax
0x7f6ea596211b:	call	0x7f6ea5968224
----------------------------------------------------------------------------------------------------
At  0x7f6ea5938034
0x7f6ea5938034:	push	rbp
0x7f6ea5938035:	mov	rbp, rsp
0x7f6ea5938038:	push	r13
0x7f6ea593803a:	push	r12
0x7f6ea593803c:	push	rbx
0x7f6ea593803d:	sub	rsp, 0x28
0x7f6ea5938041:	mov	qword ptr [rbp - 0x38], rdi
0x7f6ea5938045:	mov	qword ptr [rbp - 0x40], rsi
0x7f6ea5938049:	mov	rax, qword ptr [rbp - 0x38]
0x7f6ea593804d:	add	rax, 0xf8
0x7f6ea5938053:	mov	rdi, rax
0x7f6ea5938056:	call	0x7f6ea4c22e78
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj251_252_8 == 155>
1  <Bool uaf_obj248_249_8 == 80>
2  <Bool uaf_obj255_256_8 == 0>
3  <Bool uaf_obj254_255_8 == 0>
4  <Bool uaf_obj253_254_8 == 86>
5  <Bool uaf_obj249_250_8 == 119>
6  <Bool uaf_obj250_251_8 == 157>
7  <Bool uaf_obj252_253_8 == 44>
8  <Bool uaf_obj0_1_8 == 0>
9  <Bool uaf_obj2_3_8 == 0>
10  <Bool uaf_obj1_2_8 == 2>
11  <Bool uaf_obj6_7_8 == 0>
12  <Bool uaf_obj3_4_8 == 192>
13  <Bool uaf_obj4_5_8 == 0>
14  <Bool uaf_obj5_6_8 == 0>
15  <Bool uaf_obj7_8_8 == 0>
16  <Bool symbolic_return_0_1411_64{UNINITIALIZED} == symbolic_call_0>
17  <Bool symbolic_return_0_1411_64{UNINITIALIZED}[7:0] == 0>
18  <Bool uaf_obj209_210_8 == 10>
19  <Bool uaf_obj210_211_8 == 0>
20  <Bool uaf_obj213_214_8 == 0>
21  <Bool uaf_obj212_213_8 == 0>
22  <Bool uaf_obj208_209_8 == 128>
23  <Bool uaf_obj211_212_8 == 192>
24  <Bool uaf_obj215_216_8 == 0>
25  <Bool uaf_obj214_215_8 == 0>
26  <Bool !(mem_c0000a80_1412_8{UNINITIALIZED} == 0) || !(mem_c0000a81_1413_24{UNINITIALIZED} == 0x0)>
27  <Bool mem_c0000a89_1419_56{UNINITIALIZED} == 0xc00011>
28  <Bool mem_c0000a88_1418_8{UNINITIALIZED} == 128>
29  <Bool mem_c00011b1_1440_56{UNINITIALIZED} == 0x7f6ea59448>
30  <Bool mem_c00011b0_1439_8{UNINITIALIZED} == 62>
31  <Bool mem_c00011b9_1451_56{UNINITIALIZED} == 0x0>
32  <Bool mem_c00011b8_1450_8{UNINITIALIZED} == 0>
33  <Bool mem_c0001180_1493_8{UNINITIALIZED} == 128>
34  <Bool mem_c0001181_1494_56{UNINITIALIZED} == 0xc00018>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_1411_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140113201037564
call            <BV64 mem_c0000881_1410_56{UNINITIALIZED} .. mem_c0000880_1409_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


Control hijack  4
****************************************************************************************************
-----start dump state-----
**registers**
rax: <BV64 mem_c0000209_5965_56{UNINITIALIZED} .. mem_c0000208_5964_8{UNINITIALIZED}>  r8: <BV64 0x0>
rbx: <BV64 0xc0001d80>  r9: <BV64 0x0>
rcx: <BV64 0x7ffc8fb50440>  r10: <BV64 0x7ffc8fb50410>
rdx: <BV64 0x562c9ba05900>  r11: <BV64 0x3c5890c0>
rsi: <BV64 0x562c9ba05900>  r12: <BV64 0x0>
rdi: <BV64 0x562c9ba05900>  r13: <BV64 0x7f6ea2f8b1dc>
rsp: <BV64 0x7ffc8fb50458>  r14: <BV64 0x0>
rbp: <BV64 0x7ffc8fb50470>  r15: <BV64 0x0>
gs: <BV64 reg_gs_0_64{UNINITIALIZED}>
**instructions**
angr.errors.SimValueError:
****************************************************************************************************
object:                  OBJ_0
(possible) base address  0x562c9ba05900
maximum memory range     [  0x562c9ba05900  ,  0x562c9ba05e80  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_1        0x0
0x20      OBJ_2        0x200
 
This is the UAF object, all bytes of it are symbolic variables
Object size:  0x580
contains variables:     
 <BV8 uaf_obj0_1_8>  ...  <BV8 uaf_obj1407_1408_8>

****************************************************************************************************
object:                  OBJ_1
(possible) base address  0xc0000200
maximum memory range     [  0xc0000000  ,  0xc0000880  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000208_5964_8{UNINITIALIZED}>  0x8

****************************************************************************************************
object:                  OBJ_2
(possible) base address  0xc0000880
maximum memory range     [  0xc0000880  ,  0xc0000f80  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x208     OBJ_3        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0000880_1409_8{UNINITIALIZED}>  0x0
<BV8 mem_c0000a88_1414_8{UNINITIALIZED}>  0x208

****************************************************************************************************
object:                  OBJ_3
(possible) base address  0xc0001180
maximum memory range     [  0xc0000f80  ,  0xc0001680  ]
 
contains pointers:      
offset    points to    offset in target
--------  -----------  ------------------
0x0       OBJ_4        0x0
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001180_1426_8{UNINITIALIZED}>  0x0

****************************************************************************************************
object:                  OBJ_4
(possible) base address  0xc0001880
maximum memory range     [  0xc0001680  ,  0xc0001d80  ]
 
contains pointers:      
   No pointers     
 
contains variables:     
variable                                  offsets
----------------------------------------  ---------
<BV8 mem_c0001bf0_1428_8{UNINITIALIZED}>  0x370

****************************************************************************************************
Symbolic pointers that we are not sure which object it belongs to:
address    points to
---------  -----------
--------------------------------------------------
****************************************************************************************************
Variables that we are not sure which object it belongs to:
variable                                         address
-----------------------------------------------  ---------
<BV64 reg_gs_0_64{UNINITIALIZED}>
<BV8 uaf_obj256_257_8>
<BV56 mem_c0000881_1410_56{UNINITIALIZED}>
<BV64 symbolic_call_0>
<BV64 symbolic_return_0_1411_64{UNINITIALIZED}>
<BV56 mem_c0000a89_1415_56{UNINITIALIZED}>
<BV56 mem_c0001181_1427_56{UNINITIALIZED}>
<BV56 mem_c0001bf1_1429_56{UNINITIALIZED}>
<BV64 symbolic_call_1>
<BV64 symbolic_return_1_1430_64{UNINITIALIZED}>
<BV56 mem_c0000209_5965_56{UNINITIALIZED}>

****************************************************************************************************
This is a control hijack
You are calling a function with controlled address
It happens at:  140113186745204
Calling  <BV64 mem_c0000209_5965_56{UNINITIALIZED} .. mem_c0000208_5964_8{UNINITIALIZED}>
Call Stack:
----------------------------------------------------------------------------------------------------
At  0x7f6ea4b96b53
0x7f6ea4b96b53:	push	rbp
0x7f6ea4b96b54:	mov	rbp, rsp
0x7f6ea4b96b57:	sub	rsp, 0x10
0x7f6ea4b96b5b:	mov	qword ptr [rbp - 8], rdi
0x7f6ea4b96b5f:	mov	rax, qword ptr [rbp - 8]
0x7f6ea4b96b63:	mov	rax, qword ptr [rax]
0x7f6ea4b96b66:	add	rax, 8
0x7f6ea4b96b6a:	mov	rax, qword ptr [rax]
0x7f6ea4b96b6d:	mov	rdx, qword ptr [rbp - 8]
0x7f6ea4b96b71:	mov	rdi, rdx
0x7f6ea4b96b74:	call	rax
----------------------------------------------------------------------------------------------------
At  0x7f6ea4b9502e
0x7f6ea4b9502e:	push	rbp
0x7f6ea4b9502f:	mov	rbp, rsp
0x7f6ea4b95032:	sub	rsp, 0x10
0x7f6ea4b95036:	mov	qword ptr [rbp - 8], rdi
0x7f6ea4b9503a:	mov	rax, qword ptr [rbp - 8]
0x7f6ea4b9503e:	mov	rdi, rax
0x7f6ea4b95041:	call	0x7f6ea4b96b53
----------------------------------------------------------------------------------------------------
At  0x7f6ea5960928
0x7f6ea5960928:	push	rbp
0x7f6ea5960929:	mov	rbp, rsp
0x7f6ea596092c:	sub	rsp, 0x10
0x7f6ea5960930:	mov	qword ptr [rbp - 8], rdi
0x7f6ea5960934:	mov	qword ptr [rbp - 0x10], rsi
0x7f6ea5960938:	mov	rax, qword ptr [rbp - 8]
0x7f6ea596093c:	mov	rdx, qword ptr [rbp - 0x10]
0x7f6ea5960940:	mov	qword ptr [rax], rdx
0x7f6ea5960943:	mov	rax, qword ptr [rbp - 8]
0x7f6ea5960947:	mov	rax, qword ptr [rax]
0x7f6ea596094a:	test	rax, rax
0x7f6ea596094d:	je	0x7f6ea596095e
----------------------------------------------------------------------------------------------------
At  0x7f6ea5b9675e
0x7f6ea5b9675e:	push	rbp
0x7f6ea5b9675f:	mov	rbp, rsp
0x7f6ea5b96762:	sub	rsp, 0x20
0x7f6ea5b96766:	mov	qword ptr [rbp - 8], rdi
0x7f6ea5b9676a:	mov	qword ptr [rbp - 0x10], rsi
0x7f6ea5b9676e:	mov	qword ptr [rbp - 0x18], rdx
0x7f6ea5b96772:	mov	rax, qword ptr [rbp - 8]
0x7f6ea5b96776:	mov	rdx, qword ptr [rbp - 0x10]
0x7f6ea5b9677a:	mov	rsi, rdx
0x7f6ea5b9677d:	mov	rdi, rax
0x7f6ea5b96780:	call	0x7f6ea47eb868
----------------------------------------------------------------------------------------------------
At  0x7f6ea595a94a
0x7f6ea595a94a:	push	rbp
0x7f6ea595a94b:	mov	rbp, rsp
0x7f6ea595a94e:	sub	rsp, 0x20
0x7f6ea595a952:	mov	qword ptr [rbp - 8], rdi
0x7f6ea595a956:	mov	qword ptr [rbp - 0x10], rsi
0x7f6ea595a95a:	mov	qword ptr [rbp - 0x18], rdx
0x7f6ea595a95e:	mov	rax, qword ptr [rbp - 8]
0x7f6ea595a962:	mov	rdx, qword ptr [rbp - 0x18]
0x7f6ea595a966:	mov	rcx, qword ptr [rbp - 0x10]
0x7f6ea595a96a:	mov	rsi, rcx
0x7f6ea595a96d:	mov	rdi, rax
0x7f6ea595a970:	call	0x7f6ea5b9675e
----------------------------------------------------------------------------------------------------
At  0x7f6ea594973a
0x7f6ea594973a:	push	rbp
0x7f6ea594973b:	mov	rbp, rsp
0x7f6ea594973e:	push	r12
0x7f6ea5949740:	push	rbx
0x7f6ea5949741:	sub	rsp, 0x30
0x7f6ea5949745:	mov	qword ptr [rbp - 0x38], rdi
0x7f6ea5949749:	mov	rax, qword ptr fs:[0x28]
0x7f6ea5949752:	mov	qword ptr [rbp - 0x18], rax
0x7f6ea5949756:	xor	eax, eax
0x7f6ea5949758:	mov	rax, qword ptr [rbp - 0x38]
0x7f6ea594975c:	add	rax, 0x4c8
0x7f6ea5949762:	mov	rdi, rax
0x7f6ea5949765:	call	0x7f6ea5964612
----------------------------------------------------------------------------------------------------
At  0x7f6ea5938034
0x7f6ea5938034:	push	rbp
0x7f6ea5938035:	mov	rbp, rsp
0x7f6ea5938038:	push	r13
0x7f6ea593803a:	push	r12
0x7f6ea593803c:	push	rbx
0x7f6ea593803d:	sub	rsp, 0x28
0x7f6ea5938041:	mov	qword ptr [rbp - 0x38], rdi
0x7f6ea5938045:	mov	qword ptr [rbp - 0x40], rsi
0x7f6ea5938049:	mov	rax, qword ptr [rbp - 0x38]
0x7f6ea593804d:	add	rax, 0xf8
0x7f6ea5938053:	mov	rdi, rax
0x7f6ea5938056:	call	0x7f6ea4c22e78
----------------------------------------------------------------------------------------------------
****************************************************************************************************
constraints:             
0  <Bool uaf_obj251_252_8 == 155>
1  <Bool uaf_obj248_249_8 == 80>
2  <Bool uaf_obj255_256_8 == 0>
3  <Bool uaf_obj254_255_8 == 0>
4  <Bool uaf_obj253_254_8 == 86>
5  <Bool uaf_obj249_250_8 == 119>
6  <Bool uaf_obj250_251_8 == 157>
7  <Bool uaf_obj252_253_8 == 44>
8  <Bool uaf_obj0_1_8 == 0>
9  <Bool uaf_obj2_3_8 == 0>
10  <Bool uaf_obj1_2_8 == 2>
11  <Bool uaf_obj6_7_8 == 0>
12  <Bool uaf_obj3_4_8 == 192>
13  <Bool uaf_obj4_5_8 == 0>
14  <Bool uaf_obj5_6_8 == 0>
15  <Bool uaf_obj7_8_8 == 0>
16  <Bool symbolic_return_0_1411_64{UNINITIALIZED} == symbolic_call_0>
17  <Bool !(symbolic_return_0_1411_64{UNINITIALIZED}[7:0] == 0)>
18  <Bool (uaf_obj795_796_8 .. uaf_obj794_795_8 .. uaf_obj793_794_8 .. uaf_obj792_793_8) <=s 0x0>
19  <Bool uaf_obj1230_1231_8 == 0>
20  <Bool uaf_obj1229_1230_8 == 0>
21  <Bool uaf_obj1224_1225_8 == 0>
22  <Bool uaf_obj1227_1228_8 == 0>
23  <Bool uaf_obj1231_1232_8 == 0>
24  <Bool uaf_obj1225_1226_8 == 0>
25  <Bool uaf_obj1228_1229_8 == 0>
26  <Bool uaf_obj1226_1227_8 == 0>
27  <Bool uaf_obj36_37_8 == 0>
28  <Bool uaf_obj35_36_8 == 192>
29  <Bool uaf_obj39_40_8 == 0>
30  <Bool uaf_obj32_33_8 == 128>
31  <Bool uaf_obj38_39_8 == 0>
32  <Bool uaf_obj34_35_8 == 0>
33  <Bool uaf_obj37_38_8 == 0>
34  <Bool uaf_obj33_34_8 == 10>
35  <Bool mem_c0000a88_1414_8{UNINITIALIZED} == 128>
36  <Bool mem_c0000a89_1415_56{UNINITIALIZED} == 0xc00011>
37  <Bool mem_c0001180_1426_8{UNINITIALIZED} == 128>
38  <Bool mem_c0001181_1427_56{UNINITIALIZED} == 0xc00018>
39  <Bool symbolic_return_1_1430_64{UNINITIALIZED} == 0x0>
40  <Bool symbolic_call_1 == 0x0>

****************************************************************************************************
Variables used as return values of symbolic calls: 
 <BV64 symbolic_return_0_1411_64{UNINITIALIZED}>
 <BV64 symbolic_return_1_1430_64{UNINITIALIZED}>

****************************************************************************************************
We've logged: 
         taint_mem:          write with controlled value 
         read_taint:         read from tainted memory 
         call:               call with controlled function address 
         jump:               call with controlled destination address 
         write_ret_val:      write return value to memory 
         deref_ret_val_w:    dereference returned pointer for write 
         deref_ret_val_r:    dereference returned pointer for read 
****************************************************************************************************
Execution history:        
0: 
----------------------------------------------------------------------------------------------------
access          call
id              0
call_from       140113201037564
call            <BV64 mem_c0000881_1410_56{UNINITIALIZED} .. mem_c0000880_1409_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

1: 
----------------------------------------------------------------------------------------------------
access          call
id              1
call_from       140113181647677
call            <BV64 mem_c0001bf1_1429_56{UNINITIALIZED} .. mem_c0001bf0_1428_8{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

2: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140113156023806
call_id         1
write_to        <BV64 0x7ffc8fb504f8>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_1_1430_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

3: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140113156023780
call_id         1
write_to        <BV64 0x7ffc8fb504d0>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_1_1430_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

4: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140113156023792
call_id         1
write_to        <BV64 0x7ffc8fb50500>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_1_1430_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

5: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140113181797570
call_id         1
write_to        <BV64 0x7ffc8fb50500>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_1_1430_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------

6: 
----------------------------------------------------------------------------------------------------
access          write_ret_val
inst            140113156206482
call_id         1
write_to        <BV64 0x7ffc8fb504d0>
write_size      <BV64 0x8>
value           <BV64 symbolic_return_1_1430_64{UNINITIALIZED}>
----------------------------------------------------------------------------------------------------


-----end dump executor-----
