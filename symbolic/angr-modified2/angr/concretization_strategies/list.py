from . import SimConcretizationStrategy

class SimConcretizationStrategyList(SimConcretizationStrategy):
    '''
    Concretization that return address in a list of memory address
    and possibly a random address
    '''
    def __init__(self, addr_list, new_addr=False, limit=64, **kwargs):
        super(SimConcretizationStrategyTaint, self).__init__(**kwargs)
        self._addr_list = addr_list # memory address that are pointed by a controlled memory location
        self._limit = limit
        self.new_addr = new_addr

    def _concretize(self, memory, addr):
        addrs = []
        if self.new_addr:
            freshAddr = self._any(memory, addr)
            if freshAddr != None:
                print("randomly an address: ", freshAddr)
                addrs.append(freshAddr)

        choices = []
        for a in self._addr_list:
            choices.append((a, addr))

        constraint = memory.state.solver.Or(*[ expr == a for (a,expr) in choices])
        memory.state.add_constraints(constraint)
        print("using taint strategy")
        try:
            addrs.extend(self._eval(memory, addr, self._limit))
        except:
            addrs = addrs
        return addrs
