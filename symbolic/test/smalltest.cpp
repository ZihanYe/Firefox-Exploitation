// test
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define BUFSIZER1 512
#define BUFSIZER2 ((BUFSIZER1/2) - 8)

int f(int i, char *buf) {
	if (buf[i] == 'a') {
		return i;
	} else {
		return f(i+1, buf);
	}
}

int main(int argc, char **argv) {
	char *buf1R1;
	char *buf2R1;
	char *buf2R2;
	char *buf3R2;

	int i = 0;

	buf1R1 = (char *) malloc(BUFSIZER1);
	buf2R1 = (char *) malloc(BUFSIZER1);
	free(buf2R1);
	buf2R2 = (char *) malloc(BUFSIZER2);
	buf3R2 = (char *) malloc(BUFSIZER2);
	// buf2R1 dangling pointer
	// start symbolic execution
	int j = f(i, buf2R1)
	if (j > 10) {
		// primitive !!!
		strncpy(buf2R1, argv[1], BUFSIZER1-1);
	}
	
	free(buf1R1);
	free(buf2R2);
	free(buf3R2);
	return 0;
}