// test
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>

#define BUFSIZE1 20
#define BUFSIZE2 5
#define BUFSIZE3 5
#define BUFSIZE4 5

typedef void (*printMyStruct)();
typedef void (*printMyStruct2)();
typedef void (*printMyStruct3)();

typedef struct myStruct4 {
	char buf[BUFSIZE4];
} myStruct4;

typedef struct myStruct3 {
	printMyStruct3 print;
	myStruct4* child;
	char buf[BUFSIZE3];
} myStruct3;

typedef struct myStruct2 {
	printMyStruct2 print;
	myStruct3* x;
	myStruct3* y;
	char buf[BUFSIZE2];
} myStruct2;

// Contrived structure
typedef struct myStruct1 {
    printMyStruct print;
    myStruct2* child;
    char buf[BUFSIZE1];
} myStruct1;

myStruct2* f(int i, myStruct1 *s1, myStruct2 *s2) {
	if (i >= BUFSIZE1)
		return s1->child;
	else if (s1->buf[i] == 'a')
		return s2;
	else
		return f(i+1, s1, s2);
}

int main(int argc, char **argv) {
	myStruct1 *struct1;
	myStruct2 *struct2a;
	myStruct2 *struct2b;
	myStruct3 *struct3x;
	myStruct3 *struct3y;
	myStruct4 *struct4;

	struct1 = (myStruct1 *)malloc(sizeof(myStruct1));
	struct2a = (myStruct2 *)malloc(sizeof(myStruct2));
	struct2b = (myStruct2 *)malloc(sizeof(myStruct2));
	struct3x = (myStruct3 *)malloc(sizeof(myStruct3));
	struct3y = (myStruct3 *)malloc(sizeof(myStruct3));
	struct4 = (myStruct4 *)malloc(sizeof(myStruct4));
	struct3y->child = struct4;
	struct2a->x = struct3x;
	struct2a->y = struct3y;
	struct1->child = struct2a;
	strncpy(struct1->buf, argv[1], BUFSIZE1-1);
	strncpy(struct2a->buf, argv[2], BUFSIZE2-1);
	strncpy(struct3x->buf, argv[3], BUFSIZE3-1);
	strncpy(struct4->buf, argv[4], BUFSIZE4-1);
	struct2b->buf[0] = 'b';
	
	free(struct1);
	// struct1 is a dangling pointer
	if (struct1->buf[0] == 'b') {
		myStruct2* ret = f(0, struct1, struct2b);
		if (ret != NULL) {
			if (ret->buf[0] == 'a'){
				if (ret->x->buf[0] == 'a' && ret->y->child->buf[0] == 'a') {
					// control hijack!!
					ret->print();
				}
			}
		}
	}
	free(struct1);
	return 0;
}