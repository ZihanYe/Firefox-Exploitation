import angr
import time
import logging
import time

log = logging.getLogger("symbolic")

class DfsSimgr:
    def __init__(self, proj, initial_state, replacing_var, step_limit=10000):
        self.initial_state = initial_state
        self.replacing_var = replacing_var
        self.to_sat_constraints = filter(self.related_constraints, self.initial_state.solver.constraints)

        self.step_limit = step_limit
        self.proj = proj
        self.simgr = self.proj.factory.simgr(initial_state)
        count = 0
        for c in initial_state.callstack:
            count += 1
        self.goal = count - 1


    def explore(self):
        dfs = angr.exploration_techniques.DFS(deferred_stash='deferred')
        self.simgr.use_technique(dfs)

        step = 0
        stop = False
        while not stop:
            try:
                self.simgr.step(step_func = self.step_func)
            except:
                log.error("[-] Error in stepping DfsSimgr")
                import IPython; IPython.embed()
                return
            if len(self.simgr.stashes['found']) >= 1:
                stop = True
            step += 1
            if step > self.step_limit:
                stop = True

        if len(self.simgr.stashes['found']) >= 1:
            return self.simgr.stashes['found'][0]
        else:
            return None


    def step_func(self,lsm):
        def foundSat(s):
            count = 0
            for c in s.callstack:
                count += 1
            if count == self.goal:
                # check sat
                if s.solver.satisfiable(extra_constraints = to_sat_constraints):
                    return 'SAT'
                else
                    return 'UNSAT'
            else:
                return 'UNKNOWN'

        lsm.stash(filter_func=lambda state: foundSat(state) == 'SAT', from_stash='active', to_stash='found')
        lsm.stash(filter_func=lambda state: foundSat(state) == 'UNSAT', from_stash='active', to_stash='unsat')
        return lsm

    def related_constraints(self, c):
        for l in c.leaf_asts():
            if l is self.replacing_var:
                return True
        return False
