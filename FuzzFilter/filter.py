'''
given the original POC, directory of test cases, and crashreport of them
find test cases that diverged the crash or caused crash at a different place
'''

import sys
import os
import subprocess
from shutil import copyfile

def gdbTester(testcase, firefox, outdir, prefdir=None):
	if not os.path.isfile(testcase):
		raise Exception("test case: No such file")
	if not os.path.isdir(outdir):
		raise Exception("outdir: No such directory")
	if prefdir != None and not os.path.isdir(prefdir):
		raise Exception("preference directory: No such directory")

	os.environ['TESTER_TESTCASE'] = testcase
	poc = os.path.basename(testcase)
	logfile = poc.replace(".html","_out.txt")
	outfile = os.path.join(outdir, logfile)
	os.environ['TESTER_LOGFILE'] = os.path.join(outdir, logfile)
	os.environ['TESTER_PREFDIR'] = prefdir
	workingdir = os.environ['TESTER_WORKDIR']
	cmd = "gdb -batch " + firefox + " -x " + os.path.join(workingdir, "gdbtestercmd.gdb")

	print("================== Testing with poc:" + poc)
	print("================== Executing Command: " + cmd)
	proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	try:
		outs, errs = proc.communicate(timeout=45)
		print(outs.decode('utf-8'))
		print(errs.decode('utf-8'))
		print("DONE testing Poc " + testcase)
		print("saved output to " + outfile)
		return outfile
	except subprocess.TimeoutExpired:
		proc.kill()
		print("==== timeout")
		outs, errs = proc.communicate()
		print(outs.decode('utf-8'))
		print(errs.decode('utf-8'))
		return "FAIL"

	

def formatTrace(trace):
	# extract trace of function calls
	callstack = []
	with open(trace) as tr:
		line = tr.readline()
		index = 1
		while line:
			if line.startswith("#" + str(index)):
				start = line.find(" in ")
				end = line.find("(")
				if start == -1 or end == -1:
					return (False, callstack) # report not correctly formatted 
				else:
					start += 4
					func = line[start:end]
					callstack.append(func)
				index += 1
			line = tr.readline()
	return (True, callstack)

					
def checkSameTrace(trace, callstack):
	# check call stack of trace against the given call stack
	(formatted, callstack2) = formatTrace(trace)
	if not formatted:
		return -1
	print("call stack of crash: " + ','.join(callstack2) + "\n")
	if callstack == callstack2:
		return 1
	return 0
	

def checkAllTraces(testcases, crashreports, callstack, outdir, logOrCopy= True):
	if logOrCopy:
		undecided = open(os.path.join(outdir, "undecided.txt"), "a")
		diverging = open(os.path.join(outdir, "diverging.txt"), "a")
	else:
		undecided = os.path.join(outdir, "undecided")
		diverging = os.path.join(outdir, "diverging")
		os.makedirs(undecided)
		os.makedirs(diverging)
		tests = os.listdir(testcases)
	for crash in os.listdir(crashreports):
		print("check " + crash + ": ")
		name = os.path.basename(crash)
		test = name.replace("_out.txt", ".html")
		result = checkSameTrace(os.path.join(crashreports,crash), callstack)
		if result <= 0 and not os.path.isfile(os.path.join(testcases, test)):
			print(test + " not found in " + testcases)
		elif result == -1:
			if logOrCopy:
				undecided.write(test + "\n")
			else:
				copyfile(os.path.join(testcases, test), undecided)
		elif result == 0:
			if logOrCopy:
				diverging.write(test + "\n")
			else:
				copyfile(os.path.join(testcases, test), diverging)
	if logOrCopy:
		undecided.close()
		diverging.close()


def main():
	'''
	python filter.py /path/to/firefox 
			[--poc /path/to/poc]
			[--poc-crash /path/to/crash/of/poc]
			--tests /directory/of/testcases 
			--crashreports /directory/to/crash/reports
			[--log /path/to/directory/for/saving/diverging/paths]
			[--profile /path/to/profile]
			[--copyTests]

	check crash trace of each test against that of the original poc, if different, copy the test case into log directory
	'''
	ff = sys.argv[1]
	testdir = ''
	outdir = ''
	crashdir = ''
	poc = ''
	poccrash = ''
	profile = ''
	logToFile = True

	index = 2
	while index < len(sys.argv):
		if sys.argv[index] == '--tests':
			testdir = sys.argv[index + 1]
			index = index +2
		elif sys.argv[index] == '--crashreports':
			crashdir = sys.argv[index+1]
			index = index +2
		elif sys.argv[index] == '--log':
			outdir = sys.argv[index+1]
			index = index +2
		elif sys.argv[index] == '--profile':
			profile = sys.argv[index+1]
			index = index +2
		elif sys.argv[index] == '--poc':
			poc = sys.argv[index+1]
			index = index +2
		elif sys.argv[index] == '--poc-crash':
			poccrash = sys.argv[index+1]
			index = index +2
		elif sys.argv[index] == '--copyTests':
			logToFile = False
			index = index +1
		else:
			raise Exception("invalid argument")

	if testdir == '' or not os.path.isdir(testdir):
		raise Exception("test cases directory was not specified or does not exist")

	if crashdir == '' or not os.path.isdir(crashdir):
		raise Exception("crash reports directory was not specified or does not exit")

	if outdir == '':
		outdir = os.path.join(testdir, "divergingPath")
		os.makedirs(outdir)
	elif not os.path.isdir(outdir):
		raise Exception("log: no such directory")
	print("saving any diverging path test in " + outdir)

	if poccrash == '':
		if poc == '':
			raise Exception("either original poc or crashing trace of it needs to be specified")
		else:
			if profile == '':
				poccrash = gdbTester(poc, ff, outdir)
			else:
				poccrash = gdbTester(poc, ff, outdir, profile)
		if poccrash == "FAIL" or not os.path.isfile(poccrash):
			raise Exception("fail to crash original POC")
	elif not os.path.isfile(poccrash):
		raise Exception("poc-crash: No such file")

	# check crashes in crashdir against poccrash
	(formatted, callstack) = formatTrace(poccrash)
	if not formatted:
		raise Exception("unable to parse crash trace of POC")
	else:
		print("call stack of crash of poc: " + ','.join(callstack) + "\n")
		checkAllTraces(testdir, crashdir, callstack, outdir, logToFile)

if __name__ == '__main__':
    main()




